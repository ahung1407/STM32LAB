
project_run_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dfc  08003dfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003dfc  08003dfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dfc  08003dfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003e10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003e10  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b413  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  0002b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167c8  00000000  00000000  0002e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5e4  00000000  00000000  00044938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080d5b  00000000  00000000  00050f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  000d1ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003da8 	.word	0x08003da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003da8 	.word	0x08003da8

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	; 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f89b 	bl	80012d4 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000028 	.word	0x20000028

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	; 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 f86b 	bl	80012d4 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	; 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	; 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f000 fb71 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	; 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	; 0x32
 800022a:	f000 fb6b 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f000 fb65 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f000 fb5f 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 fb59 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	; 0x32
 800025a:	f000 fb53 	bl	8000904 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000296:	2001      	movs	r0, #1
 8000298:	f7ff ff58 	bl	800014c <lcd_send_cmd>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d108      	bne.n	80002c2 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	b2da      	uxtb	r2, r3
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4413      	add	r3, r2
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	337f      	adds	r3, #127	; 0x7f
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	e008      	b.n	80002d4 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3340      	adds	r3, #64	; 0x40
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	b25b      	sxtb	r3, r3
 80002cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80002d4:	7bfb      	ldrb	r3, [r7, #15]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff38 	bl	800014c <lcd_send_cmd>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 faaa 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f83a 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f8d2 	bl	8000498 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002f4:	f000 f8a6 	bl	8000444 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80002f8:	f000 f876 	bl	80003e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	4815      	ldr	r0, [pc, #84]	; (8000358 <main+0x74>)
 8000302:	f000 fe3b 	bl	8000f7c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000306:	f7ff ff81 	bl	800020c <lcd_init>
  lcd_clear_display();       // Xóa màn hình LCD
 800030a:	f7ff ffc2 	bl	8000292 <lcd_clear_display>

	    lcd_goto_XY(0, 0);         // Di chuyển con tr�? đến hàng 1, cột 0
 800030e:	2100      	movs	r1, #0
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ffc5 	bl	80002a0 <lcd_goto_XY>
	    lcd_send_string("hello_"); // In "hello_" ở hàng đầu tiên
 8000316:	4811      	ldr	r0, [pc, #68]	; (800035c <main+0x78>)
 8000318:	f7ff ffa6 	bl	8000268 <lcd_send_string>
	    lcd_goto_XY(1, 0);         // Di chuyển con tr�? đến hàng 2, cột 0
 800031c:	2100      	movs	r1, #0
 800031e:	2001      	movs	r0, #1
 8000320:	f7ff ffbe 	bl	80002a0 <lcd_goto_XY>
	    lcd_send_string("world");  // In "world" ở hàng thứ hai
 8000324:	480e      	ldr	r0, [pc, #56]	; (8000360 <main+0x7c>)
 8000326:	f7ff ff9f 	bl	8000268 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */
	  led_test();
 800032a:	f000 fa55 	bl	80007d8 <led_test>
	  lcd_clear_display();       // Xóa màn hình LCD
 800032e:	f7ff ffb0 	bl	8000292 <lcd_clear_display>

	 	    lcd_goto_XY(0, 0);         // Di chuyển con tr�? đến hàng 1, cột 0
 8000332:	2100      	movs	r1, #0
 8000334:	2000      	movs	r0, #0
 8000336:	f7ff ffb3 	bl	80002a0 <lcd_goto_XY>
	 	    lcd_send_string("hello_"); // In "hello_" ở hàng đầu tiên
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0x78>)
 800033c:	f7ff ff94 	bl	8000268 <lcd_send_string>
	 	    lcd_goto_XY(1, 0);         // Di chuyển con tr�? đến hàng 2, cột 0
 8000340:	2100      	movs	r1, #0
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ffac 	bl	80002a0 <lcd_goto_XY>
	 	    lcd_send_string("world");  // In "world" ở hàng thứ hai
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <main+0x7c>)
 800034a:	f7ff ff8d 	bl	8000268 <lcd_send_string>
	 	    HAL_Delay(1000);
 800034e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000352:	f000 fad7 	bl	8000904 <HAL_Delay>
	  led_test();
 8000356:	e7e8      	b.n	800032a <main+0x46>
 8000358:	40010800 	.word	0x40010800
 800035c:	08003dc0 	.word	0x08003dc0
 8000360:	08003dc8 	.word	0x08003dc8

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b090      	sub	sp, #64	; 0x40
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0318 	add.w	r3, r7, #24
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f003 fd10 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]
 8000384:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000386:	2302      	movs	r3, #2
 8000388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038e:	2310      	movs	r3, #16
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000396:	2300      	movs	r3, #0
 8000398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800039a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800039e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a0:	f107 0318 	add.w	r3, r7, #24
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 ffe7 	bl	8003378 <HAL_RCC_OscConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003b0:	f000 f8f6 	bl	80005a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b4:	230f      	movs	r3, #15
 80003b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b8:	2302      	movs	r3, #2
 80003ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80003bc:	23a0      	movs	r3, #160	; 0xa0
 80003be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2102      	movs	r1, #2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fa52 	bl	8003878 <HAL_RCC_ClockConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003da:	f000 f8e1 	bl	80005a0 <Error_Handler>
  }
}
 80003de:	bf00      	nop
 80003e0:	3740      	adds	r7, #64	; 0x40
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_I2C1_Init+0x50>)
 80003ee:	4a13      	ldr	r2, [pc, #76]	; (800043c <MX_I2C1_Init+0x54>)
 80003f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_I2C1_Init+0x50>)
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <MX_I2C1_Init+0x58>)
 80003f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_I2C1_Init+0x50>)
 8000406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800040a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <MX_I2C1_Init+0x50>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_I2C1_Init+0x50>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_I2C1_Init+0x50>)
 8000426:	f000 fdfd 	bl	8001024 <HAL_I2C_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000430:	f000 f8b6 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000028 	.word	0x20000028
 800043c:	40005400 	.word	0x40005400
 8000440:	000186a0 	.word	0x000186a0

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <MX_USART2_UART_Init+0x50>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 8000450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_USART2_UART_Init+0x4c>)
 800047c:	f003 fb8a 	bl	8003b94 <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000486:	f000 f88b 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	2000007c 	.word	0x2000007c
 8000494:	40004400 	.word	0x40004400

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ac:	4b38      	ldr	r3, [pc, #224]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a37      	ldr	r2, [pc, #220]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004b2:	f043 0310 	orr.w	r3, r3, #16
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b35      	ldr	r3, [pc, #212]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0310 	and.w	r3, r3, #16
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c4:	4b32      	ldr	r3, [pc, #200]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a31      	ldr	r2, [pc, #196]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a2b      	ldr	r2, [pc, #172]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a25      	ldr	r2, [pc, #148]	; (8000590 <MX_GPIO_Init+0xf8>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_GPIO_Init+0xf8>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LED_RED_Pin, GPIO_PIN_RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2130      	movs	r1, #48	; 0x30
 8000510:	4820      	ldr	r0, [pc, #128]	; (8000594 <MX_GPIO_Init+0xfc>)
 8000512:	f000 fd33 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	481e      	ldr	r0, [pc, #120]	; (8000598 <MX_GPIO_Init+0x100>)
 800051e:	f000 fd2d 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_GPIO_Init+0x104>)
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4818      	ldr	r0, [pc, #96]	; (8000598 <MX_GPIO_Init+0x100>)
 8000538:	f000 fb9c 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LED_RED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED_RED_Pin;
 800053c:	2330      	movs	r3, #48	; 0x30
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2302      	movs	r3, #2
 800054a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4810      	ldr	r0, [pc, #64]	; (8000594 <MX_GPIO_Init+0xfc>)
 8000554:	f000 fb8e 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800055c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	2302      	movs	r3, #2
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	4809      	ldr	r0, [pc, #36]	; (8000598 <MX_GPIO_Init+0x100>)
 8000572:	f000 fb7f 	bl	8000c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2028      	movs	r0, #40	; 0x28
 800057c:	f000 fabd 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000580:	2028      	movs	r0, #40	; 0x28
 8000582:	f000 fad6 	bl	8000b32 <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	40011000 	.word	0x40011000
 800059c:	10110000 	.word	0x10110000

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_MspInit+0x6c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <HAL_MspInit+0x6c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_MspInit+0x6c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_MspInit+0x6c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <HAL_MspInit+0x6c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_MspInit+0x6c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2005      	movs	r0, #5
 80005e8:	f000 fa87 	bl	8000afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80005ec:	2005      	movs	r0, #5
 80005ee:	f000 faa0 	bl	8000b32 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_MspInit+0x70>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_MspInit+0x70>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <HAL_I2C_MspInit+0x90>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d133      	bne.n	80006a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000658:	23c0      	movs	r3, #192	; 0xc0
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065c:	2312      	movs	r3, #18
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <HAL_I2C_MspInit+0x98>)
 800066c:	f000 fb02 	bl	8000c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 8000676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067a:	61d3      	str	r3, [r2, #28]
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_I2C_MspInit+0x94>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	201f      	movs	r0, #31
 800068e:	f000 fa34 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000692:	201f      	movs	r0, #31
 8000694:	f000 fa4d 	bl	8000b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	2020      	movs	r0, #32
 800069e:	f000 fa2c 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f000 fa45 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010c00 	.word	0x40010c00

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_UART_MspInit+0x70>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d123      	bne.n	8000724 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_UART_MspInit+0x74>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <HAL_UART_MspInit+0x74>)
 80006e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e6:	61d3      	str	r3, [r2, #28]
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_UART_MspInit+0x74>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_UART_MspInit+0x74>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <HAL_UART_MspInit+0x74>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_UART_MspInit+0x74>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800070c:	230c      	movs	r3, #12
 800070e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <HAL_UART_MspInit+0x78>)
 8000720:	f000 faa8 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40004400 	.word	0x40004400
 8000730:	40021000 	.word	0x40021000
 8000734:	40010800 	.word	0x40010800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f8a5 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}

08000786 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
	...

08000794 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <I2C1_EV_IRQHandler+0x10>)
 800079a:	f000 fe99 	bl	80014d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000028 	.word	0x20000028

080007a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <I2C1_ER_IRQHandler+0x10>)
 80007ae:	f001 f800 	bl	80017b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007c4:	f000 fc0c 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <led_test>:


#include "test.h"


void led_test(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

	 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80007dc:	2120      	movs	r1, #32
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <led_test+0x18>)
 80007e0:	f000 fbe4 	bl	8000fac <HAL_GPIO_TogglePin>
		 HAL_Delay(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f000 f88d 	bl	8000904 <HAL_Delay>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40010800 	.word	0x40010800

080007f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f4:	f7ff ffea 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fa:	490c      	ldr	r1, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000810:	4c09      	ldr	r4, [pc, #36]	; (8000838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081e:	f003 fa97 	bl	8003d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fd5f 	bl	80002e4 <main>
  bx lr
 8000826:	4770      	bx	lr
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	08003e04 	.word	0x08003e04
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	200000c8 	.word	0x200000c8

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_Init+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_Init+0x28>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f947 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 f808 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff fea6 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x54>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x58>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	fbb3 f3f1 	udiv	r3, r3, r1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f95f 	bl	8000b4e <HAL_SYSTICK_Config>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e00e      	b.n	80008b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d80a      	bhi.n	80008b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a0:	2200      	movs	r2, #0
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f000 f927 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_InitTick+0x5c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	4a03      	ldr	r2, [pc, #12]	; (80008ec <HAL_IncTick+0x20>)
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000008 	.word	0x20000008
 80008ec:	200000c4 	.word	0x200000c4

080008f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	200000c4 	.word	0x200000c4

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff2d 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff42 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff35 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d005      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2204      	movs	r2, #4
 8000b84:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e051      	b.n	8000c30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 020e 	bic.w	r2, r2, #14
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f022 0201 	bic.w	r2, r2, #1
 8000baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_DMA_Abort_IT+0xd4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d029      	beq.n	8000c0a <HAL_DMA_Abort_IT+0xa2>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <HAL_DMA_Abort_IT+0xd8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d022      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x9e>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <HAL_DMA_Abort_IT+0xdc>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d01a      	beq.n	8000c00 <HAL_DMA_Abort_IT+0x98>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_DMA_Abort_IT+0xe0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d012      	beq.n	8000bfa <HAL_DMA_Abort_IT+0x92>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_DMA_Abort_IT+0xe4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d00a      	beq.n	8000bf4 <HAL_DMA_Abort_IT+0x8c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <HAL_DMA_Abort_IT+0xe8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d102      	bne.n	8000bee <HAL_DMA_Abort_IT+0x86>
 8000be8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bec:	e00e      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bf2:	e00b      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	e008      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	e005      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c04:	e002      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000c06:	2310      	movs	r3, #16
 8000c08:	e000      	b.n	8000c0c <HAL_DMA_Abort_IT+0xa4>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_DMA_Abort_IT+0xec>)
 8000c0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	4798      	blx	r3
    } 
  }
  return status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020008 	.word	0x40020008
 8000c40:	4002001c 	.word	0x4002001c
 8000c44:	40020030 	.word	0x40020030
 8000c48:	40020044 	.word	0x40020044
 8000c4c:	40020058 	.word	0x40020058
 8000c50:	4002006c 	.word	0x4002006c
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c66:	b2db      	uxtb	r3, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	e169      	b.n	8000f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f040 8158 	bne.w	8000f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a9a      	ldr	r2, [pc, #616]	; (8000f14 <HAL_GPIO_Init+0x2a0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d05e      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cb0:	4a98      	ldr	r2, [pc, #608]	; (8000f14 <HAL_GPIO_Init+0x2a0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d875      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a98      	ldr	r2, [pc, #608]	; (8000f18 <HAL_GPIO_Init+0x2a4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d058      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cbc:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <HAL_GPIO_Init+0x2a4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d86f      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a96      	ldr	r2, [pc, #600]	; (8000f1c <HAL_GPIO_Init+0x2a8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d052      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cc8:	4a94      	ldr	r2, [pc, #592]	; (8000f1c <HAL_GPIO_Init+0x2a8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d869      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cce:	4a94      	ldr	r2, [pc, #592]	; (8000f20 <HAL_GPIO_Init+0x2ac>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d04c      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000cd4:	4a92      	ldr	r2, [pc, #584]	; (8000f20 <HAL_GPIO_Init+0x2ac>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d863      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cda:	4a92      	ldr	r2, [pc, #584]	; (8000f24 <HAL_GPIO_Init+0x2b0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d046      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
 8000ce0:	4a90      	ldr	r2, [pc, #576]	; (8000f24 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d85d      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d82a      	bhi.n	8000d40 <HAL_GPIO_Init+0xcc>
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d859      	bhi.n	8000da2 <HAL_GPIO_Init+0x12e>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <HAL_GPIO_Init+0x80>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d49 	.word	0x08000d49
 8000cfc:	08000d5b 	.word	0x08000d5b
 8000d00:	08000d9d 	.word	0x08000d9d
 8000d04:	08000da3 	.word	0x08000da3
 8000d08:	08000da3 	.word	0x08000da3
 8000d0c:	08000da3 	.word	0x08000da3
 8000d10:	08000da3 	.word	0x08000da3
 8000d14:	08000da3 	.word	0x08000da3
 8000d18:	08000da3 	.word	0x08000da3
 8000d1c:	08000da3 	.word	0x08000da3
 8000d20:	08000da3 	.word	0x08000da3
 8000d24:	08000da3 	.word	0x08000da3
 8000d28:	08000da3 	.word	0x08000da3
 8000d2c:	08000da3 	.word	0x08000da3
 8000d30:	08000da3 	.word	0x08000da3
 8000d34:	08000da3 	.word	0x08000da3
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000d65 	.word	0x08000d65
 8000d40:	4a79      	ldr	r2, [pc, #484]	; (8000f28 <HAL_GPIO_Init+0x2b4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d46:	e02c      	b.n	8000da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	623b      	str	r3, [r7, #32]
          break;
 8000d4e:	e029      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3304      	adds	r3, #4
 8000d56:	623b      	str	r3, [r7, #32]
          break;
 8000d58:	e024      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	3308      	adds	r3, #8
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e01f      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	330c      	adds	r3, #12
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e01a      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d76:	2304      	movs	r3, #4
 8000d78:	623b      	str	r3, [r7, #32]
          break;
 8000d7a:	e013      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d105      	bne.n	8000d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	611a      	str	r2, [r3, #16]
          break;
 8000d8e:	e009      	b.n	8000da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d90:	2308      	movs	r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	615a      	str	r2, [r3, #20]
          break;
 8000d9a:	e003      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x130>
          break;
 8000da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2bff      	cmp	r3, #255	; 0xff
 8000da8:	d801      	bhi.n	8000dae <HAL_GPIO_Init+0x13a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	e001      	b.n	8000db2 <HAL_GPIO_Init+0x13e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3304      	adds	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	2bff      	cmp	r3, #255	; 0xff
 8000db8:	d802      	bhi.n	8000dc0 <HAL_GPIO_Init+0x14c>
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x152>
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	3b08      	subs	r3, #8
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	210f      	movs	r1, #15
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	6a39      	ldr	r1, [r7, #32]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	431a      	orrs	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80b1 	beq.w	8000f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df4:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <HAL_GPIO_Init+0x2b8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e0c:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <HAL_GPIO_Init+0x2bc>)
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a40      	ldr	r2, [pc, #256]	; (8000f34 <HAL_GPIO_Init+0x2c0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d013      	beq.n	8000e60 <HAL_GPIO_Init+0x1ec>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	; (8000f38 <HAL_GPIO_Init+0x2c4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d00d      	beq.n	8000e5c <HAL_GPIO_Init+0x1e8>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3e      	ldr	r2, [pc, #248]	; (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_GPIO_Init+0x1e0>
 8000e50:	2303      	movs	r3, #3
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e54:	2304      	movs	r3, #4
 8000e56:	e004      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e60:	2300      	movs	r3, #0
 8000e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e72:	492f      	ldr	r1, [pc, #188]	; (8000f30 <HAL_GPIO_Init+0x2bc>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	492c      	ldr	r1, [pc, #176]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4928      	ldr	r1, [pc, #160]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d006      	beq.n	8000ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	4922      	ldr	r1, [pc, #136]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60cb      	str	r3, [r1, #12]
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	491e      	ldr	r1, [pc, #120]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	4918      	ldr	r1, [pc, #96]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4914      	ldr	r1, [pc, #80]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d021      	beq.n	8000f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	490e      	ldr	r1, [pc, #56]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]
 8000f10:	e021      	b.n	8000f56 <HAL_GPIO_Init+0x2e2>
 8000f12:	bf00      	nop
 8000f14:	10320000 	.word	0x10320000
 8000f18:	10310000 	.word	0x10310000
 8000f1c:	10220000 	.word	0x10220000
 8000f20:	10210000 	.word	0x10210000
 8000f24:	10120000 	.word	0x10120000
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40011400 	.word	0x40011400
 8000f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	4909      	ldr	r1, [pc, #36]	; (8000f78 <HAL_GPIO_Init+0x304>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	3301      	adds	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f47f ae8e 	bne.w	8000c88 <HAL_GPIO_Init+0x14>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	372c      	adds	r7, #44	; 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43d9      	mvns	r1, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f806 	bl	8001010 <HAL_GPIO_EXTI_Callback>
  }
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010400 	.word	0x40010400

08001010 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e12b      	b.n	800128e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fae8 	bl	8000620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001088:	f002 fd3e 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 800108c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a81      	ldr	r2, [pc, #516]	; (8001298 <HAL_I2C_Init+0x274>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d807      	bhi.n	80010a8 <HAL_I2C_Init+0x84>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a80      	ldr	r2, [pc, #512]	; (800129c <HAL_I2C_Init+0x278>)
 800109c:	4293      	cmp	r3, r2
 800109e:	bf94      	ite	ls
 80010a0:	2301      	movls	r3, #1
 80010a2:	2300      	movhi	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	e006      	b.n	80010b6 <HAL_I2C_Init+0x92>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a7d      	ldr	r2, [pc, #500]	; (80012a0 <HAL_I2C_Init+0x27c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	bf94      	ite	ls
 80010b0:	2301      	movls	r3, #1
 80010b2:	2300      	movhi	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0e7      	b.n	800128e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4a78      	ldr	r2, [pc, #480]	; (80012a4 <HAL_I2C_Init+0x280>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4a6a      	ldr	r2, [pc, #424]	; (8001298 <HAL_I2C_Init+0x274>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d802      	bhi.n	80010f8 <HAL_I2C_Init+0xd4>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3301      	adds	r3, #1
 80010f6:	e009      	b.n	800110c <HAL_I2C_Init+0xe8>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4a69      	ldr	r2, [pc, #420]	; (80012a8 <HAL_I2C_Init+0x284>)
 8001104:	fba2 2303 	umull	r2, r3, r2, r3
 8001108:	099b      	lsrs	r3, r3, #6
 800110a:	3301      	adds	r3, #1
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	430b      	orrs	r3, r1
 8001112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800111e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	495c      	ldr	r1, [pc, #368]	; (8001298 <HAL_I2C_Init+0x274>)
 8001128:	428b      	cmp	r3, r1
 800112a:	d819      	bhi.n	8001160 <HAL_I2C_Init+0x13c>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1e59      	subs	r1, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fbb1 f3f3 	udiv	r3, r1, r3
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001140:	400b      	ands	r3, r1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <HAL_I2C_Init+0x138>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1e59      	subs	r1, r3, #1
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fbb1 f3f3 	udiv	r3, r1, r3
 8001154:	3301      	adds	r3, #1
 8001156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115a:	e051      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 800115c:	2304      	movs	r3, #4
 800115e:	e04f      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_I2C_Init+0x168>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e58      	subs	r0, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	440b      	add	r3, r1
 8001176:	fbb0 f3f3 	udiv	r3, r0, r3
 800117a:	3301      	adds	r3, #1
 800117c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	e012      	b.n	80011b2 <HAL_I2C_Init+0x18e>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e58      	subs	r0, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	0099      	lsls	r1, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Init+0x196>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e022      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10e      	bne.n	80011e0 <HAL_I2C_Init+0x1bc>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e58      	subs	r0, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6859      	ldr	r1, [r3, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	440b      	add	r3, r1
 80011d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011de:	e00f      	b.n	8001200 <HAL_I2C_Init+0x1dc>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	1e58      	subs	r0, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	0099      	lsls	r1, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f6:	3301      	adds	r3, #1
 80011f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	6809      	ldr	r1, [r1, #0]
 8001204:	4313      	orrs	r3, r2
 8001206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69da      	ldr	r2, [r3, #28]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800122e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6911      	ldr	r1, [r2, #16]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68d2      	ldr	r2, [r2, #12]
 800123a:	4311      	orrs	r1, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	430b      	orrs	r3, r1
 8001242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2220      	movs	r2, #32
 800127a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	000186a0 	.word	0x000186a0
 800129c:	001e847f 	.word	0x001e847f
 80012a0:	003d08ff 	.word	0x003d08ff
 80012a4:	431bde83 	.word	0x431bde83
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	2b80      	cmp	r3, #128	; 0x80
 80012c0:	d103      	bne.n	80012ca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af02      	add	r7, sp, #8
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	461a      	mov	r2, r3
 80012e0:	460b      	mov	r3, r1
 80012e2:	817b      	strh	r3, [r7, #10]
 80012e4:	4613      	mov	r3, r2
 80012e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fb02 	bl	80008f0 <HAL_GetTick>
 80012ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	f040 80e0 	bne.w	80014bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2319      	movs	r3, #25
 8001302:	2201      	movs	r2, #1
 8001304:	4970      	ldr	r1, [pc, #448]	; (80014c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f001 fe12 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001312:	2302      	movs	r3, #2
 8001314:	e0d3      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2C_Master_Transmit+0x50>
 8001320:	2302      	movs	r3, #2
 8001322:	e0cc      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d007      	beq.n	800134a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001358:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2221      	movs	r2, #33	; 0x21
 800135e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2210      	movs	r2, #16
 8001366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	893a      	ldrh	r2, [r7, #8]
 800137a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4a50      	ldr	r2, [pc, #320]	; (80014cc <HAL_I2C_Master_Transmit+0x1f8>)
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800138c:	8979      	ldrh	r1, [r7, #10]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	6a3a      	ldr	r2, [r7, #32]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f001 fca2 	bl	8002cdc <I2C_MasterRequestWrite>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e08d      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013b8:	e066      	b.n	8001488 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	6a39      	ldr	r1, [r7, #32]
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f001 fed0 	bl	8003164 <I2C_WaitOnTXEFlagUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00d      	beq.n	80013e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06b      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001400:	b29b      	uxth	r3, r3
 8001402:	3b01      	subs	r3, #1
 8001404:	b29a      	uxth	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b04      	cmp	r3, #4
 8001422:	d11b      	bne.n	800145c <HAL_I2C_Master_Transmit+0x188>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d017      	beq.n	800145c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	6a39      	ldr	r1, [r7, #32]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f001 fec7 	bl	80031f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00d      	beq.n	8001488 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b04      	cmp	r3, #4
 8001472:	d107      	bne.n	8001484 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001482:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e01a      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d194      	bne.n	80013ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800149e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2220      	movs	r2, #32
 80014a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e000      	b.n	80014be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
  }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	00100002 	.word	0x00100002
 80014cc:	ffff0000 	.word	0xffff0000

080014d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d003      	beq.n	8001508 <HAL_I2C_EV_IRQHandler+0x38>
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	f040 80c1 	bne.w	800168a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_I2C_EV_IRQHandler+0x6e>
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001528:	d003      	beq.n	8001532 <HAL_I2C_EV_IRQHandler+0x62>
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001530:	d101      	bne.n	8001536 <HAL_I2C_EV_IRQHandler+0x66>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_I2C_EV_IRQHandler+0x68>
 8001536:	2300      	movs	r3, #0
 8001538:	2b01      	cmp	r3, #1
 800153a:	f000 8132 	beq.w	80017a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00c      	beq.n	8001562 <HAL_I2C_EV_IRQHandler+0x92>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	0a5b      	lsrs	r3, r3, #9
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f001 fef5 	bl	8003344 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fd99 	bl	8002092 <I2C_Master_SB>
 8001560:	e092      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <HAL_I2C_EV_IRQHandler+0xb2>
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	0a5b      	lsrs	r3, r3, #9
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fe0e 	bl	800219c <I2C_Master_ADD10>
 8001580:	e082      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	085b      	lsrs	r3, r3, #1
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	0a5b      	lsrs	r3, r3, #9
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fe27 	bl	80021ee <I2C_Master_ADDR>
 80015a0:	e072      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d03b      	beq.n	8001626 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015bc:	f000 80f3 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	09db      	lsrs	r3, r3, #7
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00f      	beq.n	80015ec <HAL_I2C_EV_IRQHandler+0x11c>
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <HAL_I2C_EV_IRQHandler+0x11c>
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f9f1 	bl	80019cc <I2C_MasterTransmit_TXE>
 80015ea:	e04d      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80d6 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	0a5b      	lsrs	r3, r3, #9
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80cf 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	2b21      	cmp	r3, #33	; 0x21
 800160c:	d103      	bne.n	8001616 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fa78 	bl	8001b04 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001614:	e0c7      	b.n	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b40      	cmp	r3, #64	; 0x40
 800161a:	f040 80c4 	bne.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fae6 	bl	8001bf0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001624:	e0bf      	b.n	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001634:	f000 80b7 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00f      	beq.n	8001664 <HAL_I2C_EV_IRQHandler+0x194>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <HAL_I2C_EV_IRQHandler+0x194>
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fb5f 	bl	8001d20 <I2C_MasterReceive_RXNE>
 8001662:	e011      	b.n	8001688 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 809a 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	0a5b      	lsrs	r3, r3, #9
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8093 	beq.w	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fc15 	bl	8001eb0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001686:	e08e      	b.n	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001688:	e08d      	b.n	80017a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	e007      	b.n	80016ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d012      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x20e>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	0a5b      	lsrs	r3, r3, #9
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 ffe0 	bl	800269c <I2C_Slave_ADDR>
 80016dc:	e066      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_I2C_EV_IRQHandler+0x22e>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	0a5b      	lsrs	r3, r3, #9
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f001 f81a 	bl	8002730 <I2C_Slave_STOPF>
 80016fc:	e056      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
 8001700:	2b21      	cmp	r3, #33	; 0x21
 8001702:	d002      	beq.n	800170a <HAL_I2C_EV_IRQHandler+0x23a>
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	2b29      	cmp	r3, #41	; 0x29
 8001708:	d125      	bne.n	8001756 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	09db      	lsrs	r3, r3, #7
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <HAL_I2C_EV_IRQHandler+0x266>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	0a9b      	lsrs	r3, r3, #10
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_I2C_EV_IRQHandler+0x266>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fef8 	bl	8002524 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001734:	e039      	b.n	80017aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d033      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x2da>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	0a5b      	lsrs	r3, r3, #9
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d02d      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 ff25 	bl	800259e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001754:	e029      	b.n	80017aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00f      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	0a9b      	lsrs	r3, r3, #10
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_I2C_EV_IRQHandler+0x2b2>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 ff2f 	bl	80025de <I2C_SlaveReceive_RXNE>
 8001780:	e014      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00e      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	0a5b      	lsrs	r3, r3, #9
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 ff5d 	bl	800265a <I2C_SlaveReceive_BTF>
 80017a0:	e004      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80017a2:	bf00      	nop
 80017a4:	e002      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b08a      	sub	sp, #40	; 0x28
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0x5e>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d010      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017fe:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00e      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0x88>
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001838:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	0a9b      	lsrs	r3, r3, #10
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03f      	beq.n	80018c6 <HAL_I2C_ER_IRQHandler+0x114>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d039      	beq.n	80018c6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001852:	7efb      	ldrb	r3, [r7, #27]
 8001854:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001864:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800186c:	7ebb      	ldrb	r3, [r7, #26]
 800186e:	2b20      	cmp	r3, #32
 8001870:	d112      	bne.n	8001898 <HAL_I2C_ER_IRQHandler+0xe6>
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_I2C_ER_IRQHandler+0xe6>
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	2b21      	cmp	r3, #33	; 0x21
 800187c:	d008      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800187e:	7cfb      	ldrb	r3, [r7, #19]
 8001880:	2b29      	cmp	r3, #41	; 0x29
 8001882:	d005      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0xde>
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	2b28      	cmp	r3, #40	; 0x28
 8001888:	d106      	bne.n	8001898 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b21      	cmp	r3, #33	; 0x21
 800188e:	d103      	bne.n	8001898 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 f87d 	bl	8002990 <I2C_Slave_AF>
 8001896:	e016      	b.n	80018c6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018aa:	7efb      	ldrb	r3, [r7, #27]
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d002      	beq.n	80018b6 <HAL_I2C_ER_IRQHandler+0x104>
 80018b0:	7efb      	ldrb	r3, [r7, #27]
 80018b2:	2b40      	cmp	r3, #64	; 0x40
 80018b4:	d107      	bne.n	80018c6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	0adb      	lsrs	r3, r3, #11
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00e      	beq.n	80018f0 <HAL_I2C_ER_IRQHandler+0x13e>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80018ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f001 f8b8 	bl	8002a78 <I2C_ITError>
  }
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
 8001964:	4613      	mov	r3, r2
 8001966:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d150      	bne.n	8001a94 <I2C_MasterTransmit_TXE+0xc8>
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b21      	cmp	r3, #33	; 0x21
 80019f6:	d14d      	bne.n	8001a94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d01d      	beq.n	8001a3a <I2C_MasterTransmit_TXE+0x6e>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d01a      	beq.n	8001a3a <I2C_MasterTransmit_TXE+0x6e>
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a0a:	d016      	beq.n	8001a3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2211      	movs	r2, #17
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff6c 	bl	8001910 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a38:	e060      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b40      	cmp	r3, #64	; 0x40
 8001a72:	d107      	bne.n	8001a84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff81 	bl	8001984 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a82:	e03b      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff3f 	bl	8001910 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a92:	e033      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b21      	cmp	r3, #33	; 0x21
 8001a98:	d005      	beq.n	8001aa6 <I2C_MasterTransmit_TXE+0xda>
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d12d      	bne.n	8001afc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b22      	cmp	r3, #34	; 0x22
 8001aa4:	d12a      	bne.n	8001afc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d108      	bne.n	8001ac2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ac0:	e01c      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d103      	bne.n	8001ad6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f88e 	bl	8001bf0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001ad4:	e012      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001afa:	e7ff      	b.n	8001afc <I2C_MasterTransmit_TXE+0x130>
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b21      	cmp	r3, #33	; 0x21
 8001b1c:	d164      	bne.n	8001be8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d012      	beq.n	8001b4e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b4c:	e04c      	b.n	8001be8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d01d      	beq.n	8001b90 <I2C_MasterTransmit_BTF+0x8c>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d01a      	beq.n	8001b90 <I2C_MasterTransmit_BTF+0x8c>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b60:	d016      	beq.n	8001b90 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b70:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2211      	movs	r2, #17
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fec1 	bl	8001910 <HAL_I2C_MasterTxCpltCallback>
}
 8001b8e:	e02b      	b.n	8001be8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b9e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d107      	bne.n	8001bda <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fed6 	bl	8001984 <HAL_I2C_MemTxCpltCallback>
}
 8001bd8:	e006      	b.n	8001be8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe94 	bl	8001910 <HAL_I2C_MasterTxCpltCallback>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d11d      	bne.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10b      	bne.n	8001c28 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c20:	1c9a      	adds	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001c26:	e077      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	121b      	asrs	r3, r3, #8
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c42:	e069      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10b      	bne.n	8001c64 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c62:	e059      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d152      	bne.n	8001d12 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b22      	cmp	r3, #34	; 0x22
 8001c70:	d10d      	bne.n	8001c8e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c80:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c8c:	e044      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b21      	cmp	r3, #33	; 0x21
 8001c9c:	d112      	bne.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001cc2:	e029      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d124      	bne.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b21      	cmp	r3, #33	; 0x21
 8001cd2:	d121      	bne.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ce2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fe3a 	bl	8001984 <HAL_I2C_MemTxCpltCallback>
}
 8001d10:	e002      	b.n	8001d18 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff faca 	bl	80012ac <I2C_Flush_DR>
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b22      	cmp	r3, #34	; 0x22
 8001d32:	f040 80b9 	bne.w	8001ea8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d921      	bls.n	8001d8e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	f040 8096 	bne.w	8001ea8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d8c:	e08c      	b.n	8001ea8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d07f      	beq.n	8001e96 <I2C_MasterReceive_RXNE+0x176>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d002      	beq.n	8001da2 <I2C_MasterReceive_RXNE+0x82>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d179      	bne.n	8001e96 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f001 fa6e 	bl	8003284 <I2C_WaitOnSTOPRequestThroughIT>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d14c      	bne.n	8001e48 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dcc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d10a      	bne.n	8001e1e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fdbd 	bl	8001996 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e1c:	e044      	b.n	8001ea8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d002      	beq.n	8001e32 <I2C_MasterReceive_RXNE+0x112>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d103      	bne.n	8001e3a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
 8001e38:	e002      	b.n	8001e40 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2212      	movs	r2, #18
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fd6e 	bl	8001922 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e46:	e02f      	b.n	8001ea8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd8a 	bl	80019a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e94:	e008      	b.n	8001ea8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea4:	605a      	str	r2, [r3, #4]
}
 8001ea6:	e7ff      	b.n	8001ea8 <I2C_MasterReceive_RXNE+0x188>
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d11b      	bne.n	8001f00 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001efe:	e0c4      	b.n	800208a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d129      	bne.n	8001f5e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d00a      	beq.n	8001f36 <I2C_MasterReceive_BTF+0x86>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d007      	beq.n	8001f36 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f34:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f5c:	e095      	b.n	800208a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d17d      	bne.n	8002064 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d002      	beq.n	8001f74 <I2C_MasterReceive_BTF+0xc4>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d108      	bne.n	8001f86 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e016      	b.n	8001fb4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d002      	beq.n	8001f92 <I2C_MasterReceive_BTF+0xe2>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d108      	bne.n	8001fa4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e007      	b.n	8001fb4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800200e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d10a      	bne.n	800203a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fcaf 	bl	8001996 <HAL_I2C_MemRxCpltCallback>
}
 8002038:	e027      	b.n	800208a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d002      	beq.n	800204e <I2C_MasterReceive_BTF+0x19e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b20      	cmp	r3, #32
 800204c:	d103      	bne.n	8002056 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	e002      	b.n	800205c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2212      	movs	r2, #18
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff fc60 	bl	8001922 <HAL_I2C_MasterRxCpltCallback>
}
 8002062:	e012      	b.n	800208a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d117      	bne.n	80020d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80020c0:	e067      	b.n	8002192 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	611a      	str	r2, [r3, #16]
}
 80020d4:	e05d      	b.n	8002192 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020de:	d133      	bne.n	8002148 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b21      	cmp	r3, #33	; 0x21
 80020ea:	d109      	bne.n	8002100 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	e008      	b.n	8002112 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <I2C_Master_SB+0x92>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	2b00      	cmp	r3, #0
 800212a:	d032      	beq.n	8002192 <I2C_Master_SB+0x100>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02d      	beq.n	8002192 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002144:	605a      	str	r2, [r3, #4]
}
 8002146:	e024      	b.n	8002192 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10e      	bne.n	800216e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	b29b      	uxth	r3, r3
 8002156:	11db      	asrs	r3, r3, #7
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 0306 	and.w	r3, r3, #6
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f063 030f 	orn	r3, r3, #15
 8002164:	b2da      	uxtb	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	611a      	str	r2, [r3, #16]
}
 800216c:	e011      	b.n	8002192 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	b29b      	uxth	r3, r3
 800217c:	11db      	asrs	r3, r3, #7
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f003 0306 	and.w	r3, r3, #6
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f063 030e 	orn	r3, r3, #14
 800218a:	b2da      	uxtb	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	611a      	str	r2, [r3, #16]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <I2C_Master_ADD10+0x26>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <I2C_Master_ADD10+0x48>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e2:	605a      	str	r2, [r3, #4]
  }
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b091      	sub	sp, #68	; 0x44
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b22      	cmp	r3, #34	; 0x22
 8002216:	f040 8174 	bne.w	8002502 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <I2C_Master_ADDR+0x54>
 8002222:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d10b      	bne.n	8002242 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	e16b      	b.n	800251a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11d      	bne.n	8002286 <I2C_Master_ADDR+0x98>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002252:	d118      	bne.n	8002286 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002278:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	651a      	str	r2, [r3, #80]	; 0x50
 8002284:	e149      	b.n	800251a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d113      	bne.n	80022b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	e120      	b.n	80024fa <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	f040 808a 	bne.w	80023d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022ca:	d137      	bne.n	800233c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ea:	d113      	bne.n	8002314 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	e0f2      	b.n	80024fa <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e0de      	b.n	80024fa <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233e:	2b08      	cmp	r3, #8
 8002340:	d02e      	beq.n	80023a0 <I2C_Master_ADDR+0x1b2>
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	2b20      	cmp	r3, #32
 8002346:	d02b      	beq.n	80023a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	2b12      	cmp	r3, #18
 800234c:	d102      	bne.n	8002354 <I2C_Master_ADDR+0x166>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	2b01      	cmp	r3, #1
 8002352:	d125      	bne.n	80023a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b04      	cmp	r3, #4
 8002358:	d00e      	beq.n	8002378 <I2C_Master_ADDR+0x18a>
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2b02      	cmp	r3, #2
 800235e:	d00b      	beq.n	8002378 <I2C_Master_ADDR+0x18a>
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b10      	cmp	r3, #16
 8002364:	d008      	beq.n	8002378 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e007      	b.n	8002388 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002386:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	e0ac      	b.n	80024fa <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e090      	b.n	80024fa <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d158      	bne.n	8002494 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d021      	beq.n	800242c <I2C_Master_ADDR+0x23e>
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d01e      	beq.n	800242c <I2C_Master_ADDR+0x23e>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d01b      	beq.n	800242c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e012      	b.n	8002452 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800243a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002460:	d14b      	bne.n	80024fa <I2C_Master_ADDR+0x30c>
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002468:	d00b      	beq.n	8002482 <I2C_Master_ADDR+0x294>
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	2b01      	cmp	r3, #1
 800246e:	d008      	beq.n	8002482 <I2C_Master_ADDR+0x294>
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	2b08      	cmp	r3, #8
 8002474:	d005      	beq.n	8002482 <I2C_Master_ADDR+0x294>
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	2b10      	cmp	r3, #16
 800247a:	d002      	beq.n	8002482 <I2C_Master_ADDR+0x294>
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	2b20      	cmp	r3, #32
 8002480:	d13b      	bne.n	80024fa <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	e032      	b.n	80024fa <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b2:	d117      	bne.n	80024e4 <I2C_Master_ADDR+0x2f6>
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ba:	d00b      	beq.n	80024d4 <I2C_Master_ADDR+0x2e6>
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d008      	beq.n	80024d4 <I2C_Master_ADDR+0x2e6>
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d005      	beq.n	80024d4 <I2C_Master_ADDR+0x2e6>
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d002      	beq.n	80024d4 <I2C_Master_ADDR+0x2e6>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d107      	bne.n	80024e4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002500:	e00b      	b.n	800251a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
}
 8002518:	e7ff      	b.n	800251a <I2C_Master_ADDR+0x32c>
 800251a:	bf00      	nop
 800251c:	3744      	adds	r7, #68	; 0x44
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002532:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d02b      	beq.n	8002596 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d114      	bne.n	8002596 <I2C_SlaveTransmit_TXE+0x72>
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b29      	cmp	r3, #41	; 0x29
 8002570:	d111      	bne.n	8002596 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002580:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2221      	movs	r2, #33	; 0x21
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2228      	movs	r2, #40	; 0x28
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff f9cf 	bl	8001934 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d02c      	beq.n	8002652 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d114      	bne.n	8002652 <I2C_SlaveReceive_RXNE+0x74>
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b2a      	cmp	r3, #42	; 0x2a
 800262c:	d111      	bne.n	8002652 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2222      	movs	r2, #34	; 0x22
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2228      	movs	r2, #40	; 0x28
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff f97a 	bl	8001946 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026b6:	2b28      	cmp	r3, #40	; 0x28
 80026b8:	d127      	bne.n	800270a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	09db      	lsrs	r3, r3, #7
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	81bb      	strh	r3, [r7, #12]
 80026ec:	e002      	b.n	80026f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026fc:	89ba      	ldrh	r2, [r7, #12]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	4619      	mov	r1, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff f928 	bl	8001958 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002708:	e00e      	b.n	8002728 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800274e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278c:	d172      	bne.n	8002874 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b22      	cmp	r3, #34	; 0x22
 8002792:	d002      	beq.n	800279a <I2C_Slave_STOPF+0x6a>
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b2a      	cmp	r3, #42	; 0x2a
 8002798:	d135      	bne.n	8002806 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fa40 	bl	8000c58 <HAL_DMA_GetState>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d049      	beq.n	8002872 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	4a69      	ldr	r2, [pc, #420]	; (8002988 <I2C_Slave_STOPF+0x258>)
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe f9bc 	bl	8000b68 <HAL_DMA_Abort_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03d      	beq.n	8002872 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	4610      	mov	r0, r2
 8002802:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002804:	e035      	b.n	8002872 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002838:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fa0a 	bl	8000c58 <HAL_DMA_GetState>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d014      	beq.n	8002874 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	4a4e      	ldr	r2, [pc, #312]	; (8002988 <I2C_Slave_STOPF+0x258>)
 8002850:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe f986 	bl	8000b68 <HAL_DMA_Abort_IT>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3
 8002870:	e000      	b.n	8002874 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002872:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03e      	beq.n	80028fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b04      	cmp	r3, #4
 800288a:	d112      	bne.n	80028b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d112      	bne.n	80028e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f8b7 	bl	8002a78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800290a:	e039      	b.n	8002980 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b2a      	cmp	r3, #42	; 0x2a
 8002910:	d109      	bne.n	8002926 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2228      	movs	r2, #40	; 0x28
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f810 	bl	8001946 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b28      	cmp	r3, #40	; 0x28
 8002930:	d111      	bne.n	8002956 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <I2C_Slave_STOPF+0x25c>)
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff f80f 	bl	8001972 <HAL_I2C_ListenCpltCallback>
}
 8002954:	e014      	b.n	8002980 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	2b22      	cmp	r3, #34	; 0x22
 800295c:	d002      	beq.n	8002964 <I2C_Slave_STOPF+0x234>
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b22      	cmp	r3, #34	; 0x22
 8002962:	d10d      	bne.n	8002980 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe ffe3 	bl	8001946 <HAL_I2C_SlaveRxCpltCallback>
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08002de1 	.word	0x08002de1
 800298c:	ffff0000 	.word	0xffff0000

08002990 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d002      	beq.n	80029b2 <I2C_Slave_AF+0x22>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d129      	bne.n	8002a06 <I2C_Slave_AF+0x76>
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b28      	cmp	r3, #40	; 0x28
 80029b6:	d126      	bne.n	8002a06 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <I2C_Slave_AF+0xe4>)
 80029bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe ffb7 	bl	8001972 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a04:	e031      	b.n	8002a6a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b21      	cmp	r3, #33	; 0x21
 8002a0a:	d129      	bne.n	8002a60 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <I2C_Slave_AF+0xe4>)
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a36:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a40:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a50:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fc2a 	bl	80012ac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fe ff6b 	bl	8001934 <HAL_I2C_SlaveTxCpltCallback>
}
 8002a5e:	e004      	b.n	8002a6a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a68:	615a      	str	r2, [r3, #20]
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	ffff0000 	.word	0xffff0000

08002a78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a90:	7bbb      	ldrb	r3, [r7, #14]
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d002      	beq.n	8002a9c <I2C_ITError+0x24>
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d10a      	bne.n	8002ab2 <I2C_ITError+0x3a>
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	d107      	bne.n	8002ab2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ab8:	2b28      	cmp	r3, #40	; 0x28
 8002aba:	d107      	bne.n	8002acc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2228      	movs	r2, #40	; 0x28
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002aca:	e015      	b.n	8002af8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ada:	d00a      	beq.n	8002af2 <I2C_ITError+0x7a>
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b60      	cmp	r3, #96	; 0x60
 8002ae0:	d007      	beq.n	8002af2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b06:	d162      	bne.n	8002bce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d020      	beq.n	8002b68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <I2C_ITError+0x25c>)
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe f818 	bl	8000b68 <HAL_DMA_Abort_IT>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8089 	beq.w	8002c52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b62:	4610      	mov	r0, r2
 8002b64:	4798      	blx	r3
 8002b66:	e074      	b.n	8002c52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	4a59      	ldr	r2, [pc, #356]	; (8002cd4 <I2C_ITError+0x25c>)
 8002b6e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fff7 	bl	8000b68 <HAL_DMA_Abort_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d068      	beq.n	8002c52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d10b      	bne.n	8002ba6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4798      	blx	r3
 8002bcc:	e041      	b.n	8002c52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b60      	cmp	r3, #96	; 0x60
 8002bd8:	d125      	bne.n	8002c26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d10b      	bne.n	8002c0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fecb 	bl	80019ba <HAL_I2C_AbortCpltCallback>
 8002c24:	e015      	b.n	8002c52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	d10b      	bne.n	8002c4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fe feab 	bl	80019a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10e      	bne.n	8002c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d113      	bne.n	8002ccc <I2C_ITError+0x254>
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b28      	cmp	r3, #40	; 0x28
 8002ca8:	d110      	bne.n	8002ccc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <I2C_ITError+0x260>)
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fe53 	bl	8001972 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	08002de1 	.word	0x08002de1
 8002cd8:	ffff0000 	.word	0xffff0000

08002cdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d006      	beq.n	8002d06 <I2C_MasterRequestWrite+0x2a>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d003      	beq.n	8002d06 <I2C_MasterRequestWrite+0x2a>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d04:	d108      	bne.n	8002d18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e00b      	b.n	8002d30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b12      	cmp	r3, #18
 8002d1e:	d107      	bne.n	8002d30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f8f7 	bl	8002f30 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d103      	bne.n	8002d60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e035      	b.n	8002dd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6c:	d108      	bne.n	8002d80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	e01b      	b.n	8002db8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d80:	897b      	ldrh	r3, [r7, #10]
 8002d82:	11db      	asrs	r3, r3, #7
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0306 	and.w	r3, r3, #6
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f063 030f 	orn	r3, r3, #15
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <I2C_MasterRequestWrite+0xfc>)
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f940 	bl	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e010      	b.n	8002dd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dae:	897b      	ldrh	r3, [r7, #10]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <I2C_MasterRequestWrite+0x100>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f930 	bl	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00010008 	.word	0x00010008
 8002ddc:	00010002 	.word	0x00010002

08002de0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <I2C_DMAAbort+0x148>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	08db      	lsrs	r3, r3, #3
 8002e00:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <I2C_DMAAbort+0x14c>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0a1a      	lsrs	r2, r3, #8
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00da      	lsls	r2, r3, #3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e26:	e00a      	b.n	8002e3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3c:	d0ea      	beq.n	8002e14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e80:	2200      	movs	r2, #0
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	2200      	movs	r2, #0
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b60      	cmp	r3, #96	; 0x60
 8002eae:	d10e      	bne.n	8002ece <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7fe fd77 	bl	80019ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ecc:	e027      	b.n	8002f1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ed4:	2b28      	cmp	r3, #40	; 0x28
 8002ed6:	d117      	bne.n	8002f08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2228      	movs	r2, #40	; 0x28
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f06:	e007      	b.n	8002f18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f18:	6978      	ldr	r0, [r7, #20]
 8002f1a:	f7fe fd45 	bl	80019a8 <HAL_I2C_ErrorCallback>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	14f8b589 	.word	0x14f8b589

08002f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	e048      	b.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d044      	beq.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fd fcd1 	bl	80008f0 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d139      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10d      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	43da      	mvns	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4013      	ands	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	e00c      	b.n	8002fa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d116      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e023      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d10d      	bne.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	43da      	mvns	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	e00c      	b.n	8003014 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	429a      	cmp	r2, r3
 8003018:	d093      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003032:	e071      	b.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003042:	d123      	bne.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800305c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e067      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d041      	beq.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003094:	f7fd fc2c 	bl	80008f0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d136      	bne.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00b      	b.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e021      	b.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10c      	bne.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	43da      	mvns	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e00b      	b.n	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4013      	ands	r3, r2
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f af6d 	bne.w	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003170:	e034      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8b8 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d028      	beq.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fd fbb1 	bl	80008f0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d11d      	bne.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d016      	beq.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e007      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d1c3      	bne.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003200:	e034      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f870 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d028      	beq.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fd fb69 	bl	80008f0 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11d      	bne.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b04      	cmp	r3, #4
 800323c:	d016      	beq.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e007      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b04      	cmp	r3, #4
 8003278:	d1c3      	bne.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	08db      	lsrs	r3, r3, #3
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	0a1a      	lsrs	r2, r3, #8
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e008      	b.n	80032d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d0e9      	beq.n	80032a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000
 80032e4:	14f8b589 	.word	0x14f8b589

080032e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fe:	d11b      	bne.n	8003338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003354:	d103      	bne.n	800335e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800335c:	e007      	b.n	800336e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003366:	d102      	bne.n	800336e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2208      	movs	r2, #8
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e26c      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8087 	beq.w	80034a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003398:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d00c      	beq.n	80033be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033a4:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d112      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
 80033b0:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	4b89      	ldr	r3, [pc, #548]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d06c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x12c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d168      	bne.n	80034a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e246      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x76>
 80033e0:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e02e      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b7b      	ldr	r3, [pc, #492]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b78      	ldr	r3, [pc, #480]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a77      	ldr	r2, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e01d      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003418:	d10c      	bne.n	8003434 <HAL_RCC_OscConfig+0xbc>
 800341a:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a71      	ldr	r2, [pc, #452]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b6f      	ldr	r3, [pc, #444]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	e00b      	b.n	800344c <HAL_RCC_OscConfig+0xd4>
 8003434:	4b6b      	ldr	r3, [pc, #428]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a67      	ldr	r2, [pc, #412]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd fa4c 	bl	80008f0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd fa48 	bl	80008f0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1fa      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b5d      	ldr	r3, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0xe4>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd fa38 	bl	80008f0 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003484:	f7fd fa34 	bl	80008f0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e1e6      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x10c>
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b2:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d11c      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
 80034ca:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d116      	bne.n	8003504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e1ba      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4939      	ldr	r1, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003502:	e03a      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800350c:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd f9ed 	bl	80008f0 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fd f9e9 	bl	80008f0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e19b      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352c:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4927      	ldr	r1, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
 800354c:	e015      	b.n	800357a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x270>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fd f9cc 	bl	80008f0 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355c:	f7fd f9c8 	bl	80008f0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e17a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d03a      	beq.n	80035fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d019      	beq.n	80035c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fd f9ac 	bl	80008f0 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359c:	f7fd f9a8 	bl	80008f0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e15a      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035ba:	2001      	movs	r0, #1
 80035bc:	f000 facc 	bl	8003b58 <RCC_Delay>
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_OscConfig+0x274>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c8:	f7fd f992 	bl	80008f0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ce:	e00f      	b.n	80035f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd f98e 	bl	80008f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e140      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	42420000 	.word	0x42420000
 80035ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e9      	bne.n	80035d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a6 	beq.w	8003756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b97      	ldr	r3, [pc, #604]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b94      	ldr	r3, [pc, #592]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a93      	ldr	r2, [pc, #588]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b91      	ldr	r3, [pc, #580]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d118      	bne.n	8003674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003642:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364e:	f7fd f94f 	bl	80008f0 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fd f94b 	bl	80008f0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b64      	cmp	r3, #100	; 0x64
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0fd      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x312>
 800367c:	4b7b      	ldr	r3, [pc, #492]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e02d      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x334>
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a75      	ldr	r2, [pc, #468]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b73      	ldr	r3, [pc, #460]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a72      	ldr	r2, [pc, #456]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	e01c      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b05      	cmp	r3, #5
 80036b2:	d10c      	bne.n	80036ce <HAL_RCC_OscConfig+0x356>
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6c      	ldr	r2, [pc, #432]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	f043 0304 	orr.w	r3, r3, #4
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	e00b      	b.n	80036e6 <HAL_RCC_OscConfig+0x36e>
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4a66      	ldr	r2, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6213      	str	r3, [r2, #32]
 80036da:	4b64      	ldr	r3, [pc, #400]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d015      	beq.n	800371a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fd f8ff 	bl	80008f0 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd f8fb 	bl	80008f0 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e0ab      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ee      	beq.n	80036f6 <HAL_RCC_OscConfig+0x37e>
 8003718:	e014      	b.n	8003744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7fd f8e9 	bl	80008f0 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd f8e5 	bl	80008f0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e095      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003738:	4b4c      	ldr	r3, [pc, #304]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d105      	bne.n	8003756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374a:	4b48      	ldr	r3, [pc, #288]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8081 	beq.w	8003862 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	d061      	beq.n	8003830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d146      	bne.n	8003802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fd f8b9 	bl	80008f0 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7fd f8b5 	bl	80008f0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e067      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	4b35      	ldr	r3, [pc, #212]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d108      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	492d      	ldr	r1, [pc, #180]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a19      	ldr	r1, [r3, #32]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fd f889 	bl	80008f0 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd f885 	bl	80008f0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e037      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46a>
 8003800:	e02f      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_RCC_OscConfig+0x4fc>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd f872 	bl	80008f0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fd f86e 	bl	80008f0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e020      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x498>
 800382e:	e018      	b.n	8003862 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e013      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x4f4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	429a      	cmp	r2, r3
 800384e:	d106      	bne.n	800385e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
 8003874:	42420060 	.word	0x42420060

08003878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d0      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d910      	bls.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4965      	ldr	r1, [pc, #404]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a58      	ldr	r2, [pc, #352]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a52      	ldr	r2, [pc, #328]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d040      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d115      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e073      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06b      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b39      	ldr	r3, [pc, #228]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4936      	ldr	r1, [pc, #216]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fc ffc2 	bl	80008f0 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fc ffbe 	bl	80008f0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e053      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d210      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 0207 	bic.w	r2, r3, #7
 80039ae:	4922      	ldr	r1, [pc, #136]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	490a      	ldr	r1, [pc, #40]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <HAL_RCC_ClockConfig+0x1cc>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1d0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc ff20 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08003dd0 	.word	0x08003dd0
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a66:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x30>
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x36>
 8003a7a:	e027      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a7e:	613b      	str	r3, [r7, #16]
      break;
 8003a80:	e027      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0c9b      	lsrs	r3, r3, #18
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0c5b      	lsrs	r3, r3, #17
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	4a11      	ldr	r2, [pc, #68]	; (8003aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aae:	fb02 f203 	mul.w	r2, r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e004      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0c      	ldr	r2, [pc, #48]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	613b      	str	r3, [r7, #16]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ace:	613b      	str	r3, [r7, #16]
      break;
 8003ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad2:	693b      	ldr	r3, [r7, #16]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	08003de8 	.word	0x08003de8
 8003aec:	08003df8 	.word	0x08003df8
 8003af0:	003d0900 	.word	0x003d0900

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000000 	.word	0x20000000

08003b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b0c:	f7ff fff2 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b10:	4602      	mov	r2, r0
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4903      	ldr	r1, [pc, #12]	; (8003b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1e:	5ccb      	ldrb	r3, [r1, r3]
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08003de0 	.word	0x08003de0

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffde 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0adb      	lsrs	r3, r3, #11
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40021000 	.word	0x40021000
 8003b54:	08003de0 	.word	0x08003de0

08003b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <RCC_Delay+0x34>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <RCC_Delay+0x38>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b74:	bf00      	nop
  }
  while (Delay --);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e5a      	subs	r2, r3, #1
 8003b7a:	60fa      	str	r2, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f9      	bne.n	8003b74 <RCC_Delay+0x1c>
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	10624dd3 	.word	0x10624dd3

08003b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e042      	b.n	8003c2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc fd7e 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f82b 	bl	8003c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c6e:	f023 030c 	bic.w	r3, r3, #12
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <UART_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d103      	bne.n	8003ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c9c:	f7ff ff48 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	e002      	b.n	8003caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7ff ff30 	bl	8003b08 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009a      	lsls	r2, r3, #2
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <UART_SetConfig+0x118>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	0119      	lsls	r1, r3, #4
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <UART_SetConfig+0x118>)
 8003ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <UART_SetConfig+0x118>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d00:	4419      	add	r1, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <UART_SetConfig+0x118>)
 8003d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2064      	movs	r0, #100	; 0x64
 8003d22:	fb00 f303 	mul.w	r3, r0, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	; 0x32
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	440a      	add	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <__libc_init_array>:
 8003d50:	b570      	push	{r4, r5, r6, lr}
 8003d52:	2600      	movs	r6, #0
 8003d54:	4d0c      	ldr	r5, [pc, #48]	; (8003d88 <__libc_init_array+0x38>)
 8003d56:	4c0d      	ldr	r4, [pc, #52]	; (8003d8c <__libc_init_array+0x3c>)
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	42a6      	cmp	r6, r4
 8003d5e:	d109      	bne.n	8003d74 <__libc_init_array+0x24>
 8003d60:	f000 f822 	bl	8003da8 <_init>
 8003d64:	2600      	movs	r6, #0
 8003d66:	4d0a      	ldr	r5, [pc, #40]	; (8003d90 <__libc_init_array+0x40>)
 8003d68:	4c0a      	ldr	r4, [pc, #40]	; (8003d94 <__libc_init_array+0x44>)
 8003d6a:	1b64      	subs	r4, r4, r5
 8003d6c:	10a4      	asrs	r4, r4, #2
 8003d6e:	42a6      	cmp	r6, r4
 8003d70:	d105      	bne.n	8003d7e <__libc_init_array+0x2e>
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d78:	4798      	blx	r3
 8003d7a:	3601      	adds	r6, #1
 8003d7c:	e7ee      	b.n	8003d5c <__libc_init_array+0xc>
 8003d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d82:	4798      	blx	r3
 8003d84:	3601      	adds	r6, #1
 8003d86:	e7f2      	b.n	8003d6e <__libc_init_array+0x1e>
 8003d88:	08003dfc 	.word	0x08003dfc
 8003d8c:	08003dfc 	.word	0x08003dfc
 8003d90:	08003dfc 	.word	0x08003dfc
 8003d94:	08003e00 	.word	0x08003e00

08003d98 <memset>:
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4402      	add	r2, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
