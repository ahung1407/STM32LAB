
lab4_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200000a0  08002e8c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08002e8c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d0c  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d65  00000000  00000000  00029dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f22  00000000  00000000  0002cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c233  00000000  00000000  00043f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825fe  00000000  00000000  00050145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a84  00000000  00000000  000d2798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da8 	.word	0x08002da8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08002da8 	.word	0x08002da8

0800014c <init_automatic>:
 *      Author: admim
 */

#include "automatic.h"

void init_automatic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	 	 HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	480e      	ldr	r0, [pc, #56]	; (8000190 <init_automatic+0x44>)
 8000156:	f001 fe12 	bl	8001d7e <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	480c      	ldr	r0, [pc, #48]	; (8000190 <init_automatic+0x44>)
 8000160:	f001 fe0d 	bl	8001d7e <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <init_automatic+0x44>)
 800016a:	f001 fe08 	bl	8001d7e <HAL_GPIO_WritePin>

	    // Cấu hình Line 2
	    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 800016e:	2201      	movs	r2, #1
 8000170:	2120      	movs	r1, #32
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <init_automatic+0x44>)
 8000174:	f001 fe03 	bl	8001d7e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <init_automatic+0x44>)
 800017e:	f001 fdfe 	bl	8001d7e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2108      	movs	r1, #8
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <init_automatic+0x44>)
 8000188:	f001 fdf9 	bl	8001d7e <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <automatic_run>:
void automatic_run(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	switch(status){
 8000198:	4b1a      	ldr	r3, [pc, #104]	; (8000204 <automatic_run+0x70>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	2b04      	cmp	r3, #4
 80001a0:	d82c      	bhi.n	80001fc <automatic_run+0x68>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <automatic_run+0x14>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001bd 	.word	0x080001bd
 80001ac:	080001e5 	.word	0x080001e5
 80001b0:	080001eb 	.word	0x080001eb
 80001b4:	080001f1 	.word	0x080001f1
 80001b8:	080001f7 	.word	0x080001f7
	case INIT:
		init_automatic();
 80001bc:	f7ff ffc6 	bl	800014c <init_automatic>
		//setTimer(0, green_on);
		counter_green_on =  8;
 80001c0:	4b11      	ldr	r3, [pc, #68]	; (8000208 <automatic_run+0x74>)
 80001c2:	2208      	movs	r2, #8
 80001c4:	601a      	str	r2, [r3, #0]
		status = GREEN_RED;
 80001c6:	4b0f      	ldr	r3, [pc, #60]	; (8000204 <automatic_run+0x70>)
 80001c8:	2202      	movs	r2, #2
 80001ca:	601a      	str	r2, [r3, #0]
		current_mode =  MODE_1;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <automatic_run+0x78>)
 80001ce:	2213      	movs	r2, #19
 80001d0:	601a      	str	r2, [r3, #0]
		setmode1(red_state	,green_state);
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <automatic_run+0x7c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a0f      	ldr	r2, [pc, #60]	; (8000214 <automatic_run+0x80>)
 80001d8:	6812      	ldr	r2, [r2, #0]
 80001da:	4611      	mov	r1, r2
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fd4f 	bl	8000c80 <setmode1>
		break;
 80001e2:	e00c      	b.n	80001fe <automatic_run+0x6a>
	case GREEN_RED:
		init_green_red();
 80001e4:	f000 fe26 	bl	8000e34 <init_green_red>
		break;
 80001e8:	e009      	b.n	80001fe <automatic_run+0x6a>
	case AMBER_RED:
		init_amber_red();
 80001ea:	f000 fe97 	bl	8000f1c <init_amber_red>
		break;
 80001ee:	e006      	b.n	80001fe <automatic_run+0x6a>
	case RED_GREEN:
		init_red_green();
 80001f0:	f000 fedc 	bl	8000fac <init_red_green>
		break;
 80001f4:	e003      	b.n	80001fe <automatic_run+0x6a>
	case RED_AMBER:
		init_red_amber();
 80001f6:	f000 ff1f 	bl	8001038 <init_red_amber>
		break;
 80001fa:	e000      	b.n	80001fe <automatic_run+0x6a>
	default:
		break;
 80001fc:	bf00      	nop
	}
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	200000c8 	.word	0x200000c8
 8000208:	20000078 	.word	0x20000078
 800020c:	20000084 	.word	0x20000084
 8000210:	2000005c 	.word	0x2000005c
 8000214:	20000064 	.word	0x20000064

08000218 <subKeyProcess>:

// Cấu hình chân GPIO tương ứng với từng nút
GPIO_TypeDef* buttonPorts[NUM_OF_BUTTONS] = {but1_GPIO_Port, but2_GPIO_Port,but3_GPIO_Port};
uint16_t buttonPins[NUM_OF_BUTTONS] = {but1_Pin, but2_Pin, but3_Pin};

void subKeyProcess(int index) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    // Đặt cờ cho nút tương ứng khi nút được nhấn
    buttonFlags[index] = 1; // Đánh dấu rằng nút đã được nhấn
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <subKeyProcess+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2101      	movs	r1, #1
 8000226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Xử lý khi nút được nhấn
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	200000bc 	.word	0x200000bc

08000238 <clearbut>:
void clearbut(){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	buttonFlags[0] = 0;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <clearbut+0x20>)
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
	buttonFlags[1] = 0;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <clearbut+0x20>)
 8000244:	2200      	movs	r2, #0
 8000246:	605a      	str	r2, [r3, #4]
	buttonFlags[2] = 0;
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <clearbut+0x20>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	200000bc 	.word	0x200000bc

0800025c <getKeyInput>:

void getKeyInput() {
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e012      	b.n	800028e <getKeyInput+0x32>
        // Cập nhật các thanh ghi trạng thái cho chống rung
        KeyReg0[i] = KeyReg1[i];
 8000268:	4a48      	ldr	r2, [pc, #288]	; (800038c <getKeyInput+0x130>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	4947      	ldr	r1, [pc, #284]	; (8000390 <getKeyInput+0x134>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];}
 8000278:	4a46      	ldr	r2, [pc, #280]	; (8000394 <getKeyInput+0x138>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000280:	4942      	ldr	r1, [pc, #264]	; (800038c <getKeyInput+0x130>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3301      	adds	r3, #1
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b02      	cmp	r3, #2
 8000292:	dde9      	ble.n	8000268 <getKeyInput+0xc>

        KeyReg2[0] = HAL_GPIO_ReadPin(buttonPorts[0], buttonPins[0]);
 8000294:	4b40      	ldr	r3, [pc, #256]	; (8000398 <getKeyInput+0x13c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a40      	ldr	r2, [pc, #256]	; (800039c <getKeyInput+0x140>)
 800029a:	8812      	ldrh	r2, [r2, #0]
 800029c:	4611      	mov	r1, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fd56 	bl	8001d50 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <getKeyInput+0x138>)
 80002aa:	601a      	str	r2, [r3, #0]
        KeyReg2[1] = HAL_GPIO_ReadPin(buttonPorts[1], buttonPins[1]);
 80002ac:	4b3a      	ldr	r3, [pc, #232]	; (8000398 <getKeyInput+0x13c>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a3a      	ldr	r2, [pc, #232]	; (800039c <getKeyInput+0x140>)
 80002b2:	8852      	ldrh	r2, [r2, #2]
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fd4a 	bl	8001d50 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	461a      	mov	r2, r3
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <getKeyInput+0x138>)
 80002c2:	605a      	str	r2, [r3, #4]
        KeyReg2[2] = HAL_GPIO_ReadPin(buttonPorts[2], buttonPins[2]);
 80002c4:	4b34      	ldr	r3, [pc, #208]	; (8000398 <getKeyInput+0x13c>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a34      	ldr	r2, [pc, #208]	; (800039c <getKeyInput+0x140>)
 80002ca:	8892      	ldrh	r2, [r2, #4]
 80002cc:	4611      	mov	r1, r2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fd3e 	bl	8001d50 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <getKeyInput+0x138>)
 80002da:	609a      	str	r2, [r3, #8]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 80002dc:	2300      	movs	r3, #0
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e04b      	b.n	800037a <getKeyInput+0x11e>
        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80002e2:	4a2b      	ldr	r2, [pc, #172]	; (8000390 <getKeyInput+0x134>)
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ea:	4928      	ldr	r1, [pc, #160]	; (800038c <getKeyInput+0x130>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d13e      	bne.n	8000374 <getKeyInput+0x118>
 80002f6:	4a25      	ldr	r2, [pc, #148]	; (800038c <getKeyInput+0x130>)
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fe:	4925      	ldr	r1, [pc, #148]	; (8000394 <getKeyInput+0x138>)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000306:	429a      	cmp	r2, r3
 8000308:	d134      	bne.n	8000374 <getKeyInput+0x118>
            if (KeyReg3[i] != KeyReg2[i]) {  // Phát hiện thay đổi trạng thái
 800030a:	4a25      	ldr	r2, [pc, #148]	; (80003a0 <getKeyInput+0x144>)
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000312:	4920      	ldr	r1, [pc, #128]	; (8000394 <getKeyInput+0x138>)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800031a:	429a      	cmp	r2, r3
 800031c:	d016      	beq.n	800034c <getKeyInput+0xf0>
                KeyReg3[i] = KeyReg2[i];
 800031e:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <getKeyInput+0x138>)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000326:	491e      	ldr	r1, [pc, #120]	; (80003a0 <getKeyInput+0x144>)
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {  // Nút được nhấn
 800032e:	4a19      	ldr	r2, [pc, #100]	; (8000394 <getKeyInput+0x138>)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d11c      	bne.n	8000374 <getKeyInput+0x118>
                    TimerForKeyPress[i] = 200;  // Reset timer cho nhấn đè
 800033a:	4a1a      	ldr	r2, [pc, #104]	; (80003a4 <getKeyInput+0x148>)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	21c8      	movs	r1, #200	; 0xc8
 8000340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    subKeyProcess(i);  // Gọi hàm xử lý khi nhấn
 8000344:	6838      	ldr	r0, [r7, #0]
 8000346:	f7ff ff67 	bl	8000218 <subKeyProcess>
 800034a:	e013      	b.n	8000374 <getKeyInput+0x118>
                }
            } else {  // Kiểm tra nhấn đè
            		TimerForKeyPress[i]--;
 800034c:	4a15      	ldr	r2, [pc, #84]	; (80003a4 <getKeyInput+0x148>)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000354:	1e5a      	subs	r2, r3, #1
 8000356:	4913      	ldr	r1, [pc, #76]	; (80003a4 <getKeyInput+0x148>)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            		if(TimerForKeyPress[i]==0){
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <getKeyInput+0x148>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <getKeyInput+0x118>
            			KeyReg3[i] = NORMAL_STATE;
 800036a:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <getKeyInput+0x144>)
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	2101      	movs	r1, #1
 8000370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	2b02      	cmp	r3, #2
 800037e:	ddb0      	ble.n	80002e2 <getKeyInput+0x86>
            		}
            }
        	}
        }
    }
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	2000000c 	.word	0x2000000c
 8000390:	20000000 	.word	0x20000000
 8000394:	20000018 	.word	0x20000018
 8000398:	2000003c 	.word	0x2000003c
 800039c:	20000048 	.word	0x20000048
 80003a0:	20000024 	.word	0x20000024
 80003a4:	20000030 	.word	0x20000030

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ac:	f001 f9e6 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b0:	f000 f844 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b4:	f000 f8ca 	bl	800054c <MX_GPIO_Init>
  MX_TIM2_Init();
 80003b8:	f000 f87c 	bl	80004b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003bc:	4817      	ldr	r0, [pc, #92]	; (800041c <main+0x74>)
 80003be:	f002 f93b 	bl	8002638 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <main+0x78>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	601a      	str	r2, [r3, #0]
  setTimer(2, 250);
 80003c8:	21fa      	movs	r1, #250	; 0xfa
 80003ca:	2002      	movs	r0, #2
 80003cc:	f001 f902 	bl	80015d4 <setTimer>
  setTimer(4,1000);
 80003d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d4:	2004      	movs	r0, #4
 80003d6:	f001 f8fd 	bl	80015d4 <setTimer>
  SCH_Add_Task(scanled, 25, 25);
 80003da:	2219      	movs	r2, #25
 80003dc:	2119      	movs	r1, #25
 80003de:	4811      	ldr	r0, [pc, #68]	; (8000424 <main+0x7c>)
 80003e0:	f001 f818 	bl	8001414 <SCH_Add_Task>
  SCH_Add_Task(led_test, 100, 40);
 80003e4:	2228      	movs	r2, #40	; 0x28
 80003e6:	2164      	movs	r1, #100	; 0x64
 80003e8:	480f      	ldr	r0, [pc, #60]	; (8000428 <main+0x80>)
 80003ea:	f001 f813 	bl	8001414 <SCH_Add_Task>
  SCH_Add_Task(automatic_run, 25, 25);
 80003ee:	2219      	movs	r2, #25
 80003f0:	2119      	movs	r1, #25
 80003f2:	480e      	ldr	r0, [pc, #56]	; (800042c <main+0x84>)
 80003f4:	f001 f80e 	bl	8001414 <SCH_Add_Task>
  SCH_Add_Task(switch_mode, 25, 25);
 80003f8:	2219      	movs	r2, #25
 80003fa:	2119      	movs	r1, #25
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <main+0x88>)
 80003fe:	f001 f809 	bl	8001414 <SCH_Add_Task>
  SCH_Add_Task(run_manu, 25, 25);
 8000402:	2219      	movs	r2, #25
 8000404:	2119      	movs	r1, #25
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <main+0x8c>)
 8000408:	f001 f804 	bl	8001414 <SCH_Add_Task>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	4809      	ldr	r0, [pc, #36]	; (8000438 <main+0x90>)
 8000412:	f001 fcb4 	bl	8001d7e <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000416:	f001 f855 	bl	80014c4 <SCH_Dispatch_Tasks>
 800041a:	e7fc      	b.n	8000416 <main+0x6e>
 800041c:	200000e0 	.word	0x200000e0
 8000420:	200000c8 	.word	0x200000c8
 8000424:	08000bc9 	.word	0x08000bc9
 8000428:	08000bf9 	.word	0x08000bf9
 800042c:	08000195 	.word	0x08000195
 8000430:	080006a1 	.word	0x080006a1
 8000434:	08000669 	.word	0x08000669
 8000438:	40010800 	.word	0x40010800

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b090      	sub	sp, #64	; 0x40
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fca4 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045e:	2302      	movs	r3, #2
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000466:	2310      	movs	r3, #16
 8000468:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800046a:	2300      	movs	r3, #0
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fcb4 	bl	8001de0 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800047e:	f000 f8ed 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	230f      	movs	r3, #15
 8000484:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ff20 	bl	80022e0 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f8d9 	bl	800065c <Error_Handler>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3740      	adds	r7, #64	; 0x40
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MX_TIM2_Init+0x94>)
 80004d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_TIM2_Init+0x94>)
 80004da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MX_TIM2_Init+0x94>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_TIM2_Init+0x94>)
 80004e8:	2209      	movs	r2, #9
 80004ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b16      	ldr	r3, [pc, #88]	; (8000548 <MX_TIM2_Init+0x94>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_TIM2_Init+0x94>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f8:	4813      	ldr	r0, [pc, #76]	; (8000548 <MX_TIM2_Init+0x94>)
 80004fa:	f002 f84d 	bl	8002598 <HAL_TIM_Base_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000504:	f000 f8aa 	bl	800065c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4619      	mov	r1, r3
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <MX_TIM2_Init+0x94>)
 8000516:	f002 f9cb 	bl	80028b0 <HAL_TIM_ConfigClockSource>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000520:	f000 f89c 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000524:	2300      	movs	r3, #0
 8000526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800052c:	463b      	mov	r3, r7
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_TIM2_Init+0x94>)
 8000532:	f002 fba3 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800053c:	f000 f88e 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000e0 	.word	0x200000e0

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	4b34      	ldr	r3, [pc, #208]	; (8000634 <MX_GPIO_Init+0xe8>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a33      	ldr	r2, [pc, #204]	; (8000634 <MX_GPIO_Init+0xe8>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <MX_GPIO_Init+0xe8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <MX_GPIO_Init+0xe8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a2d      	ldr	r2, [pc, #180]	; (8000634 <MX_GPIO_Init+0xe8>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <MX_GPIO_Init+0xe8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <MX_GPIO_Init+0xe8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <MX_GPIO_Init+0xe8>)
 8000596:	f043 0308 	orr.w	r3, r3, #8
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <MX_GPIO_Init+0xe8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0308 	and.w	r3, r3, #8
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 80005a8:	2200      	movs	r2, #0
 80005aa:	f647 71bf 	movw	r1, #32703	; 0x7fbf
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <MX_GPIO_Init+0xec>)
 80005b0:	f001 fbe5 	bl	8001d7e <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, En1_Pin|En2_Pin|En3_Pin|En4_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	210f      	movs	r1, #15
 80005b8:	4820      	ldr	r0, [pc, #128]	; (800063c <MX_GPIO_Init+0xf0>)
 80005ba:	f001 fbe0 	bl	8001d7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : but1_Pin but2_Pin */
  GPIO_InitStruct.Pin = but1_Pin|but2_Pin;
 80005be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	481b      	ldr	r0, [pc, #108]	; (8000640 <MX_GPIO_Init+0xf4>)
 80005d4:	f001 fa42 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin LED_RED_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin D4_Pin
                           D5_Pin D6_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 80005d8:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80005dc:	613b      	str	r3, [r7, #16]
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <MX_GPIO_Init+0xec>)
 80005f2:	f001 fa33 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : En1_Pin En2_Pin En3_Pin En4_Pin */
  GPIO_InitStruct.Pin = En1_Pin|En2_Pin|En3_Pin|En4_Pin;
 80005f6:	230f      	movs	r3, #15
 80005f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2302      	movs	r3, #2
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <MX_GPIO_Init+0xf0>)
 800060e:	f001 fa25 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : but3_Pin */
  GPIO_InitStruct.Pin = but3_Pin;
 8000612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(but3_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_GPIO_Init+0xf0>)
 8000628:	f001 fa18 	bl	8001a5c <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00
 8000640:	40011000 	.word	0x40011000

08000644 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 800064c:	f000 fe72 	bl	8001334 <SCH_Update>
	getKeyInput();
 8000650:	f7ff fe04 	bl	800025c <getKeyInput>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <run_manu>:

void init_manu(){

}

void run_manu(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	switch(status){
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <run_manu+0x34>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d009      	beq.n	8000688 <run_manu+0x20>
 8000674:	2b0f      	cmp	r3, #15
 8000676:	dc0d      	bgt.n	8000694 <run_manu+0x2c>
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d002      	beq.n	8000682 <run_manu+0x1a>
 800067c:	2b0e      	cmp	r3, #14
 800067e:	d006      	beq.n	800068e <run_manu+0x26>

			break;

	default:

		break;
 8000680:	e008      	b.n	8000694 <run_manu+0x2c>
		init_man_red();
 8000682:	f000 fd81 	bl	8001188 <init_man_red>
		break;
 8000686:	e006      	b.n	8000696 <run_manu+0x2e>
		init_man_yellow();
 8000688:	f000 fde0 	bl	800124c <init_man_yellow>
			break;
 800068c:	e003      	b.n	8000696 <run_manu+0x2e>
		init_man_green();
 800068e:	f000 fe2b 	bl	80012e8 <init_man_green>
			break;
 8000692:	e000      	b.n	8000696 <run_manu+0x2e>
		break;
 8000694:	bf00      	nop
	}
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000c8 	.word	0x200000c8

080006a0 <switch_mode>:


void switch_mode(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	switch(current_mode){
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <switch_mode+0x38>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b13      	cmp	r3, #19
 80006aa:	d002      	beq.n	80006b2 <switch_mode+0x12>
 80006ac:	2b14      	cmp	r3, #20
 80006ae:	d003      	beq.n	80006b8 <switch_mode+0x18>
		model_2();
		setduration(duration);
				break;
		default:

				break;
 80006b0:	e00f      	b.n	80006d2 <switch_mode+0x32>
			decrease_time_mode1();
 80006b2:	f000 fb23 	bl	8000cfc <decrease_time_mode1>
			break;
 80006b6:	e00c      	b.n	80006d2 <switch_mode+0x32>
		setmodecus(mode);
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <switch_mode+0x3c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fb57 	bl	8000d70 <setmodecus>
		model_2();
 80006c2:	f000 fd01 	bl	80010c8 <model_2>
		setduration(duration);
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <switch_mode+0x40>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fb88 	bl	8000de0 <setduration>
				break;
 80006d0:	bf00      	nop
			}
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000084 	.word	0x20000084
 80006dc:	20000080 	.word	0x20000080
 80006e0:	200000dc 	.word	0x200000dc

080006e4 <display7SEG>:
 *
 *  Created on: Oct 26, 2024
 *      Author: admim
 */
#include "normal_state.h"
void display7SEG(int counter) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	f200 81c8 	bhi.w	8000a84 <display7SEG+0x3a0>
 80006f4:	a201      	add	r2, pc, #4	; (adr r2, 80006fc <display7SEG+0x18>)
 80006f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fa:	bf00      	nop
 80006fc:	08000725 	.word	0x08000725
 8000700:	0800077b 	.word	0x0800077b
 8000704:	080007d1 	.word	0x080007d1
 8000708:	08000827 	.word	0x08000827
 800070c:	0800087d 	.word	0x0800087d
 8000710:	080008d3 	.word	0x080008d3
 8000714:	08000929 	.word	0x08000929
 8000718:	0800097f 	.word	0x0800097f
 800071c:	080009d5 	.word	0x080009d5
 8000720:	08000a2b 	.word	0x08000a2b

    switch (counter) {
        case 0:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	48d5      	ldr	r0, [pc, #852]	; (8000a80 <display7SEG+0x39c>)
 800072c:	f001 fb27 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000736:	48d2      	ldr	r0, [pc, #840]	; (8000a80 <display7SEG+0x39c>)
 8000738:	f001 fb21 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000742:	48cf      	ldr	r0, [pc, #828]	; (8000a80 <display7SEG+0x39c>)
 8000744:	f001 fb1b 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074e:	48cc      	ldr	r0, [pc, #816]	; (8000a80 <display7SEG+0x39c>)
 8000750:	f001 fb15 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	48c9      	ldr	r0, [pc, #804]	; (8000a80 <display7SEG+0x39c>)
 800075c:	f001 fb0f 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	48c6      	ldr	r0, [pc, #792]	; (8000a80 <display7SEG+0x39c>)
 8000768:	f001 fb09 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	48c3      	ldr	r0, [pc, #780]	; (8000a80 <display7SEG+0x39c>)
 8000774:	f001 fb03 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 8000778:	e187      	b.n	8000a8a <display7SEG+0x3a6>

        case 1:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	48bf      	ldr	r0, [pc, #764]	; (8000a80 <display7SEG+0x39c>)
 8000782:	f001 fafc 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078c:	48bc      	ldr	r0, [pc, #752]	; (8000a80 <display7SEG+0x39c>)
 800078e:	f001 faf6 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000798:	48b9      	ldr	r0, [pc, #740]	; (8000a80 <display7SEG+0x39c>)
 800079a:	f001 faf0 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a4:	48b6      	ldr	r0, [pc, #728]	; (8000a80 <display7SEG+0x39c>)
 80007a6:	f001 faea 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b0:	48b3      	ldr	r0, [pc, #716]	; (8000a80 <display7SEG+0x39c>)
 80007b2:	f001 fae4 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	48b0      	ldr	r0, [pc, #704]	; (8000a80 <display7SEG+0x39c>)
 80007be:	f001 fade 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c8:	48ad      	ldr	r0, [pc, #692]	; (8000a80 <display7SEG+0x39c>)
 80007ca:	f001 fad8 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 80007ce:	e15c      	b.n	8000a8a <display7SEG+0x3a6>

        case 2:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d6:	48aa      	ldr	r0, [pc, #680]	; (8000a80 <display7SEG+0x39c>)
 80007d8:	f001 fad1 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	48a7      	ldr	r0, [pc, #668]	; (8000a80 <display7SEG+0x39c>)
 80007e4:	f001 facb 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	48a4      	ldr	r0, [pc, #656]	; (8000a80 <display7SEG+0x39c>)
 80007f0:	f001 fac5 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	48a1      	ldr	r0, [pc, #644]	; (8000a80 <display7SEG+0x39c>)
 80007fc:	f001 fabf 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000806:	489e      	ldr	r0, [pc, #632]	; (8000a80 <display7SEG+0x39c>)
 8000808:	f001 fab9 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	489b      	ldr	r0, [pc, #620]	; (8000a80 <display7SEG+0x39c>)
 8000814:	f001 fab3 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081e:	4898      	ldr	r0, [pc, #608]	; (8000a80 <display7SEG+0x39c>)
 8000820:	f001 faad 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 8000824:	e131      	b.n	8000a8a <display7SEG+0x3a6>

        case 3:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	4894      	ldr	r0, [pc, #592]	; (8000a80 <display7SEG+0x39c>)
 800082e:	f001 faa6 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000838:	4891      	ldr	r0, [pc, #580]	; (8000a80 <display7SEG+0x39c>)
 800083a:	f001 faa0 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000844:	488e      	ldr	r0, [pc, #568]	; (8000a80 <display7SEG+0x39c>)
 8000846:	f001 fa9a 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000850:	488b      	ldr	r0, [pc, #556]	; (8000a80 <display7SEG+0x39c>)
 8000852:	f001 fa94 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085c:	4888      	ldr	r0, [pc, #544]	; (8000a80 <display7SEG+0x39c>)
 800085e:	f001 fa8e 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	4885      	ldr	r0, [pc, #532]	; (8000a80 <display7SEG+0x39c>)
 800086a:	f001 fa88 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000874:	4882      	ldr	r0, [pc, #520]	; (8000a80 <display7SEG+0x39c>)
 8000876:	f001 fa82 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 800087a:	e106      	b.n	8000a8a <display7SEG+0x3a6>

        case 4:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	487f      	ldr	r0, [pc, #508]	; (8000a80 <display7SEG+0x39c>)
 8000884:	f001 fa7b 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	487c      	ldr	r0, [pc, #496]	; (8000a80 <display7SEG+0x39c>)
 8000890:	f001 fa75 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4879      	ldr	r0, [pc, #484]	; (8000a80 <display7SEG+0x39c>)
 800089c:	f001 fa6f 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	4876      	ldr	r0, [pc, #472]	; (8000a80 <display7SEG+0x39c>)
 80008a8:	f001 fa69 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	4873      	ldr	r0, [pc, #460]	; (8000a80 <display7SEG+0x39c>)
 80008b4:	f001 fa63 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	4870      	ldr	r0, [pc, #448]	; (8000a80 <display7SEG+0x39c>)
 80008c0:	f001 fa5d 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ca:	486d      	ldr	r0, [pc, #436]	; (8000a80 <display7SEG+0x39c>)
 80008cc:	f001 fa57 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 80008d0:	e0db      	b.n	8000a8a <display7SEG+0x3a6>

        case 5:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	4869      	ldr	r0, [pc, #420]	; (8000a80 <display7SEG+0x39c>)
 80008da:	f001 fa50 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e4:	4866      	ldr	r0, [pc, #408]	; (8000a80 <display7SEG+0x39c>)
 80008e6:	f001 fa4a 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f0:	4863      	ldr	r0, [pc, #396]	; (8000a80 <display7SEG+0x39c>)
 80008f2:	f001 fa44 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fc:	4860      	ldr	r0, [pc, #384]	; (8000a80 <display7SEG+0x39c>)
 80008fe:	f001 fa3e 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000908:	485d      	ldr	r0, [pc, #372]	; (8000a80 <display7SEG+0x39c>)
 800090a:	f001 fa38 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	485a      	ldr	r0, [pc, #360]	; (8000a80 <display7SEG+0x39c>)
 8000916:	f001 fa32 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000920:	4857      	ldr	r0, [pc, #348]	; (8000a80 <display7SEG+0x39c>)
 8000922:	f001 fa2c 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 8000926:	e0b0      	b.n	8000a8a <display7SEG+0x3a6>

        case 6:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	4854      	ldr	r0, [pc, #336]	; (8000a80 <display7SEG+0x39c>)
 8000930:	f001 fa25 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093a:	4851      	ldr	r0, [pc, #324]	; (8000a80 <display7SEG+0x39c>)
 800093c:	f001 fa1f 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000946:	484e      	ldr	r0, [pc, #312]	; (8000a80 <display7SEG+0x39c>)
 8000948:	f001 fa19 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000952:	484b      	ldr	r0, [pc, #300]	; (8000a80 <display7SEG+0x39c>)
 8000954:	f001 fa13 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095e:	4848      	ldr	r0, [pc, #288]	; (8000a80 <display7SEG+0x39c>)
 8000960:	f001 fa0d 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	4845      	ldr	r0, [pc, #276]	; (8000a80 <display7SEG+0x39c>)
 800096c:	f001 fa07 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000976:	4842      	ldr	r0, [pc, #264]	; (8000a80 <display7SEG+0x39c>)
 8000978:	f001 fa01 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 800097c:	e085      	b.n	8000a8a <display7SEG+0x3a6>

        case 7:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	483e      	ldr	r0, [pc, #248]	; (8000a80 <display7SEG+0x39c>)
 8000986:	f001 f9fa 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000990:	483b      	ldr	r0, [pc, #236]	; (8000a80 <display7SEG+0x39c>)
 8000992:	f001 f9f4 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	4838      	ldr	r0, [pc, #224]	; (8000a80 <display7SEG+0x39c>)
 800099e:	f001 f9ee 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	4835      	ldr	r0, [pc, #212]	; (8000a80 <display7SEG+0x39c>)
 80009aa:	f001 f9e8 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b4:	4832      	ldr	r0, [pc, #200]	; (8000a80 <display7SEG+0x39c>)
 80009b6:	f001 f9e2 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <display7SEG+0x39c>)
 80009c2:	f001 f9dc 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009cc:	482c      	ldr	r0, [pc, #176]	; (8000a80 <display7SEG+0x39c>)
 80009ce:	f001 f9d6 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 80009d2:	e05a      	b.n	8000a8a <display7SEG+0x3a6>

        case 8:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	4829      	ldr	r0, [pc, #164]	; (8000a80 <display7SEG+0x39c>)
 80009dc:	f001 f9cf 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e6:	4826      	ldr	r0, [pc, #152]	; (8000a80 <display7SEG+0x39c>)
 80009e8:	f001 f9c9 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <display7SEG+0x39c>)
 80009f4:	f001 f9c3 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fe:	4820      	ldr	r0, [pc, #128]	; (8000a80 <display7SEG+0x39c>)
 8000a00:	f001 f9bd 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	481d      	ldr	r0, [pc, #116]	; (8000a80 <display7SEG+0x39c>)
 8000a0c:	f001 f9b7 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <display7SEG+0x39c>)
 8000a18:	f001 f9b1 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	4817      	ldr	r0, [pc, #92]	; (8000a80 <display7SEG+0x39c>)
 8000a24:	f001 f9ab 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 8000a28:	e02f      	b.n	8000a8a <display7SEG+0x3a6>

        case 9:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <display7SEG+0x39c>)
 8000a32:	f001 f9a4 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <display7SEG+0x39c>)
 8000a3e:	f001 f99e 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <display7SEG+0x39c>)
 8000a4a:	f001 f998 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <display7SEG+0x39c>)
 8000a56:	f001 f992 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <display7SEG+0x39c>)
 8000a62:	f001 f98c 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <display7SEG+0x39c>)
 8000a6e:	f001 f986 	bl	8001d7e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a78:	4801      	ldr	r0, [pc, #4]	; (8000a80 <display7SEG+0x39c>)
 8000a7a:	f001 f980 	bl	8001d7e <HAL_GPIO_WritePin>
            break;
 8000a7e:	e004      	b.n	8000a8a <display7SEG+0x3a6>
 8000a80:	40010800 	.word	0x40010800

        default:
            counter = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
            break;
 8000a88:	bf00      	nop
    }
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop

08000a94 <clearbuffer>:
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);

}
void clearbuffer(){
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <clearbuffer+0x24>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 0;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <clearbuffer+0x24>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
		led_buffer[2] = 0;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <clearbuffer+0x24>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
		led_buffer[3] = 0;
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <clearbuffer+0x24>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	200000cc 	.word	0x200000cc

08000abc <update7SEG>:
void update7SEG(int index){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d873      	bhi.n	8000bb4 <update7SEG+0xf8>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <update7SEG+0x18>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000b19 	.word	0x08000b19
 8000adc:	08000b4d 	.word	0x08000b4d
 8000ae0:	08000b81 	.word	0x08000b81
	switch (index) {
			case 1:
//
				display7SEG(led_buffer[0]);
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <update7SEG+0x104>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fdfb 	bl	80006e4 <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2101      	movs	r1, #1
 8000af2:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <update7SEG+0x108>)
 8000af4:	f001 f943 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2102      	movs	r1, #2
 8000afc:	4831      	ldr	r0, [pc, #196]	; (8000bc4 <update7SEG+0x108>)
 8000afe:	f001 f93e 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2104      	movs	r1, #4
 8000b06:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <update7SEG+0x108>)
 8000b08:	f001 f939 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2108      	movs	r1, #8
 8000b10:	482c      	ldr	r0, [pc, #176]	; (8000bc4 <update7SEG+0x108>)
 8000b12:	f001 f934 	bl	8001d7e <HAL_GPIO_WritePin>
//
				break;
 8000b16:	e04e      	b.n	8000bb6 <update7SEG+0xfa>
			case 2:
//				if(isTimerExpired(0)==1){
				display7SEG(led_buffer[1]);
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <update7SEG+0x104>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fde1 	bl	80006e4 <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2101      	movs	r1, #1
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <update7SEG+0x108>)
 8000b28:	f001 f929 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <update7SEG+0x108>)
 8000b32:	f001 f924 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2104      	movs	r1, #4
 8000b3a:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <update7SEG+0x108>)
 8000b3c:	f001 f91f 	bl	8001d7e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2108      	movs	r1, #8
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <update7SEG+0x108>)
 8000b46:	f001 f91a 	bl	8001d7e <HAL_GPIO_WritePin>
//				}
				break;
 8000b4a:	e034      	b.n	8000bb6 <update7SEG+0xfa>
			case 3:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[2]);
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <update7SEG+0x104>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fdc7 	bl	80006e4 <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2101      	movs	r1, #1
 8000b5a:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <update7SEG+0x108>)
 8000b5c:	f001 f90f 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2102      	movs	r1, #2
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <update7SEG+0x108>)
 8000b66:	f001 f90a 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <update7SEG+0x108>)
 8000b70:	f001 f905 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2108      	movs	r1, #8
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <update7SEG+0x108>)
 8000b7a:	f001 f900 	bl	8001d7e <HAL_GPIO_WritePin>
//	}
				break;
 8000b7e:	e01a      	b.n	8000bb6 <update7SEG+0xfa>
			case 4:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[3]);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <update7SEG+0x104>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdad 	bl	80006e4 <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <update7SEG+0x108>)
 8000b90:	f001 f8f5 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2102      	movs	r1, #2
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <update7SEG+0x108>)
 8000b9a:	f001 f8f0 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <update7SEG+0x108>)
 8000ba4:	f001 f8eb 	bl	8001d7e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <update7SEG+0x108>)
 8000bae:	f001 f8e6 	bl	8001d7e <HAL_GPIO_WritePin>
//					}
			break;
 8000bb2:	e000      	b.n	8000bb6 <update7SEG+0xfa>
			default:
				break;
 8000bb4:	bf00      	nop
		}

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000cc 	.word	0x200000cc
 8000bc4:	40010c00 	.word	0x40010c00

08000bc8 <scanled>:
int run = 1;
void scanled(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
		//clearled();
		update7SEG(run);
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <scanled+0x2c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff73 	bl	8000abc <update7SEG>
		run++;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <scanled+0x2c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <scanled+0x2c>)
 8000bde:	6013      	str	r3, [r2, #0]
		if(run>4){
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <scanled+0x2c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	dd02      	ble.n	8000bee <scanled+0x26>
			run = 0;
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <scanled+0x2c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
		}

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000088 	.word	0x20000088

08000bf8 <led_test>:
int counter_led = 5;
void led_test(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	counter_led--;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <led_test+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <led_test+0x28>)
 8000c04:	6013      	str	r3, [r2, #0]

	if(counter_led==0){
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <led_test+0x28>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d106      	bne.n	8000c1c <led_test+0x24>
		counter_led = 5;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <led_test+0x28>)
 8000c10:	2205      	movs	r2, #5
 8000c12:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <led_test+0x2c>)
 8000c18:	f001 f8c9 	bl	8001dae <HAL_GPIO_TogglePin>
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	40010800 	.word	0x40010800

08000c28 <return_mode1>:
void return_mode1(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if(buttonFlags[2]==1){
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <return_mode1+0x40>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d117      	bne.n	8000c64 <return_mode1+0x3c>
		buttonFlags[2]=0;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <return_mode1+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
		status = GREEN_RED;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <return_mode1+0x44>)
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	601a      	str	r2, [r3, #0]
		//setTimer(0, green_on);
		counter_green_on= green_state*4;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <return_mode1+0x48>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <return_mode1+0x4c>)
 8000c48:	6013      	str	r3, [r2, #0]
		setmode1(red_state,green_state);
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <return_mode1+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <return_mode1+0x48>)
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f813 	bl	8000c80 <setmode1>
		init_automatic();
 8000c5a:	f7ff fa77 	bl	800014c <init_automatic>
		current_mode = MODE_1;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <return_mode1+0x54>)
 8000c60:	2213      	movs	r2, #19
 8000c62:	601a      	str	r2, [r3, #0]
	}
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000bc 	.word	0x200000bc
 8000c6c:	200000c8 	.word	0x200000c8
 8000c70:	20000064 	.word	0x20000064
 8000c74:	20000078 	.word	0x20000078
 8000c78:	2000005c 	.word	0x2000005c
 8000c7c:	20000084 	.word	0x20000084

08000c80 <setmode1>:
void setmode1(int line1, int line2){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	clearbuffer();
 8000c8a:	f7ff ff03 	bl	8000a94 <clearbuffer>
	led_buffer[0] = line1/10;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <setmode1+0x74>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1092      	asrs	r2, r2, #2
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <setmode1+0x78>)
 8000c9e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = line1%10;
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <setmode1+0x74>)
 8000ca4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ca8:	109a      	asrs	r2, r3, #2
 8000caa:	17cb      	asrs	r3, r1, #31
 8000cac:	1ad2      	subs	r2, r2, r3
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	1aca      	subs	r2, r1, r3
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <setmode1+0x78>)
 8000cba:	605a      	str	r2, [r3, #4]

	led_buffer[2] = line2/10;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <setmode1+0x74>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1092      	asrs	r2, r2, #2
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <setmode1+0x78>)
 8000ccc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = line2%10;
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <setmode1+0x74>)
 8000cd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd6:	109a      	asrs	r2, r3, #2
 8000cd8:	17cb      	asrs	r3, r1, #31
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <setmode1+0x78>)
 8000ce8:	60da      	str	r2, [r3, #12]
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	66666667 	.word	0x66666667
 8000cf8:	200000cc 	.word	0x200000cc

08000cfc <decrease_time_mode1>:
int counter_decrese = 4;
void decrease_time_mode1(){
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	counter_decrese--;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <decrease_time_mode1+0x6c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <decrease_time_mode1+0x6c>)
 8000d08:	6013      	str	r3, [r2, #0]
	if(counter_decrese==0){
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <decrease_time_mode1+0x6c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d126      	bne.n	8000d60 <decrease_time_mode1+0x64>
		if(led_buffer[0]!=0){
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d004      	beq.n	8000d24 <decrease_time_mode1+0x28>
		led_buffer[0]--;}
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d22:	6013      	str	r3, [r2, #0]
		if(led_buffer[1]!=0){
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <decrease_time_mode1+0x3a>
				led_buffer[1]--;}
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d34:	6053      	str	r3, [r2, #4]
		if(led_buffer[2]!=0){
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <decrease_time_mode1+0x4c>
				led_buffer[2]--;}
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d46:	6093      	str	r3, [r2, #8]
		if(led_buffer[3]!=0){
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <decrease_time_mode1+0x5e>
				led_buffer[3]--;}
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <decrease_time_mode1+0x70>)
 8000d58:	60d3      	str	r3, [r2, #12]
		counter_decrese=4;
 8000d5a:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <decrease_time_mode1+0x6c>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	601a      	str	r2, [r3, #0]
	}
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	200000cc 	.word	0x200000cc

08000d70 <setmodecus>:

void setmodecus(int mode_cus){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	mode = mode_cus;
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <setmodecus+0x64>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
	led_buffer[0] = 0;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <setmodecus+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 0;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <setmodecus+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	led_buffer[2] = 0;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <setmodecus+0x68>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <setmodecus+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
	led_buffer[0] = mode/10;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <setmodecus+0x64>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <setmodecus+0x6c>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1092      	asrs	r2, r2, #2
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <setmodecus+0x68>)
 8000da8:	6013      	str	r3, [r2, #0]
	led_buffer[1] = mode%10;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <setmodecus+0x64>)
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <setmodecus+0x6c>)
 8000db0:	fb83 2301 	smull	r2, r3, r3, r1
 8000db4:	109a      	asrs	r2, r3, #2
 8000db6:	17cb      	asrs	r3, r1, #31
 8000db8:	1ad2      	subs	r2, r2, r3
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <setmodecus+0x68>)
 8000dc6:	605a      	str	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000080 	.word	0x20000080
 8000dd8:	200000cc 	.word	0x200000cc
 8000ddc:	66666667 	.word	0x66666667

08000de0 <setduration>:


void setduration(int duration){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	led_buffer[2] = 0;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <setduration+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <setduration+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
	led_buffer[2] = duration/10;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <setduration+0x50>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1092      	asrs	r2, r2, #2
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <setduration+0x4c>)
 8000e04:	6093      	str	r3, [r2, #8]
	led_buffer[3] = duration%10;
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <setduration+0x50>)
 8000e0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e0e:	109a      	asrs	r2, r3, #2
 8000e10:	17cb      	asrs	r3, r1, #31
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	1aca      	subs	r2, r1, r3
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <setduration+0x4c>)
 8000e20:	60da      	str	r2, [r3, #12]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	200000cc 	.word	0x200000cc
 8000e30:	66666667 	.word	0x66666667

08000e34 <init_green_red>:
void init_green_red(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <init_green_red+0xc0>)
 8000e3e:	f000 ff9e 	bl	8001d7e <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000e42:	2201      	movs	r2, #1
 8000e44:	2102      	movs	r1, #2
 8000e46:	482b      	ldr	r0, [pc, #172]	; (8000ef4 <init_green_red+0xc0>)
 8000e48:	f000 ff99 	bl	8001d7e <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <init_green_red+0xc0>)
 8000e52:	f000 ff94 	bl	8001d7e <HAL_GPIO_WritePin>
		    // Cấu hình Line 2
		    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET); // Xanh sáng - Line 2
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <init_green_red+0xc0>)
 8000e5c:	f000 ff8f 	bl	8001d7e <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <init_green_red+0xc0>)
 8000e66:	f000 ff8a 	bl	8001d7e <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <init_green_red+0xc0>)
 8000e70:	f000 ff85 	bl	8001d7e <HAL_GPIO_WritePin>
		    counter_green_on--;
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <init_green_red+0xc4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <init_green_red+0xc4>)
 8000e7c:	6013      	str	r3, [r2, #0]
		   if(counter_green_on==0){
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <init_green_red+0xc4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10f      	bne.n	8000ea6 <init_green_red+0x72>
			   	//setTimer(0, yellow_on);
			   	counter_amber_on = yellow_state*4;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <init_green_red+0xc8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <init_green_red+0xcc>)
 8000e8e:	6013      	str	r3, [r2, #0]
		        status = AMBER_RED;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <init_green_red+0xd0>)
 8000e92:	2203      	movs	r2, #3
 8000e94:	601a      	str	r2, [r3, #0]
		        setmode1(yellow_state,yellow_state);
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <init_green_red+0xc8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <init_green_red+0xc8>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff feed 	bl	8000c80 <setmode1>
			}
		   if(buttonFlags[0]==1){
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <init_green_red+0xd4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d11f      	bne.n	8000eee <init_green_red+0xba>
			   status = MAN_RED;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <init_green_red+0xd0>)
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	601a      	str	r2, [r3, #0]
			   init_automatic();
 8000eb4:	f7ff f94a 	bl	800014c <init_automatic>
			   //setTimer(0, time_stage_2);
			   time_stage_2 = 40;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <init_green_red+0xd8>)
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	601a      	str	r2, [r3, #0]
			   update_time_red = 2;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <init_green_red+0xdc>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
			   clearbut();
 8000ec4:	f7ff f9b8 	bl	8000238 <clearbut>
			   HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <init_green_red+0xc0>)
 8000ece:	f000 ff56 	bl	8001d7e <HAL_GPIO_WritePin>
			   	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <init_green_red+0xc0>)
 8000ed8:	f000 ff51 	bl	8001d7e <HAL_GPIO_WritePin>
			   	current_mode = CUS_MODE;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <init_green_red+0xe0>)
 8000ede:	2214      	movs	r2, #20
 8000ee0:	601a      	str	r2, [r3, #0]
			   	setmodecus(2);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff ff44 	bl	8000d70 <setmodecus>
			   	duration = 0;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <init_green_red+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
		   }

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20000060 	.word	0x20000060
 8000f00:	2000007c 	.word	0x2000007c
 8000f04:	200000c8 	.word	0x200000c8
 8000f08:	200000bc 	.word	0x200000bc
 8000f0c:	20000068 	.word	0x20000068
 8000f10:	2000006c 	.word	0x2000006c
 8000f14:	20000084 	.word	0x20000084
 8000f18:	200000dc 	.word	0x200000dc

08000f1c <init_amber_red>:
void init_amber_red(void){ // on vang
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	481b      	ldr	r0, [pc, #108]	; (8000f94 <init_amber_red+0x78>)
 8000f26:	f000 ff2a 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4819      	ldr	r0, [pc, #100]	; (8000f94 <init_amber_red+0x78>)
 8000f30:	f000 ff25 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000f34:	2201      	movs	r2, #1
 8000f36:	2104      	movs	r1, #4
 8000f38:	4816      	ldr	r0, [pc, #88]	; (8000f94 <init_amber_red+0x78>)
 8000f3a:	f000 ff20 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 counter_amber_on--;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <init_amber_red+0x7c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <init_amber_red+0x7c>)
 8000f46:	6013      	str	r3, [r2, #0]
			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <init_amber_red+0x78>)
 8000f4e:	f000 ff16 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET); // Vàng tắt - Line 2
 8000f52:	2200      	movs	r2, #0
 8000f54:	2110      	movs	r1, #16
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <init_amber_red+0x78>)
 8000f58:	f000 ff11 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2108      	movs	r1, #8
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <init_amber_red+0x78>)
 8000f62:	f000 ff0c 	bl	8001d7e <HAL_GPIO_WritePin>
	if(counter_amber_on==0){
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <init_amber_red+0x7c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10f      	bne.n	8000f8e <init_amber_red+0x72>
		//setTimer(0, green_on);
		counter_green_on= green_state*4;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <init_amber_red+0x80>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <init_amber_red+0x84>)
 8000f76:	6013      	str	r3, [r2, #0]
		status = RED_GREEN;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <init_amber_red+0x88>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
		setmode1(green_state,red_state);
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <init_amber_red+0x80>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <init_amber_red+0x8c>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe79 	bl	8000c80 <setmode1>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010800 	.word	0x40010800
 8000f98:	2000007c 	.word	0x2000007c
 8000f9c:	20000064 	.word	0x20000064
 8000fa0:	20000078 	.word	0x20000078
 8000fa4:	200000c8 	.word	0x200000c8
 8000fa8:	2000005c 	.word	0x2000005c

08000fac <init_red_green>:
void init_red_green(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <init_red_green+0x78>)
 8000fb6:	f000 fee2 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4819      	ldr	r0, [pc, #100]	; (8001024 <init_red_green+0x78>)
 8000fc0:	f000 fedd 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);   // Xanh tắt - Line 1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4816      	ldr	r0, [pc, #88]	; (8001024 <init_red_green+0x78>)
 8000fca:	f000 fed8 	bl	8001d7e <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <init_red_green+0x78>)
 8000fd4:	f000 fed3 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <init_red_green+0x78>)
 8000fde:	f000 fece 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	480f      	ldr	r0, [pc, #60]	; (8001024 <init_red_green+0x78>)
 8000fe8:	f000 fec9 	bl	8001d7e <HAL_GPIO_WritePin>
			    counter_green_on--;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <init_red_green+0x7c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <init_red_green+0x7c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	if(counter_green_on==0){
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <init_red_green+0x7c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10f      	bne.n	800101e <init_red_green+0x72>
		 	 	   // on do line 2
				setmode1(yellow_state,yellow_state);
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <init_red_green+0x80>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <init_red_green+0x80>)
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe39 	bl	8000c80 <setmode1>
				counter_amber_on = yellow_state*4;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <init_red_green+0x80>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <init_red_green+0x84>)
 8001016:	6013      	str	r3, [r2, #0]
		        status = RED_AMBER;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <init_red_green+0x88>)
 800101a:	2205      	movs	r2, #5
 800101c:	601a      	str	r2, [r3, #0]
	}
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010800 	.word	0x40010800
 8001028:	20000078 	.word	0x20000078
 800102c:	20000060 	.word	0x20000060
 8001030:	2000007c 	.word	0x2000007c
 8001034:	200000c8 	.word	0x200000c8

08001038 <init_red_amber>:
void init_red_amber(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 800103c:	2201      	movs	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	481b      	ldr	r0, [pc, #108]	; (80010b0 <init_red_amber+0x78>)
 8001042:	f000 fe9c 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET); // Vàng tắt - Line 1
 8001046:	2200      	movs	r2, #0
 8001048:	2102      	movs	r1, #2
 800104a:	4819      	ldr	r0, [pc, #100]	; (80010b0 <init_red_amber+0x78>)
 800104c:	f000 fe97 	bl	8001d7e <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8001050:	2201      	movs	r2, #1
 8001052:	2104      	movs	r1, #4
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <init_red_amber+0x78>)
 8001056:	f000 fe92 	bl	8001d7e <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 800105a:	2201      	movs	r2, #1
 800105c:	2120      	movs	r1, #32
 800105e:	4814      	ldr	r0, [pc, #80]	; (80010b0 <init_red_amber+0x78>)
 8001060:	f000 fe8d 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8001064:	2201      	movs	r2, #1
 8001066:	2110      	movs	r1, #16
 8001068:	4811      	ldr	r0, [pc, #68]	; (80010b0 <init_red_amber+0x78>)
 800106a:	f000 fe88 	bl	8001d7e <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2108      	movs	r1, #8
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <init_red_amber+0x78>)
 8001074:	f000 fe83 	bl	8001d7e <HAL_GPIO_WritePin>
			    counter_amber_on--;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <init_red_amber+0x7c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <init_red_amber+0x7c>)
 8001080:	6013      	str	r3, [r2, #0]
	if(counter_amber_on==0){
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <init_red_amber+0x7c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10f      	bne.n	80010aa <init_red_amber+0x72>
		 //setTimer(0, green_on);
		counter_green_on = green_state*4;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <init_red_amber+0x80>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <init_red_amber+0x84>)
 8001092:	6013      	str	r3, [r2, #0]
		 status = GREEN_RED;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <init_red_amber+0x88>)
 8001096:	2202      	movs	r2, #2
 8001098:	601a      	str	r2, [r3, #0]
		 setmode1(red_state,green_state);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <init_red_amber+0x8c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <init_red_amber+0x80>)
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fdeb 	bl	8000c80 <setmode1>
	}
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010800 	.word	0x40010800
 80010b4:	2000007c 	.word	0x2000007c
 80010b8:	20000064 	.word	0x20000064
 80010bc:	20000078 	.word	0x20000078
 80010c0:	200000c8 	.word	0x200000c8
 80010c4:	2000005c 	.word	0x2000005c

080010c8 <model_2>:
void model_2(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	if(buttonFlags[1]==1){
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <model_2+0x9c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d144      	bne.n	800115e <model_2+0x96>
			duration++;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <model_2+0xa0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <model_2+0xa0>)
 80010dc:	6013      	str	r3, [r2, #0]
			if(duration!=0){
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <model_2+0xa0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d031      	beq.n	800114a <model_2+0x82>
				switch(status){
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <model_2+0xa4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d013      	beq.n	8001116 <model_2+0x4e>
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	dc2c      	bgt.n	800114c <model_2+0x84>
 80010f2:	2b0d      	cmp	r3, #13
 80010f4:	d002      	beq.n	80010fc <model_2+0x34>
 80010f6:	2b0e      	cmp	r3, #14
 80010f8:	d01a      	beq.n	8001130 <model_2+0x68>
 80010fa:	e027      	b.n	800114c <model_2+0x84>
						case MAN_RED:
							//decrease_time_mode1();
							red_on = duration*1000;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <model_2+0xa0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <model_2+0xa8>)
 800110a:	6013      	str	r3, [r2, #0]
							red_state = duration;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <model_2+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <model_2+0xac>)
 8001112:	6013      	str	r3, [r2, #0]
							break;
 8001114:	e01a      	b.n	800114c <model_2+0x84>
						case MAN_YELLOW:
							yellow_on = duration*1000;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <model_2+0xa0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <model_2+0xb0>)
 8001124:	6013      	str	r3, [r2, #0]
							yellow_state = duration;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <model_2+0xa0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <model_2+0xb4>)
 800112c:	6013      	str	r3, [r2, #0]
							break;
 800112e:	e00d      	b.n	800114c <model_2+0x84>
						case MAN_GREEN:
							green_on = duration*1000;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <model_2+0xa0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	4a10      	ldr	r2, [pc, #64]	; (8001180 <model_2+0xb8>)
 800113e:	6013      	str	r3, [r2, #0]
							green_state = duration;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <model_2+0xa0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <model_2+0xbc>)
 8001146:	6013      	str	r3, [r2, #0]
													break;
 8001148:	e000      	b.n	800114c <model_2+0x84>
			}}
 800114a:	bf00      	nop
			clearbut();
 800114c:	f7ff f874 	bl	8000238 <clearbut>
			if(duration>99){
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <model_2+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b63      	cmp	r3, #99	; 0x63
 8001156:	dd02      	ble.n	800115e <model_2+0x96>
				duration=1;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <model_2+0xa0>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
			}
		}
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000bc 	.word	0x200000bc
 8001168:	200000dc 	.word	0x200000dc
 800116c:	200000c8 	.word	0x200000c8
 8001170:	20000050 	.word	0x20000050
 8001174:	2000005c 	.word	0x2000005c
 8001178:	20000054 	.word	0x20000054
 800117c:	20000060 	.word	0x20000060
 8001180:	20000058 	.word	0x20000058
 8001184:	20000064 	.word	0x20000064

08001188 <init_man_red>:

void init_man_red(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	//return_mode1();
	update_time_red--;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <init_man_red+0x9c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a24      	ldr	r2, [pc, #144]	; (8001224 <init_man_red+0x9c>)
 8001194:	6013      	str	r3, [r2, #0]
	time_stage_2--;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <init_man_red+0xa0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <init_man_red+0xa0>)
 800119e:	6013      	str	r3, [r2, #0]
	if(update_time_red==0){
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <init_man_red+0x9c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10a      	bne.n	80011be <init_man_red+0x36>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 80011a8:	2101      	movs	r1, #1
 80011aa:	4820      	ldr	r0, [pc, #128]	; (800122c <init_man_red+0xa4>)
 80011ac:	f000 fdff 	bl	8001dae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 80011b0:	2108      	movs	r1, #8
 80011b2:	481e      	ldr	r0, [pc, #120]	; (800122c <init_man_red+0xa4>)
 80011b4:	f000 fdfb 	bl	8001dae <HAL_GPIO_TogglePin>
		//setTimer(1, update_time_red);
		update_time_green = 2;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <init_man_red+0xa8>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
	}
	if(buttonFlags[0]==1){
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <init_man_red+0xac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d11d      	bne.n	8001202 <init_man_red+0x7a>
		buttonFlags[0]= 0;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <init_man_red+0xac>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
		status = MAN_YELLOW;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <init_man_red+0xb0>)
 80011ce:	220f      	movs	r2, #15
 80011d0:	601a      	str	r2, [r3, #0]
		time_stage_2 = 50;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <init_man_red+0xa0>)
 80011d4:	2232      	movs	r2, #50	; 0x32
 80011d6:	601a      	str	r2, [r3, #0]
		init_automatic();
 80011d8:	f7fe ffb8 	bl	800014c <init_automatic>
		update_time_yellow = 2;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <init_man_red+0xb4>)
 80011de:	2202      	movs	r2, #2
 80011e0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	4811      	ldr	r0, [pc, #68]	; (800122c <init_man_red+0xa4>)
 80011e8:	f000 fdc9 	bl	8001d7e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2110      	movs	r1, #16
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <init_man_red+0xa4>)
 80011f2:	f000 fdc4 	bl	8001d7e <HAL_GPIO_WritePin>
		setmodecus(3);
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff fdba 	bl	8000d70 <setmodecus>
		duration = 0;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <init_man_red+0xb8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

	}
	if(time_stage_2==0){
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <init_man_red+0xa0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <init_man_red+0x96>
		status = GREEN_RED;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <init_man_red+0xb0>)
 800120c:	2202      	movs	r2, #2
 800120e:	601a      	str	r2, [r3, #0]
		//setTimer(0, green_on);
		counter_green_on = green_state*4;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <init_man_red+0xbc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <init_man_red+0xc0>)
 8001218:	6013      	str	r3, [r2, #0]
		init_automatic();
 800121a:	f7fe ff97 	bl	800014c <init_automatic>
	}

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000006c 	.word	0x2000006c
 8001228:	20000068 	.word	0x20000068
 800122c:	40010800 	.word	0x40010800
 8001230:	20000074 	.word	0x20000074
 8001234:	200000bc 	.word	0x200000bc
 8001238:	200000c8 	.word	0x200000c8
 800123c:	20000070 	.word	0x20000070
 8001240:	200000dc 	.word	0x200000dc
 8001244:	20000064 	.word	0x20000064
 8001248:	20000078 	.word	0x20000078

0800124c <init_man_yellow>:
void init_man_yellow(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	update_time_yellow--;
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <init_man_yellow+0x80>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <init_man_yellow+0x80>)
 8001258:	6013      	str	r3, [r2, #0]
	time_stage_2--;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <init_man_yellow+0x84>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <init_man_yellow+0x84>)
 8001262:	6013      	str	r3, [r2, #0]
	if (update_time_yellow==0) {
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <init_man_yellow+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10a      	bne.n	8001282 <init_man_yellow+0x36>
	    HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 800126c:	2102      	movs	r1, #2
 800126e:	4819      	ldr	r0, [pc, #100]	; (80012d4 <init_man_yellow+0x88>)
 8001270:	f000 fd9d 	bl	8001dae <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8001274:	2110      	movs	r1, #16
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <init_man_yellow+0x88>)
 8001278:	f000 fd99 	bl	8001dae <HAL_GPIO_TogglePin>
	    //setTimer(1, update_time_yellow);
	    update_time_yellow =2;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <init_man_yellow+0x80>)
 800127e:	2202      	movs	r2, #2
 8001280:	601a      	str	r2, [r3, #0]
	}
	if(buttonFlags[0]==1){
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <init_man_yellow+0x8c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11d      	bne.n	80012c6 <init_man_yellow+0x7a>
			buttonFlags[0]= 0;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <init_man_yellow+0x8c>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
			status = MAN_GREEN;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <init_man_yellow+0x90>)
 8001292:	220e      	movs	r2, #14
 8001294:	601a      	str	r2, [r3, #0]
			//setTimer(0,time_stage_2);
			update_time_yellow=40;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <init_man_yellow+0x80>)
 8001298:	2228      	movs	r2, #40	; 0x28
 800129a:	601a      	str	r2, [r3, #0]
			init_automatic();
 800129c:	f7fe ff56 	bl	800014c <init_automatic>
			//setTimer(1, update_time_green);
			update_time_green=2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <init_man_yellow+0x94>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	480a      	ldr	r0, [pc, #40]	; (80012d4 <init_man_yellow+0x88>)
 80012ac:	f000 fd67 	bl	8001d7e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2120      	movs	r1, #32
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <init_man_yellow+0x88>)
 80012b6:	f000 fd62 	bl	8001d7e <HAL_GPIO_WritePin>
			setmodecus(4);
 80012ba:	2004      	movs	r0, #4
 80012bc:	f7ff fd58 	bl	8000d70 <setmodecus>
			duration = 0;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <init_man_yellow+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

		}
	//return_mode1();
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000070 	.word	0x20000070
 80012d0:	20000068 	.word	0x20000068
 80012d4:	40010800 	.word	0x40010800
 80012d8:	200000bc 	.word	0x200000bc
 80012dc:	200000c8 	.word	0x200000c8
 80012e0:	20000074 	.word	0x20000074
 80012e4:	200000dc 	.word	0x200000dc

080012e8 <init_man_green>:
void init_man_green(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
		update_time_green--;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <init_man_green+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <init_man_green+0x40>)
 80012f4:	6013      	str	r3, [r2, #0]
		time_stage_2--;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <init_man_green+0x44>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <init_man_green+0x44>)
 80012fe:	6013      	str	r3, [r2, #0]
	if (update_time_green==0) {
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <init_man_green+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10a      	bne.n	800131e <init_man_green+0x36>
	    HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8001308:	2104      	movs	r1, #4
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <init_man_green+0x48>)
 800130c:	f000 fd4f 	bl	8001dae <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 8001310:	2120      	movs	r1, #32
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <init_man_green+0x48>)
 8001314:	f000 fd4b 	bl	8001dae <HAL_GPIO_TogglePin>
	    //setTimer(1, update_time_green);
	    update_time_green=2;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <init_man_green+0x40>)
 800131a:	2202      	movs	r2, #2
 800131c:	601a      	str	r2, [r3, #0]
	}
	return_mode1();
 800131e:	f7ff fc83 	bl	8000c28 <return_mode1>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000074 	.word	0x20000074
 800132c:	20000068 	.word	0x20000068
 8001330:	40010800 	.word	0x40010800

08001334 <SCH_Update>:

#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASK];

void SCH_Update(void){ //update the delay remaining of the task
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
	unsigned char idx;

	for(idx = 0; idx < SCH_MAX_TASK; idx++){
 800133a:	2300      	movs	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	e05d      	b.n	80013fc <SCH_Update+0xc8>
		if(SCH_tasks_G[idx].pTask){//if the delay is over, update the flag
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	4933      	ldr	r1, [pc, #204]	; (8001410 <SCH_Update+0xdc>)
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d050      	beq.n	80013f6 <SCH_Update+0xc2>
			if(SCH_tasks_G[idx].delay == 0){
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	492e      	ldr	r1, [pc, #184]	; (8001410 <SCH_Update+0xdc>)
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d132      	bne.n	80013d0 <SCH_Update+0x9c>
				SCH_tasks_G[idx].runME += 1;
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	4928      	ldr	r1, [pc, #160]	; (8001410 <SCH_Update+0xdc>)
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	330c      	adds	r3, #12
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	79fa      	ldrb	r2, [r7, #7]
 800137e:	3301      	adds	r3, #1
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	4923      	ldr	r1, [pc, #140]	; (8001410 <SCH_Update+0xdc>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	330c      	adds	r3, #12
 8001390:	4602      	mov	r2, r0
 8001392:	701a      	strb	r2, [r3, #0]
				if(SCH_tasks_G[idx].period){ //if the task is to be run permanently, update the delay as the period
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	491e      	ldr	r1, [pc, #120]	; (8001410 <SCH_Update+0xdc>)
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	3308      	adds	r3, #8
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d025      	beq.n	80013f6 <SCH_Update+0xc2>
					SCH_tasks_G[idx].delay = SCH_tasks_G[idx].period;
 80013aa:	79f9      	ldrb	r1, [r7, #7]
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <SCH_Update+0xdc>)
 80013b0:	460b      	mov	r3, r1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4403      	add	r3, r0
 80013ba:	3308      	adds	r3, #8
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <SCH_Update+0xdc>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4403      	add	r3, r0
 80013ca:	3304      	adds	r3, #4
 80013cc:	6019      	str	r1, [r3, #0]
 80013ce:	e012      	b.n	80013f6 <SCH_Update+0xc2>
				}
			}else{ //else just deduct the delay
				SCH_tasks_G[idx].delay -= 1;
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	490f      	ldr	r1, [pc, #60]	; (8001410 <SCH_Update+0xdc>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3304      	adds	r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	1e59      	subs	r1, r3, #1
 80013e6:	480a      	ldr	r0, [pc, #40]	; (8001410 <SCH_Update+0xdc>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4403      	add	r3, r0
 80013f2:	3304      	adds	r3, #4
 80013f4:	6019      	str	r1, [r3, #0]
	for(idx = 0; idx < SCH_MAX_TASK; idx++){
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3301      	adds	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b27      	cmp	r3, #39	; 0x27
 8001400:	d99e      	bls.n	8001340 <SCH_Update+0xc>
			}
		}
	}
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000128 	.word	0x20000128

08001414 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void(*pFunction)(), unsigned int DELAY, unsigned int PERIOD){
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	unsigned char idx = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]

	while((SCH_tasks_G[idx].pTask != 0) && (idx < SCH_MAX_TASK)){
 8001424:	e002      	b.n	800142c <SCH_Add_Task+0x18>
		idx++;
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	3301      	adds	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
	while((SCH_tasks_G[idx].pTask != 0) && (idx < SCH_MAX_TASK)){
 800142c:	7dfa      	ldrb	r2, [r7, #23]
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <SCH_Add_Task+0xac>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <SCH_Add_Task+0x32>
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b27      	cmp	r3, #39	; 0x27
 8001444:	d9ef      	bls.n	8001426 <SCH_Add_Task+0x12>
	}//search for an open space in the array

	if(idx == SCH_MAX_TASK){ //if the task array is full, return
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b28      	cmp	r3, #40	; 0x28
 800144a:	d101      	bne.n	8001450 <SCH_Add_Task+0x3c>
		return SCH_MAX_TASK;
 800144c:	2328      	movs	r3, #40	; 0x28
 800144e:	e031      	b.n	80014b4 <SCH_Add_Task+0xa0>
	}

	//add the task into the array
	SCH_tasks_G[idx].pTask = pFunction;
 8001450:	7dfa      	ldrb	r2, [r7, #23]
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <SCH_Add_Task+0xac>)
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].delay = DELAY;
 8001462:	7dfa      	ldrb	r2, [r7, #23]
 8001464:	4916      	ldr	r1, [pc, #88]	; (80014c0 <SCH_Add_Task+0xac>)
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3304      	adds	r3, #4
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].period = PERIOD;
 8001476:	7dfa      	ldrb	r2, [r7, #23]
 8001478:	4911      	ldr	r1, [pc, #68]	; (80014c0 <SCH_Add_Task+0xac>)
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	3308      	adds	r3, #8
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[idx].runME = 0;
 800148a:	7dfa      	ldrb	r2, [r7, #23]
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <SCH_Add_Task+0xac>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	330c      	adds	r3, #12
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[idx].taskID = idx;
 800149e:	7dfa      	ldrb	r2, [r7, #23]
 80014a0:	7df9      	ldrb	r1, [r7, #23]
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <SCH_Add_Task+0xac>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4403      	add	r3, r0
 80014ae:	3310      	adds	r3, #16
 80014b0:	6019      	str	r1, [r3, #0]

	return idx;
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000128 	.word	0x20000128

080014c4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	unsigned char idx;

	for(idx = 0; idx < SCH_MAX_TASK; idx++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	71fb      	strb	r3, [r7, #7]
 80014ce:	e03a      	b.n	8001546 <SCH_Dispatch_Tasks+0x82>
		if(SCH_tasks_G[idx].runME > 0){//run the task
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	4921      	ldr	r1, [pc, #132]	; (8001558 <SCH_Dispatch_Tasks+0x94>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d02c      	beq.n	8001540 <SCH_Dispatch_Tasks+0x7c>
			(*SCH_tasks_G[idx].pTask)();
 80014e6:	79fa      	ldrb	r2, [r7, #7]
 80014e8:	491b      	ldr	r1, [pc, #108]	; (8001558 <SCH_Dispatch_Tasks+0x94>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4798      	blx	r3
			SCH_tasks_G[idx].runME -= 1;
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <SCH_Dispatch_Tasks+0x94>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	330c      	adds	r3, #12
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	3b01      	subs	r3, #1
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	4911      	ldr	r1, [pc, #68]	; (8001558 <SCH_Dispatch_Tasks+0x94>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	330c      	adds	r3, #12
 800151e:	4602      	mov	r2, r0
 8001520:	701a      	strb	r2, [r3, #0]
			if(SCH_tasks_G[idx].period == 0){ //oneshot task
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <SCH_Dispatch_Tasks+0x94>)
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3308      	adds	r3, #8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <SCH_Dispatch_Tasks+0x7c>
				SCH_DeleteTask(idx);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f80e 	bl	800155c <SCH_DeleteTask>
	for(idx = 0; idx < SCH_MAX_TASK; idx++){
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	3301      	adds	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b27      	cmp	r3, #39	; 0x27
 800154a:	d9c1      	bls.n	80014d0 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000128 	.word	0x20000128

0800155c <SCH_DeleteTask>:

void SCH_DeleteTask(const int task_index){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[task_index].delay = 0;
 8001564:	491a      	ldr	r1, [pc, #104]	; (80015d0 <SCH_DeleteTask+0x74>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	3304      	adds	r3, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].pTask = NULL;
 8001578:	4915      	ldr	r1, [pc, #84]	; (80015d0 <SCH_DeleteTask+0x74>)
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].period = 0;
 800158a:	4911      	ldr	r1, [pc, #68]	; (80015d0 <SCH_DeleteTask+0x74>)
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3308      	adds	r3, #8
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[task_index].runME = 0;
 800159e:	490c      	ldr	r1, [pc, #48]	; (80015d0 <SCH_DeleteTask+0x74>)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	330c      	adds	r3, #12
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[task_index].taskID = 0;
 80015b2:	4907      	ldr	r1, [pc, #28]	; (80015d0 <SCH_DeleteTask+0x74>)
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3310      	adds	r3, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	20000128 	.word	0x20000128

080015d4 <setTimer>:
#define MAX_COUNTER 10

int timerCounter[MAX_COUNTER];
int timerFlag[MAX_COUNTER];

void setTimer(int index, int counter){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    timerCounter[index] = counter / 10;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <setTimer+0x34>)
 80015e2:	fb82 1203 	smull	r1, r2, r2, r3
 80015e6:	1092      	asrs	r2, r2, #2
 80015e8:	17db      	asrs	r3, r3, #31
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <setTimer+0x38>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    timerFlag[index] = 0;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <setTimer+0x3c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2100      	movs	r1, #0
 80015fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	66666667 	.word	0x66666667
 800160c:	20000470 	.word	0x20000470
 8001610:	20000448 	.word	0x20000448

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_MspInit+0x5c>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_MspInit+0x5c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6193      	str	r3, [r2, #24]
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x5c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_MspInit+0x5c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_MspInit+0x60>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_MspInit+0x60>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000

08001678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001688:	d113      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_TIM_Base_MspInit+0x44>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201c      	movs	r0, #28
 80016a8:	f000 f9a1 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ac:	201c      	movs	r0, #28
 80016ae:	f000 f9ba 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f87f 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM2_IRQHandler+0x10>)
 8001716:	f000 ffdb 	bl	80026d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000e0 	.word	0x200000e0

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fff8 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001736:	490c      	ldr	r1, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <LoopFillZerobss+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800174c:	4c09      	ldr	r4, [pc, #36]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f001 faf9 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175e:	f7fe fe23 	bl	80003a8 <main>
  bx lr
 8001762:	4770      	bx	lr
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800176c:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 8001770:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001774:	2000049c 	.word	0x2000049c

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x28>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 f923 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f808 	bl	80017a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff ff3c 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x54>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_InitTick+0x58>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f93b 	bl	8001a42 <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f000 f903 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x5c>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000094 	.word	0x20000094
 8001800:	2000009c 	.word	0x2000009c
 8001804:	20000098 	.word	0x20000098

08001808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x1c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x20>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_IncTick+0x20>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	2000009c 	.word	0x2000009c
 8001828:	20000498 	.word	0x20000498

0800182c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_GetTick+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000498 	.word	0x20000498

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4906      	ldr	r1, [pc, #24]	; (80018d8 <__NVIC_EnableIRQ+0x34>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff90 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff2d 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff42 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff90 	bl	8001930 <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5f 	bl	80018dc <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff35 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b08b      	sub	sp, #44	; 0x2c
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	e148      	b.n	8001d02 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a70:	2201      	movs	r2, #1
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8137 	bne.w	8001cfc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4aa3      	ldr	r2, [pc, #652]	; (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d05e      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001a98:	4aa1      	ldr	r2, [pc, #644]	; (8001d20 <HAL_GPIO_Init+0x2c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d875      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001a9e:	4aa1      	ldr	r2, [pc, #644]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d058      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a9f      	ldr	r2, [pc, #636]	; (8001d24 <HAL_GPIO_Init+0x2c8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d86f      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001aaa:	4a9f      	ldr	r2, [pc, #636]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d052      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_GPIO_Init+0x2cc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d869      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ab6:	4a9d      	ldr	r2, [pc, #628]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d04c      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001abc:	4a9b      	ldr	r2, [pc, #620]	; (8001d2c <HAL_GPIO_Init+0x2d0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d863      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ac2:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d046      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <HAL_GPIO_Init+0x2d4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d85d      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d82a      	bhi.n	8001b28 <HAL_GPIO_Init+0xcc>
 8001ad2:	2b12      	cmp	r3, #18
 8001ad4:	d859      	bhi.n	8001b8a <HAL_GPIO_Init+0x12e>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <HAL_GPIO_Init+0x80>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001b57 	.word	0x08001b57
 8001ae0:	08001b31 	.word	0x08001b31
 8001ae4:	08001b43 	.word	0x08001b43
 8001ae8:	08001b85 	.word	0x08001b85
 8001aec:	08001b8b 	.word	0x08001b8b
 8001af0:	08001b8b 	.word	0x08001b8b
 8001af4:	08001b8b 	.word	0x08001b8b
 8001af8:	08001b8b 	.word	0x08001b8b
 8001afc:	08001b8b 	.word	0x08001b8b
 8001b00:	08001b8b 	.word	0x08001b8b
 8001b04:	08001b8b 	.word	0x08001b8b
 8001b08:	08001b8b 	.word	0x08001b8b
 8001b0c:	08001b8b 	.word	0x08001b8b
 8001b10:	08001b8b 	.word	0x08001b8b
 8001b14:	08001b8b 	.word	0x08001b8b
 8001b18:	08001b8b 	.word	0x08001b8b
 8001b1c:	08001b8b 	.word	0x08001b8b
 8001b20:	08001b39 	.word	0x08001b39
 8001b24:	08001b4d 	.word	0x08001b4d
 8001b28:	4a82      	ldr	r2, [pc, #520]	; (8001d34 <HAL_GPIO_Init+0x2d8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d013      	beq.n	8001b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2e:	e02c      	b.n	8001b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e029      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e024      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	3308      	adds	r3, #8
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e01f      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	330c      	adds	r3, #12
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	e01a      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e013      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	611a      	str	r2, [r3, #16]
          break;
 8001b76:	e009      	b.n	8001b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	615a      	str	r2, [r3, #20]
          break;
 8001b82:	e003      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x130>
          break;
 8001b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d801      	bhi.n	8001b96 <HAL_GPIO_Init+0x13a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_Init+0x13e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	; 0xff
 8001ba0:	d802      	bhi.n	8001ba8 <HAL_GPIO_Init+0x14c>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x152>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	3b08      	subs	r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	6a39      	ldr	r1, [r7, #32]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8090 	beq.w	8001cfc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_GPIO_Init+0x2dc>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <HAL_GPIO_Init+0x2e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00d      	beq.n	8001c3c <HAL_GPIO_Init+0x1e0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_Init+0x1dc>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_GPIO_Init+0x1d8>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c34:	2303      	movs	r3, #3
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1e2>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4e:	493b      	ldr	r1, [pc, #236]	; (8001d3c <HAL_GPIO_Init+0x2e0>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4937      	ldr	r1, [pc, #220]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4933      	ldr	r1, [pc, #204]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	492d      	ldr	r1, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4929      	ldr	r1, [pc, #164]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4923      	ldr	r1, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	491f      	ldr	r1, [pc, #124]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d006      	beq.n	8001cee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4919      	ldr	r1, [pc, #100]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e006      	b.n	8001cfc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	4915      	ldr	r1, [pc, #84]	; (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	3301      	adds	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f aeaf 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	372c      	adds	r7, #44	; 0x2c
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	10320000 	.word	0x10320000
 8001d24:	10310000 	.word	0x10310000
 8001d28:	10220000 	.word	0x10220000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	10120000 	.word	0x10120000
 8001d34:	10110000 	.word	0x10110000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d9a:	e003      	b.n	8001da4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	041a      	lsls	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	041a      	lsls	r2, r3, #16
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	400b      	ands	r3, r1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	611a      	str	r2, [r3, #16]
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e26c      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8087 	beq.w	8001f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e00:	4b92      	ldr	r3, [pc, #584]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d00c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d112      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5e>
 8001e18:	4b8c      	ldr	r3, [pc, #560]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d10b      	bne.n	8001e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d06c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x12c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d168      	bne.n	8001f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e246      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x76>
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a7f      	ldr	r2, [pc, #508]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e02e      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x98>
 8001e5e:	4b7b      	ldr	r3, [pc, #492]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7a      	ldr	r2, [pc, #488]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a77      	ldr	r2, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e01d      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0xbc>
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a71      	ldr	r2, [pc, #452]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0xd4>
 8001e9c:	4b6b      	ldr	r3, [pc, #428]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a67      	ldr	r2, [pc, #412]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fcb6 	bl	800182c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fcb2 	bl	800182c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1fa      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe4>
 8001ee2:	e014      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fca2 	bl	800182c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fc9e 	bl	800182c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1e6      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x10c>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d063      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1a:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x18c>
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x176>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1ba      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4939      	ldr	r1, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fc57 	bl	800182c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fc53 	bl	800182c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e19b      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4927      	ldr	r1, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc36 	bl	800182c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fc32 	bl	800182c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e17a      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d03a      	beq.n	8002064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d019      	beq.n	800202a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fc16 	bl	800182c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fc12 	bl	800182c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e15a      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_RCC_OscConfig+0x26c>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002022:	2001      	movs	r0, #1
 8002024:	f000 fa9a 	bl	800255c <RCC_Delay>
 8002028:	e01c      	b.n	8002064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x274>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fbfc 	bl	800182c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fbf8 	bl	800182c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d908      	bls.n	8002058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e140      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	42420000 	.word	0x42420000
 8002054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b9e      	ldr	r3, [pc, #632]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e9      	bne.n	8002038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a6 	beq.w	80021be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b97      	ldr	r3, [pc, #604]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b94      	ldr	r3, [pc, #592]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a93      	ldr	r2, [pc, #588]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b91      	ldr	r3, [pc, #580]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b8e      	ldr	r3, [pc, #568]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a8a      	ldr	r2, [pc, #552]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fbb9 	bl	800182c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff fbb5 	bl	800182c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0fd      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x4f8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x312>
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e02d      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x334>
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a75      	ldr	r2, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	4b73      	ldr	r3, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a72      	ldr	r2, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x356>
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a6c      	ldr	r2, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a69      	ldr	r2, [pc, #420]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x36e>
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb69 	bl	800182c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb65 	bl	800182c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0ab      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x37e>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7ff fb53 	bl	800182c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fb4f 	bl	800182c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e095      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8081 	beq.w	80022ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d061      	beq.n	8002298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d146      	bne.n	800226a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fb23 	bl	800182c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff fb1f 	bl	800182c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e067      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d108      	bne.n	8002224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	492d      	ldr	r1, [pc, #180]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a19      	ldr	r1, [r3, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	430b      	orrs	r3, r1
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff faf3 	bl	800182c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff faef 	bl	800182c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e037      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x46a>
 8002268:	e02f      	b.n	80022ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCC_OscConfig+0x4fc>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7ff fadc 	bl	800182c <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff fad8 	bl	800182c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e020      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x498>
 8002296:	e018      	b.n	80022ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e013      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42420060 	.word	0x42420060

080022e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800235e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7ff fa2c 	bl	800182c <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff fa28 	bl	800182c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4922      	ldr	r1, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f98a 	bl	80017a8 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08002dc0 	.word	0x08002dc0
 80024ac:	20000094 	.word	0x20000094
 80024b0:	20000098 	.word	0x20000098

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e027      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e027      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0c5b      	lsrs	r3, r3, #17
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	fb02 f203 	mul.w	r2, r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e004      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08002dd0 	.word	0x08002dd0
 8002554:	08002de0 	.word	0x08002de0
 8002558:	003d0900 	.word	0x003d0900

0800255c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <RCC_Delay+0x34>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <RCC_Delay+0x38>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0a5b      	lsrs	r3, r3, #9
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002578:	bf00      	nop
  }
  while (Delay --);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	60fa      	str	r2, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <RCC_Delay+0x1c>
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000094 	.word	0x20000094
 8002594:	10624dd3 	.word	0x10624dd3

08002598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e041      	b.n	800262e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff f85a 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 fa56 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d001      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e035      	b.n	80026bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <HAL_TIM_Base_Start_IT+0x90>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_TIM_Base_Start_IT+0x4e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d004      	beq.n	8002686 <HAL_TIM_Base_Start_IT+0x4e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_TIM_Base_Start_IT+0x94>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b06      	cmp	r3, #6
 8002696:	d010      	beq.n	80026ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	e007      	b.n	80026ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400

080026d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d020      	beq.n	8002734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0202 	mvn.w	r2, #2
 8002704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f998 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f98b 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f99a 	bl	8002a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d020      	beq.n	8002780 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01b      	beq.n	8002780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0204 	mvn.w	r2, #4
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f972 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f965 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f974 	bl	8002a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d020      	beq.n	80027cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0208 	mvn.w	r2, #8
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2204      	movs	r2, #4
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f94c 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f93f 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f94e 	bl	8002a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0210 	mvn.w	r2, #16
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2208      	movs	r2, #8
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f926 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f919 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f928 	bl	8002a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0201 	mvn.w	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fd ff04 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa6f 	bl	8002d3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00c      	beq.n	8002884 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d007      	beq.n	8002884 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8f8 	bl	8002a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0220 	mvn.w	r2, #32
 80028a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa42 	bl	8002d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIM_ConfigClockSource+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0b4      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x186>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002904:	d03e      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0xd4>
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	f200 8087 	bhi.w	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002912:	f000 8086 	beq.w	8002a22 <HAL_TIM_ConfigClockSource+0x172>
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d87f      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d01a      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0xa6>
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d87b      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b60      	cmp	r3, #96	; 0x60
 8002926:	d050      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x11a>
 8002928:	2b60      	cmp	r3, #96	; 0x60
 800292a:	d877      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b50      	cmp	r3, #80	; 0x50
 800292e:	d03c      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0xfa>
 8002930:	2b50      	cmp	r3, #80	; 0x50
 8002932:	d873      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d058      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x13a>
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d86f      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800293c:	2b30      	cmp	r3, #48	; 0x30
 800293e:	d064      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002940:	2b30      	cmp	r3, #48	; 0x30
 8002942:	d86b      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d060      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	2b20      	cmp	r3, #32
 800294a:	d867      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05c      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002950:	2b10      	cmp	r3, #16
 8002952:	d05a      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	e062      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f000 f96a 	bl	8002c3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	609a      	str	r2, [r3, #8]
      break;
 8002982:	e04f      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f000 f953 	bl	8002c3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a6:	609a      	str	r2, [r3, #8]
      break;
 80029a8:	e03c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 f8ca 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2150      	movs	r1, #80	; 0x50
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f921 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 80029c8:	e02c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 f8e8 	bl	8002bac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2160      	movs	r1, #96	; 0x60
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f911 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 80029e8:	e01c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 f8aa 	bl	8002b50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2140      	movs	r1, #64	; 0x40
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f901 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 8002a08:	e00c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f000 f8f8 	bl	8002c0a <TIM_ITRx_SetConfig>
      break;
 8002a1a:	e003      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e000      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
	...

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a2b      	ldr	r2, [pc, #172]	; (8002b48 <TIM_Base_SetConfig+0xc0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <TIM_Base_SetConfig+0x28>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x28>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a28      	ldr	r2, [pc, #160]	; (8002b4c <TIM_Base_SetConfig+0xc4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <TIM_Base_SetConfig+0xc0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x52>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x52>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_Base_SetConfig+0xc4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <TIM_Base_SetConfig+0xc0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40000400 	.word	0x40000400

08002b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f023 030a 	bic.w	r3, r3, #10
 8002b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0210 	bic.w	r2, r3, #16
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	031b      	lsls	r3, r3, #12
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f043 0307 	orr.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b087      	sub	sp, #28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	609a      	str	r2, [r3, #8]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e041      	b.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d004      	beq.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10c      	bne.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400

08002d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	2600      	movs	r6, #0
 8002d54:	4d0c      	ldr	r5, [pc, #48]	; (8002d88 <__libc_init_array+0x38>)
 8002d56:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d58:	1b64      	subs	r4, r4, r5
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	42a6      	cmp	r6, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	f000 f822 	bl	8002da8 <_init>
 8002d64:	2600      	movs	r6, #0
 8002d66:	4d0a      	ldr	r5, [pc, #40]	; (8002d90 <__libc_init_array+0x40>)
 8002d68:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <__libc_init_array+0x44>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	42a6      	cmp	r6, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d78:	4798      	blx	r3
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d82:	4798      	blx	r3
 8002d84:	3601      	adds	r6, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	08002de4 	.word	0x08002de4
 8002d8c:	08002de4 	.word	0x08002de4
 8002d90:	08002de4 	.word	0x08002de4
 8002d94:	08002de8 	.word	0x08002de8

08002d98 <memset>:
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	bf00      	nop
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
