
lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c10  08002c10  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002c10  08002c10  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c10  08002c10  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000094  08002cac  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002cac  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000994f  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba1  00000000  00000000  00029a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d3e  00000000  00000000  0002c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba94  00000000  00000000  0004372e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f4  00000000  00000000  0004f1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d16b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000d170c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bd4 	.word	0x08002bd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002bd4 	.word	0x08002bd4

0800014c <init_automatic>:
 *      Author: admim
 */

#include "automatic.h"

void init_automatic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	 	 HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	480e      	ldr	r0, [pc, #56]	; (8000190 <init_automatic+0x44>)
 8000156:	f001 fd28 	bl	8001baa <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	480c      	ldr	r0, [pc, #48]	; (8000190 <init_automatic+0x44>)
 8000160:	f001 fd23 	bl	8001baa <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <init_automatic+0x44>)
 800016a:	f001 fd1e 	bl	8001baa <HAL_GPIO_WritePin>

	    // Cấu hình Line 2
	    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 800016e:	2201      	movs	r2, #1
 8000170:	2120      	movs	r1, #32
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <init_automatic+0x44>)
 8000174:	f001 fd19 	bl	8001baa <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <init_automatic+0x44>)
 800017e:	f001 fd14 	bl	8001baa <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2108      	movs	r1, #8
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <init_automatic+0x44>)
 8000188:	f001 fd0f 	bl	8001baa <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <automatic_run>:
void automatic_run(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	switch(status){
 8000198:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <automatic_run+0x74>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	2b04      	cmp	r3, #4
 80001a0:	d82f      	bhi.n	8000202 <automatic_run+0x6e>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <automatic_run+0x14>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001bd 	.word	0x080001bd
 80001ac:	080001eb 	.word	0x080001eb
 80001b0:	080001f1 	.word	0x080001f1
 80001b4:	080001f7 	.word	0x080001f7
 80001b8:	080001fd 	.word	0x080001fd
	case INIT:
		init_automatic();
 80001bc:	f7ff ffc6 	bl	800014c <init_automatic>
		setTimer(0, green_on);
 80001c0:	4b12      	ldr	r3, [pc, #72]	; (800020c <automatic_run+0x78>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4619      	mov	r1, r3
 80001c6:	2000      	movs	r0, #0
 80001c8:	f001 f8d0 	bl	800136c <setTimer>
		status = GREEN_RED;
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <automatic_run+0x74>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	601a      	str	r2, [r3, #0]
		current_mode =  MODE_1;
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <automatic_run+0x7c>)
 80001d4:	2213      	movs	r2, #19
 80001d6:	601a      	str	r2, [r3, #0]
		setmode1(red_state	,green_state);
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <automatic_run+0x80>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <automatic_run+0x84>)
 80001de:	6812      	ldr	r2, [r2, #0]
 80001e0:	4611      	mov	r1, r2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fd50 	bl	8000c88 <setmode1>
		break;
 80001e8:	e00c      	b.n	8000204 <automatic_run+0x70>
	case GREEN_RED:
		init_green_red();
 80001ea:	f000 fe23 	bl	8000e34 <init_green_red>
		break;
 80001ee:	e009      	b.n	8000204 <automatic_run+0x70>
	case AMBER_RED:
		init_amber_red();
 80001f0:	f000 fe96 	bl	8000f20 <init_amber_red>
		break;
 80001f4:	e006      	b.n	8000204 <automatic_run+0x70>
	case RED_GREEN:
		init_red_green();
 80001f6:	f000 fed7 	bl	8000fa8 <init_red_green>
		break;
 80001fa:	e003      	b.n	8000204 <automatic_run+0x70>
	case RED_AMBER:
		init_red_amber();
 80001fc:	f000 ff16 	bl	800102c <init_red_amber>
		break;
 8000200:	e000      	b.n	8000204 <automatic_run+0x70>
	default:
		break;
 8000202:	bf00      	nop
	}
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000bc 	.word	0x200000bc
 800020c:	20000058 	.word	0x20000058
 8000210:	20000080 	.word	0x20000080
 8000214:	2000005c 	.word	0x2000005c
 8000218:	20000064 	.word	0x20000064

0800021c <subKeyProcess>:

// Cấu hình chân GPIO tương ứng với từng nút
GPIO_TypeDef* buttonPorts[NUM_OF_BUTTONS] = {but1_GPIO_Port, GPIOC, but3_GPIO_Port};
uint16_t buttonPins[NUM_OF_BUTTONS] = {but1_Pin, but2_Pin, but3_Pin};

void subKeyProcess(int index) {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
    // Đặt cờ cho nút tương ứng khi nút được nhấn
    buttonFlags[index] = 1; // Đánh dấu rằng nút đã được nhấn
 8000224:	4a04      	ldr	r2, [pc, #16]	; (8000238 <subKeyProcess+0x1c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2101      	movs	r1, #1
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Xử lý khi nút được nhấn
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	200000b0 	.word	0x200000b0

0800023c <clearbut>:
void clearbut(){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	buttonFlags[0] = 0;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <clearbut+0x20>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	buttonFlags[1] = 0;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <clearbut+0x20>)
 8000248:	2200      	movs	r2, #0
 800024a:	605a      	str	r2, [r3, #4]
	buttonFlags[2] = 0;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <clearbut+0x20>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	200000b0 	.word	0x200000b0

08000260 <getKeyInput>:

void getKeyInput() {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	e012      	b.n	8000292 <getKeyInput+0x32>
        // Cập nhật các thanh ghi trạng thái cho chống rung
        KeyReg0[i] = KeyReg1[i];
 800026c:	4a45      	ldr	r2, [pc, #276]	; (8000384 <getKeyInput+0x124>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	4944      	ldr	r1, [pc, #272]	; (8000388 <getKeyInput+0x128>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];}
 800027c:	4a43      	ldr	r2, [pc, #268]	; (800038c <getKeyInput+0x12c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	493f      	ldr	r1, [pc, #252]	; (8000384 <getKeyInput+0x124>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b02      	cmp	r3, #2
 8000296:	dde9      	ble.n	800026c <getKeyInput+0xc>

        KeyReg2[0] = HAL_GPIO_ReadPin(buttonPorts[0], buttonPins[0]);
 8000298:	4b3d      	ldr	r3, [pc, #244]	; (8000390 <getKeyInput+0x130>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a3d      	ldr	r2, [pc, #244]	; (8000394 <getKeyInput+0x134>)
 800029e:	8812      	ldrh	r2, [r2, #0]
 80002a0:	4611      	mov	r1, r2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fc6a 	bl	8001b7c <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b37      	ldr	r3, [pc, #220]	; (800038c <getKeyInput+0x12c>)
 80002ae:	601a      	str	r2, [r3, #0]
        KeyReg2[1] = HAL_GPIO_ReadPin(buttonPorts[1], buttonPins[1]);
 80002b0:	4b37      	ldr	r3, [pc, #220]	; (8000390 <getKeyInput+0x130>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a37      	ldr	r2, [pc, #220]	; (8000394 <getKeyInput+0x134>)
 80002b6:	8852      	ldrh	r2, [r2, #2]
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fc5e 	bl	8001b7c <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b31      	ldr	r3, [pc, #196]	; (800038c <getKeyInput+0x12c>)
 80002c6:	605a      	str	r2, [r3, #4]
        KeyReg2[2] = HAL_GPIO_ReadPin(buttonPorts[2], buttonPins[2]);
 80002c8:	4b31      	ldr	r3, [pc, #196]	; (8000390 <getKeyInput+0x130>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <getKeyInput+0x134>)
 80002ce:	8892      	ldrh	r2, [r2, #4]
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fc52 	bl	8001b7c <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	4b2b      	ldr	r3, [pc, #172]	; (800038c <getKeyInput+0x12c>)
 80002de:	609a      	str	r2, [r3, #8]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 80002e0:	2300      	movs	r3, #0
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	e046      	b.n	8000374 <getKeyInput+0x114>
        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80002e6:	4a28      	ldr	r2, [pc, #160]	; (8000388 <getKeyInput+0x128>)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4925      	ldr	r1, [pc, #148]	; (8000384 <getKeyInput+0x124>)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d139      	bne.n	800036e <getKeyInput+0x10e>
 80002fa:	4a22      	ldr	r2, [pc, #136]	; (8000384 <getKeyInput+0x124>)
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	4922      	ldr	r1, [pc, #136]	; (800038c <getKeyInput+0x12c>)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d12f      	bne.n	800036e <getKeyInput+0x10e>
            if (KeyReg3[i] != KeyReg2[i]) {  // Phát hiện thay đổi trạng thái
 800030e:	4a22      	ldr	r2, [pc, #136]	; (8000398 <getKeyInput+0x138>)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	491d      	ldr	r1, [pc, #116]	; (800038c <getKeyInput+0x12c>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800031e:	429a      	cmp	r2, r3
 8000320:	d011      	beq.n	8000346 <getKeyInput+0xe6>
                KeyReg3[i] = KeyReg2[i];
 8000322:	4a1a      	ldr	r2, [pc, #104]	; (800038c <getKeyInput+0x12c>)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800032a:	491b      	ldr	r1, [pc, #108]	; (8000398 <getKeyInput+0x138>)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {  // Nút được nhấn
 8000332:	4a16      	ldr	r2, [pc, #88]	; (800038c <getKeyInput+0x12c>)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d117      	bne.n	800036e <getKeyInput+0x10e>
                     // Reset timer cho nhấn đè
                    subKeyProcess(i);  // Gọi hàm xử lý khi nhấn
 800033e:	6838      	ldr	r0, [r7, #0]
 8000340:	f7ff ff6c 	bl	800021c <subKeyProcess>
 8000344:	e013      	b.n	800036e <getKeyInput+0x10e>
                }
            } else {  // Kiểm tra nhấn đè
            		TimerForKeyPress[i]--;
 8000346:	4a15      	ldr	r2, [pc, #84]	; (800039c <getKeyInput+0x13c>)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034e:	1e5a      	subs	r2, r3, #1
 8000350:	4912      	ldr	r1, [pc, #72]	; (800039c <getKeyInput+0x13c>)
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            		if(TimerForKeyPress[i]==0){
 8000358:	4a10      	ldr	r2, [pc, #64]	; (800039c <getKeyInput+0x13c>)
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d104      	bne.n	800036e <getKeyInput+0x10e>
            			KeyReg3[i] = NORMAL_STATE;
 8000364:	4a0c      	ldr	r2, [pc, #48]	; (8000398 <getKeyInput+0x138>)
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	2101      	movs	r1, #1
 800036a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	ddb5      	ble.n	80002e6 <getKeyInput+0x86>
            		}
            }
        	}
        }
    }
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000000c 	.word	0x2000000c
 8000388:	20000000 	.word	0x20000000
 800038c:	20000018 	.word	0x20000018
 8000390:	2000003c 	.word	0x2000003c
 8000394:	20000048 	.word	0x20000048
 8000398:	20000024 	.word	0x20000024
 800039c:	20000030 	.word	0x20000030

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f001 f900 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f820 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f8a6 	bl	80004fc <MX_GPIO_Init>
  MX_TIM2_Init();
 80003b0:	f000 f858 	bl	8000464 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003b4:	480b      	ldr	r0, [pc, #44]	; (80003e4 <main+0x44>)
 80003b6:	f002 f855 	bl	8002464 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <main+0x48>)
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
  setTimer(2, 250);
 80003c0:	21fa      	movs	r1, #250	; 0xfa
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 ffd2 	bl	800136c <setTimer>
  setTimer(4,1000);
 80003c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003cc:	2004      	movs	r0, #4
 80003ce:	f000 ffcd 	bl	800136c <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  automatic_run();
 80003d2:	f7ff fedf 	bl	8000194 <automatic_run>
	 	  run_manu();
 80003d6:	f000 f91f 	bl	8000618 <run_manu>
	 	  switch_mode();
 80003da:	f000 f939 	bl	8000650 <switch_mode>
	 	  scanled();
 80003de:	f000 fbfb 	bl	8000bd8 <scanled>
	  automatic_run();
 80003e2:	e7f6      	b.n	80003d2 <main+0x32>
 80003e4:	200000d4 	.word	0x200000d4
 80003e8:	200000bc 	.word	0x200000bc

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b090      	sub	sp, #64	; 0x40
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2228      	movs	r2, #40	; 0x28
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f002 fbe2 	bl	8002bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2310      	movs	r3, #16
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041a:	2300      	movs	r3, #0
 800041c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fbf2 	bl	8001c0c <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800042e:	f000 f8ed 	bl	800060c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fe5e 	bl	800210c <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000456:	f000 f8d9 	bl	800060c <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3740      	adds	r7, #64	; 0x40
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000478:	463b      	mov	r3, r7
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000480:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <MX_TIM2_Init+0x94>)
 8000482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_TIM2_Init+0x94>)
 800048a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800048e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <MX_TIM2_Init+0x94>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_TIM2_Init+0x94>)
 8000498:	2209      	movs	r2, #9
 800049a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_TIM2_Init+0x94>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM2_Init+0x94>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <MX_TIM2_Init+0x94>)
 80004aa:	f001 ff8b 	bl	80023c4 <HAL_TIM_Base_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004b4:	f000 f8aa 	bl	800060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <MX_TIM2_Init+0x94>)
 80004c6:	f002 f909 	bl	80026dc <HAL_TIM_ConfigClockSource>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004d0:	f000 f89c 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_TIM2_Init+0x94>)
 80004e2:	f002 fae1 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004ec:	f000 f88e 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000d4 	.word	0x200000d4

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b34      	ldr	r3, [pc, #208]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MX_GPIO_Init+0xe8>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <MX_GPIO_Init+0xe8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0308 	and.w	r3, r3, #8
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000558:	2200      	movs	r2, #0
 800055a:	f647 71bf 	movw	r1, #32703	; 0x7fbf
 800055e:	4822      	ldr	r0, [pc, #136]	; (80005e8 <MX_GPIO_Init+0xec>)
 8000560:	f001 fb23 	bl	8001baa <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, En1_Pin|En2_Pin|En3_Pin|En4_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	210f      	movs	r1, #15
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <MX_GPIO_Init+0xf0>)
 800056a:	f001 fb1e 	bl	8001baa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : but1_Pin but2_Pin */
  GPIO_InitStruct.Pin = but1_Pin|but2_Pin;
 800056e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	481b      	ldr	r0, [pc, #108]	; (80005f0 <MX_GPIO_Init+0xf4>)
 8000584:	f001 f980 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin LED_RED_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin D4_Pin
                           D5_Pin D6_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000588:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800058c:	613b      	str	r3, [r7, #16]
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	2301      	movs	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	2302      	movs	r3, #2
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <MX_GPIO_Init+0xec>)
 80005a2:	f001 f971 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : En1_Pin En2_Pin En3_Pin En4_Pin */
  GPIO_InitStruct.Pin = En1_Pin|En2_Pin|En3_Pin|En4_Pin;
 80005a6:	230f      	movs	r3, #15
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0xf0>)
 80005be:	f001 f963 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : but3_Pin PB11 */
  GPIO_InitStruct.Pin = but3_Pin|GPIO_PIN_11;
 80005c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0xf0>)
 80005d8:	f001 f956 	bl	8001888 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40011000 	.word	0x40011000

080005f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	timerRun();
 80005fc:	f000 fed6 	bl	80013ac <timerRun>
	getKeyInput();
 8000600:	f7ff fe2e 	bl	8000260 <getKeyInput>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <run_manu>:

void init_manu(){

}

void run_manu(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	switch(status){
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <run_manu+0x34>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d009      	beq.n	8000638 <run_manu+0x20>
 8000624:	2b0f      	cmp	r3, #15
 8000626:	dc0d      	bgt.n	8000644 <run_manu+0x2c>
 8000628:	2b0d      	cmp	r3, #13
 800062a:	d002      	beq.n	8000632 <run_manu+0x1a>
 800062c:	2b0e      	cmp	r3, #14
 800062e:	d006      	beq.n	800063e <run_manu+0x26>

			break;

	default:

		break;
 8000630:	e008      	b.n	8000644 <run_manu+0x2c>
		init_man_red();
 8000632:	f000 fd9f 	bl	8001174 <init_man_red>
		break;
 8000636:	e006      	b.n	8000646 <run_manu+0x2e>
		init_man_yellow();
 8000638:	f000 fe00 	bl	800123c <init_man_yellow>
			break;
 800063c:	e003      	b.n	8000646 <run_manu+0x2e>
		init_man_green();
 800063e:	f000 fe4d 	bl	80012dc <init_man_green>
			break;
 8000642:	e000      	b.n	8000646 <run_manu+0x2e>
		break;
 8000644:	bf00      	nop
	}
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000bc 	.word	0x200000bc

08000650 <switch_mode>:


void switch_mode(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	switch(current_mode){
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <switch_mode+0x38>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b13      	cmp	r3, #19
 800065a:	d002      	beq.n	8000662 <switch_mode+0x12>
 800065c:	2b14      	cmp	r3, #20
 800065e:	d003      	beq.n	8000668 <switch_mode+0x18>
		model_2();
		setduration(duration);
				break;
		default:

				break;
 8000660:	e00f      	b.n	8000682 <switch_mode+0x32>
			decrease_time_mode1();
 8000662:	f000 fb4f 	bl	8000d04 <decrease_time_mode1>
			break;
 8000666:	e00c      	b.n	8000682 <switch_mode+0x32>
		setmodecus(mode);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <switch_mode+0x3c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fb7f 	bl	8000d70 <setmodecus>
		model_2();
 8000672:	f000 fd1f 	bl	80010b4 <model_2>
		setduration(duration);
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <switch_mode+0x40>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fbb0 	bl	8000de0 <setduration>
				break;
 8000680:	bf00      	nop
			}
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000080 	.word	0x20000080
 800068c:	2000007c 	.word	0x2000007c
 8000690:	200000d0 	.word	0x200000d0

08000694 <display7SEG>:
 *
 *  Created on: Oct 26, 2024
 *      Author: admim
 */
#include "normal_state.h"
void display7SEG(int counter) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b09      	cmp	r3, #9
 80006a0:	f200 81c8 	bhi.w	8000a34 <display7SEG+0x3a0>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <display7SEG+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006d5 	.word	0x080006d5
 80006b0:	0800072b 	.word	0x0800072b
 80006b4:	08000781 	.word	0x08000781
 80006b8:	080007d7 	.word	0x080007d7
 80006bc:	0800082d 	.word	0x0800082d
 80006c0:	08000883 	.word	0x08000883
 80006c4:	080008d9 	.word	0x080008d9
 80006c8:	0800092f 	.word	0x0800092f
 80006cc:	08000985 	.word	0x08000985
 80006d0:	080009db 	.word	0x080009db

    switch (counter) {
        case 0:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	48d5      	ldr	r0, [pc, #852]	; (8000a30 <display7SEG+0x39c>)
 80006dc:	f001 fa65 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	48d2      	ldr	r0, [pc, #840]	; (8000a30 <display7SEG+0x39c>)
 80006e8:	f001 fa5f 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	48cf      	ldr	r0, [pc, #828]	; (8000a30 <display7SEG+0x39c>)
 80006f4:	f001 fa59 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	48cc      	ldr	r0, [pc, #816]	; (8000a30 <display7SEG+0x39c>)
 8000700:	f001 fa53 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070a:	48c9      	ldr	r0, [pc, #804]	; (8000a30 <display7SEG+0x39c>)
 800070c:	f001 fa4d 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	48c6      	ldr	r0, [pc, #792]	; (8000a30 <display7SEG+0x39c>)
 8000718:	f001 fa47 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000722:	48c3      	ldr	r0, [pc, #780]	; (8000a30 <display7SEG+0x39c>)
 8000724:	f001 fa41 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 8000728:	e187      	b.n	8000a3a <display7SEG+0x3a6>

        case 1:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	48bf      	ldr	r0, [pc, #764]	; (8000a30 <display7SEG+0x39c>)
 8000732:	f001 fa3a 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	48bc      	ldr	r0, [pc, #752]	; (8000a30 <display7SEG+0x39c>)
 800073e:	f001 fa34 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	48b9      	ldr	r0, [pc, #740]	; (8000a30 <display7SEG+0x39c>)
 800074a:	f001 fa2e 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	48b6      	ldr	r0, [pc, #728]	; (8000a30 <display7SEG+0x39c>)
 8000756:	f001 fa28 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	48b3      	ldr	r0, [pc, #716]	; (8000a30 <display7SEG+0x39c>)
 8000762:	f001 fa22 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	48b0      	ldr	r0, [pc, #704]	; (8000a30 <display7SEG+0x39c>)
 800076e:	f001 fa1c 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	48ad      	ldr	r0, [pc, #692]	; (8000a30 <display7SEG+0x39c>)
 800077a:	f001 fa16 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 800077e:	e15c      	b.n	8000a3a <display7SEG+0x3a6>

        case 2:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000786:	48aa      	ldr	r0, [pc, #680]	; (8000a30 <display7SEG+0x39c>)
 8000788:	f001 fa0f 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000792:	48a7      	ldr	r0, [pc, #668]	; (8000a30 <display7SEG+0x39c>)
 8000794:	f001 fa09 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800079e:	48a4      	ldr	r0, [pc, #656]	; (8000a30 <display7SEG+0x39c>)
 80007a0:	f001 fa03 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007aa:	48a1      	ldr	r0, [pc, #644]	; (8000a30 <display7SEG+0x39c>)
 80007ac:	f001 f9fd 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	489e      	ldr	r0, [pc, #632]	; (8000a30 <display7SEG+0x39c>)
 80007b8:	f001 f9f7 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c2:	489b      	ldr	r0, [pc, #620]	; (8000a30 <display7SEG+0x39c>)
 80007c4:	f001 f9f1 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4898      	ldr	r0, [pc, #608]	; (8000a30 <display7SEG+0x39c>)
 80007d0:	f001 f9eb 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 80007d4:	e131      	b.n	8000a3a <display7SEG+0x3a6>

        case 3:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007dc:	4894      	ldr	r0, [pc, #592]	; (8000a30 <display7SEG+0x39c>)
 80007de:	f001 f9e4 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	4891      	ldr	r0, [pc, #580]	; (8000a30 <display7SEG+0x39c>)
 80007ea:	f001 f9de 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f4:	488e      	ldr	r0, [pc, #568]	; (8000a30 <display7SEG+0x39c>)
 80007f6:	f001 f9d8 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000800:	488b      	ldr	r0, [pc, #556]	; (8000a30 <display7SEG+0x39c>)
 8000802:	f001 f9d2 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080c:	4888      	ldr	r0, [pc, #544]	; (8000a30 <display7SEG+0x39c>)
 800080e:	f001 f9cc 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	4885      	ldr	r0, [pc, #532]	; (8000a30 <display7SEG+0x39c>)
 800081a:	f001 f9c6 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000824:	4882      	ldr	r0, [pc, #520]	; (8000a30 <display7SEG+0x39c>)
 8000826:	f001 f9c0 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 800082a:	e106      	b.n	8000a3a <display7SEG+0x3a6>

        case 4:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	487f      	ldr	r0, [pc, #508]	; (8000a30 <display7SEG+0x39c>)
 8000834:	f001 f9b9 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	487c      	ldr	r0, [pc, #496]	; (8000a30 <display7SEG+0x39c>)
 8000840:	f001 f9b3 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4879      	ldr	r0, [pc, #484]	; (8000a30 <display7SEG+0x39c>)
 800084c:	f001 f9ad 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	4876      	ldr	r0, [pc, #472]	; (8000a30 <display7SEG+0x39c>)
 8000858:	f001 f9a7 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4873      	ldr	r0, [pc, #460]	; (8000a30 <display7SEG+0x39c>)
 8000864:	f001 f9a1 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	4870      	ldr	r0, [pc, #448]	; (8000a30 <display7SEG+0x39c>)
 8000870:	f001 f99b 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087a:	486d      	ldr	r0, [pc, #436]	; (8000a30 <display7SEG+0x39c>)
 800087c:	f001 f995 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 8000880:	e0db      	b.n	8000a3a <display7SEG+0x3a6>

        case 5:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	4869      	ldr	r0, [pc, #420]	; (8000a30 <display7SEG+0x39c>)
 800088a:	f001 f98e 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	4866      	ldr	r0, [pc, #408]	; (8000a30 <display7SEG+0x39c>)
 8000896:	f001 f988 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	4863      	ldr	r0, [pc, #396]	; (8000a30 <display7SEG+0x39c>)
 80008a2:	f001 f982 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ac:	4860      	ldr	r0, [pc, #384]	; (8000a30 <display7SEG+0x39c>)
 80008ae:	f001 f97c 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	485d      	ldr	r0, [pc, #372]	; (8000a30 <display7SEG+0x39c>)
 80008ba:	f001 f976 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	485a      	ldr	r0, [pc, #360]	; (8000a30 <display7SEG+0x39c>)
 80008c6:	f001 f970 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	4857      	ldr	r0, [pc, #348]	; (8000a30 <display7SEG+0x39c>)
 80008d2:	f001 f96a 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 80008d6:	e0b0      	b.n	8000a3a <display7SEG+0x3a6>

        case 6:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	4854      	ldr	r0, [pc, #336]	; (8000a30 <display7SEG+0x39c>)
 80008e0:	f001 f963 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ea:	4851      	ldr	r0, [pc, #324]	; (8000a30 <display7SEG+0x39c>)
 80008ec:	f001 f95d 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <display7SEG+0x39c>)
 80008f8:	f001 f957 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000902:	484b      	ldr	r0, [pc, #300]	; (8000a30 <display7SEG+0x39c>)
 8000904:	f001 f951 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090e:	4848      	ldr	r0, [pc, #288]	; (8000a30 <display7SEG+0x39c>)
 8000910:	f001 f94b 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	4845      	ldr	r0, [pc, #276]	; (8000a30 <display7SEG+0x39c>)
 800091c:	f001 f945 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000926:	4842      	ldr	r0, [pc, #264]	; (8000a30 <display7SEG+0x39c>)
 8000928:	f001 f93f 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 800092c:	e085      	b.n	8000a3a <display7SEG+0x3a6>

        case 7:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000934:	483e      	ldr	r0, [pc, #248]	; (8000a30 <display7SEG+0x39c>)
 8000936:	f001 f938 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000940:	483b      	ldr	r0, [pc, #236]	; (8000a30 <display7SEG+0x39c>)
 8000942:	f001 f932 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094c:	4838      	ldr	r0, [pc, #224]	; (8000a30 <display7SEG+0x39c>)
 800094e:	f001 f92c 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000958:	4835      	ldr	r0, [pc, #212]	; (8000a30 <display7SEG+0x39c>)
 800095a:	f001 f926 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <display7SEG+0x39c>)
 8000966:	f001 f920 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	482f      	ldr	r0, [pc, #188]	; (8000a30 <display7SEG+0x39c>)
 8000972:	f001 f91a 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	482c      	ldr	r0, [pc, #176]	; (8000a30 <display7SEG+0x39c>)
 800097e:	f001 f914 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 8000982:	e05a      	b.n	8000a3a <display7SEG+0x3a6>

        case 8:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4829      	ldr	r0, [pc, #164]	; (8000a30 <display7SEG+0x39c>)
 800098c:	f001 f90d 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	4826      	ldr	r0, [pc, #152]	; (8000a30 <display7SEG+0x39c>)
 8000998:	f001 f907 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a2:	4823      	ldr	r0, [pc, #140]	; (8000a30 <display7SEG+0x39c>)
 80009a4:	f001 f901 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <display7SEG+0x39c>)
 80009b0:	f001 f8fb 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	481d      	ldr	r0, [pc, #116]	; (8000a30 <display7SEG+0x39c>)
 80009bc:	f001 f8f5 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	481a      	ldr	r0, [pc, #104]	; (8000a30 <display7SEG+0x39c>)
 80009c8:	f001 f8ef 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <display7SEG+0x39c>)
 80009d4:	f001 f8e9 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 80009d8:	e02f      	b.n	8000a3a <display7SEG+0x3a6>

        case 9:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <display7SEG+0x39c>)
 80009e2:	f001 f8e2 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <display7SEG+0x39c>)
 80009ee:	f001 f8dc 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <display7SEG+0x39c>)
 80009fa:	f001 f8d6 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a04:	480a      	ldr	r0, [pc, #40]	; (8000a30 <display7SEG+0x39c>)
 8000a06:	f001 f8d0 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a10:	4807      	ldr	r0, [pc, #28]	; (8000a30 <display7SEG+0x39c>)
 8000a12:	f001 f8ca 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <display7SEG+0x39c>)
 8000a1e:	f001 f8c4 	bl	8001baa <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <display7SEG+0x39c>)
 8000a2a:	f001 f8be 	bl	8001baa <HAL_GPIO_WritePin>
            break;
 8000a2e:	e004      	b.n	8000a3a <display7SEG+0x3a6>
 8000a30:	40010800 	.word	0x40010800

        default:
            counter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
            break;
 8000a38:	bf00      	nop
    }
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop

08000a44 <clearled>:
void clearled(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <clearled+0x5c>)
 8000a50:	f001 f8ab 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <clearled+0x5c>)
 8000a5c:	f001 f8a5 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <clearled+0x5c>)
 8000a68:	f001 f89f 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a72:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <clearled+0x5c>)
 8000a74:	f001 f899 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <clearled+0x5c>)
 8000a80:	f001 f893 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <clearled+0x5c>)
 8000a8c:	f001 f88d 	bl	8001baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a96:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <clearled+0x5c>)
 8000a98:	f001 f887 	bl	8001baa <HAL_GPIO_WritePin>

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <clearbuffer>:
void clearbuffer(){
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <clearbuffer+0x24>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 0;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <clearbuffer+0x24>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
		led_buffer[2] = 0;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <clearbuffer+0x24>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
		led_buffer[3] = 0;
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <clearbuffer+0x24>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	200000c0 	.word	0x200000c0

08000acc <update7SEG>:
void update7SEG(int index){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d873      	bhi.n	8000bc4 <update7SEG+0xf8>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <update7SEG+0x18>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000b29 	.word	0x08000b29
 8000aec:	08000b5d 	.word	0x08000b5d
 8000af0:	08000b91 	.word	0x08000b91
	switch (index) {
			case 1:
//
				display7SEG(led_buffer[0]);
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <update7SEG+0x104>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fdcb 	bl	8000694 <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <update7SEG+0x108>)
 8000b04:	f001 f851 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4831      	ldr	r0, [pc, #196]	; (8000bd4 <update7SEG+0x108>)
 8000b0e:	f001 f84c 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2104      	movs	r1, #4
 8000b16:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <update7SEG+0x108>)
 8000b18:	f001 f847 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <update7SEG+0x108>)
 8000b22:	f001 f842 	bl	8001baa <HAL_GPIO_WritePin>
//
				break;
 8000b26:	e04e      	b.n	8000bc6 <update7SEG+0xfa>
			case 2:
//				if(isTimerExpired(0)==1){
				display7SEG(led_buffer[1]);
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <update7SEG+0x104>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdb1 	bl	8000694 <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	4827      	ldr	r0, [pc, #156]	; (8000bd4 <update7SEG+0x108>)
 8000b38:	f001 f837 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2102      	movs	r1, #2
 8000b40:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <update7SEG+0x108>)
 8000b42:	f001 f832 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <update7SEG+0x108>)
 8000b4c:	f001 f82d 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2108      	movs	r1, #8
 8000b54:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <update7SEG+0x108>)
 8000b56:	f001 f828 	bl	8001baa <HAL_GPIO_WritePin>
//				}
				break;
 8000b5a:	e034      	b.n	8000bc6 <update7SEG+0xfa>
			case 3:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[2]);
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <update7SEG+0x104>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fd97 	bl	8000694 <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <update7SEG+0x108>)
 8000b6c:	f001 f81d 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <update7SEG+0x108>)
 8000b76:	f001 f818 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <update7SEG+0x108>)
 8000b80:	f001 f813 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2108      	movs	r1, #8
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <update7SEG+0x108>)
 8000b8a:	f001 f80e 	bl	8001baa <HAL_GPIO_WritePin>
//	}
				break;
 8000b8e:	e01a      	b.n	8000bc6 <update7SEG+0xfa>
			case 4:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[3]);
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <update7SEG+0x104>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fd7d 	bl	8000694 <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <update7SEG+0x108>)
 8000ba0:	f001 f803 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <update7SEG+0x108>)
 8000baa:	f000 fffe 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <update7SEG+0x108>)
 8000bb4:	f000 fff9 	bl	8001baa <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <update7SEG+0x108>)
 8000bbe:	f000 fff4 	bl	8001baa <HAL_GPIO_WritePin>
//					}
			break;
 8000bc2:	e000      	b.n	8000bc6 <update7SEG+0xfa>
			default:
				break;
 8000bc4:	bf00      	nop
		}

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000c0 	.word	0x200000c0
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <scanled>:
int run = 1;
void scanled(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	if(isTimerExpired(2)==1){
 8000bdc:	2002      	movs	r0, #2
 8000bde:	f000 fc15 	bl	800140c <isTimerExpired>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d118      	bne.n	8000c1a <scanled+0x42>
		clearled();
 8000be8:	f7ff ff2c 	bl	8000a44 <clearled>
		update7SEG(run);
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <scanled+0x48>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff6b 	bl	8000acc <update7SEG>
		run++;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <scanled+0x48>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <scanled+0x48>)
 8000bfe:	6013      	str	r3, [r2, #0]
		setTimer(2, scan_led);
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <scanled+0x4c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 fbb0 	bl	800136c <setTimer>
		if(run>4){
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <scanled+0x48>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	dd02      	ble.n	8000c1a <scanled+0x42>
			run = 0;
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <scanled+0x48>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000084 	.word	0x20000084
 8000c24:	20000078 	.word	0x20000078

08000c28 <return_mode1>:
void return_mode1(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if(buttonFlags[2]==1){
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <return_mode1+0x48>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d11a      	bne.n	8000c6a <return_mode1+0x42>
		buttonFlags[2]=0;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <return_mode1+0x48>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
		init_automatic();
 8000c3a:	f7ff fa87 	bl	800014c <init_automatic>
		clearled();
 8000c3e:	f7ff ff01 	bl	8000a44 <clearled>
		status = GREEN_RED;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <return_mode1+0x4c>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
		setTimer(0, green_on);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <return_mode1+0x50>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 fb8c 	bl	800136c <setTimer>
		setmode1(red_state,green_state);
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <return_mode1+0x54>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <return_mode1+0x58>)
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f812 	bl	8000c88 <setmode1>
		current_mode = MODE_1;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <return_mode1+0x5c>)
 8000c66:	2213      	movs	r2, #19
 8000c68:	601a      	str	r2, [r3, #0]

	}
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000b0 	.word	0x200000b0
 8000c74:	200000bc 	.word	0x200000bc
 8000c78:	20000058 	.word	0x20000058
 8000c7c:	2000005c 	.word	0x2000005c
 8000c80:	20000064 	.word	0x20000064
 8000c84:	20000080 	.word	0x20000080

08000c88 <setmode1>:
void setmode1(int line1, int line2){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
	clearbuffer();
 8000c92:	f7ff ff07 	bl	8000aa4 <clearbuffer>
	led_buffer[0] = line1/10;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <setmode1+0x74>)
 8000c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c9e:	1092      	asrs	r2, r2, #2
 8000ca0:	17db      	asrs	r3, r3, #31
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <setmode1+0x78>)
 8000ca6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = line1%10;
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <setmode1+0x74>)
 8000cac:	fb83 2301 	smull	r2, r3, r3, r1
 8000cb0:	109a      	asrs	r2, r3, #2
 8000cb2:	17cb      	asrs	r3, r1, #31
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	1aca      	subs	r2, r1, r3
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <setmode1+0x78>)
 8000cc2:	605a      	str	r2, [r3, #4]

	led_buffer[2] = line2/10;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <setmode1+0x74>)
 8000cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ccc:	1092      	asrs	r2, r2, #2
 8000cce:	17db      	asrs	r3, r3, #31
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <setmode1+0x78>)
 8000cd4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = line2%10;
 8000cd6:	6839      	ldr	r1, [r7, #0]
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <setmode1+0x74>)
 8000cda:	fb83 2301 	smull	r2, r3, r3, r1
 8000cde:	109a      	asrs	r2, r3, #2
 8000ce0:	17cb      	asrs	r3, r1, #31
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	1aca      	subs	r2, r1, r3
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <setmode1+0x78>)
 8000cf0:	60da      	str	r2, [r3, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	66666667 	.word	0x66666667
 8000d00:	200000c0 	.word	0x200000c0

08000d04 <decrease_time_mode1>:
void decrease_time_mode1(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	if(isTimerExpired(4)==1){
 8000d08:	2004      	movs	r0, #4
 8000d0a:	f000 fb7f 	bl	800140c <isTimerExpired>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d128      	bne.n	8000d66 <decrease_time_mode1+0x62>
		if(led_buffer[0]!=0){
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <decrease_time_mode1+0x22>
		led_buffer[0]--;}
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d24:	6013      	str	r3, [r2, #0]
		if(led_buffer[1]!=0){
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <decrease_time_mode1+0x34>
				led_buffer[1]--;}
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d36:	6053      	str	r3, [r2, #4]
		if(led_buffer[2]!=0){
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <decrease_time_mode1+0x46>
				led_buffer[2]--;}
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d48:	6093      	str	r3, [r2, #8]
		if(led_buffer[3]!=0){
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d004      	beq.n	8000d5c <decrease_time_mode1+0x58>
				led_buffer[3]--;}
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <decrease_time_mode1+0x68>)
 8000d5a:	60d3      	str	r3, [r2, #12]
		setTimer(4, 1000);
 8000d5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d60:	2004      	movs	r0, #4
 8000d62:	f000 fb03 	bl	800136c <setTimer>
	}
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000c0 	.word	0x200000c0

08000d70 <setmodecus>:

void setmodecus(int mode_cus){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	mode = mode_cus;
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <setmodecus+0x64>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
	led_buffer[0] = 0;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <setmodecus+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 0;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <setmodecus+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	led_buffer[2] = 0;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <setmodecus+0x68>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <setmodecus+0x68>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
	led_buffer[0] = mode/10;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <setmodecus+0x64>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <setmodecus+0x6c>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1092      	asrs	r2, r2, #2
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <setmodecus+0x68>)
 8000da8:	6013      	str	r3, [r2, #0]
	led_buffer[1] = mode%10;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <setmodecus+0x64>)
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <setmodecus+0x6c>)
 8000db0:	fb83 2301 	smull	r2, r3, r3, r1
 8000db4:	109a      	asrs	r2, r3, #2
 8000db6:	17cb      	asrs	r3, r1, #31
 8000db8:	1ad2      	subs	r2, r2, r3
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <setmodecus+0x68>)
 8000dc6:	605a      	str	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000007c 	.word	0x2000007c
 8000dd8:	200000c0 	.word	0x200000c0
 8000ddc:	66666667 	.word	0x66666667

08000de0 <setduration>:


void setduration(int duration){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	led_buffer[2] = 0;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <setduration+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <setduration+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
	led_buffer[2] = duration/10;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <setduration+0x50>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1092      	asrs	r2, r2, #2
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <setduration+0x4c>)
 8000e04:	6093      	str	r3, [r2, #8]
	led_buffer[3] = duration%10;
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <setduration+0x50>)
 8000e0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e0e:	109a      	asrs	r2, r3, #2
 8000e10:	17cb      	asrs	r3, r1, #31
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	1aca      	subs	r2, r1, r3
 8000e1e:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <setduration+0x4c>)
 8000e20:	60da      	str	r2, [r3, #12]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	200000c0 	.word	0x200000c0
 8000e30:	66666667 	.word	0x66666667

08000e34 <init_green_red>:
void init_green_red(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	482f      	ldr	r0, [pc, #188]	; (8000efc <init_green_red+0xc8>)
 8000e3e:	f000 feb4 	bl	8001baa <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000e42:	2201      	movs	r2, #1
 8000e44:	2102      	movs	r1, #2
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <init_green_red+0xc8>)
 8000e48:	f000 feaf 	bl	8001baa <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2104      	movs	r1, #4
 8000e50:	482a      	ldr	r0, [pc, #168]	; (8000efc <init_green_red+0xc8>)
 8000e52:	f000 feaa 	bl	8001baa <HAL_GPIO_WritePin>
		    // Cấu hình Line 2
		    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET); // Xanh sáng - Line 2
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4828      	ldr	r0, [pc, #160]	; (8000efc <init_green_red+0xc8>)
 8000e5c:	f000 fea5 	bl	8001baa <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <init_green_red+0xc8>)
 8000e66:	f000 fea0 	bl	8001baa <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	4823      	ldr	r0, [pc, #140]	; (8000efc <init_green_red+0xc8>)
 8000e70:	f000 fe9b 	bl	8001baa <HAL_GPIO_WritePin>
		   if(isTimerExpired(0)==1){
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 fac9 	bl	800140c <isTimerExpired>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d110      	bne.n	8000ea2 <init_green_red+0x6e>
			   	setTimer(0, yellow_on);
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <init_green_red+0xcc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fa70 	bl	800136c <setTimer>
		        status = AMBER_RED;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <init_green_red+0xd0>)
 8000e8e:	2203      	movs	r2, #3
 8000e90:	601a      	str	r2, [r3, #0]
		        setmode1(yellow_state,yellow_state);
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <init_green_red+0xd4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <init_green_red+0xd4>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fef3 	bl	8000c88 <setmode1>
			}
		   if(buttonFlags[0]==1){
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <init_green_red+0xd8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d125      	bne.n	8000ef6 <init_green_red+0xc2>
			   status = MAN_RED;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <init_green_red+0xd0>)
 8000eac:	220d      	movs	r2, #13
 8000eae:	601a      	str	r2, [r3, #0]
			   init_automatic();
 8000eb0:	f7ff f94c 	bl	800014c <init_automatic>
			   setTimer(0, time_stage_2);
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <init_green_red+0xdc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 fa56 	bl	800136c <setTimer>
			   setTimer(1, update_time_red);
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <init_green_red+0xe0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f000 fa50 	bl	800136c <setTimer>
			   clearbut();
 8000ecc:	f7ff f9b6 	bl	800023c <clearbut>
			   HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <init_green_red+0xc8>)
 8000ed6:	f000 fe68 	bl	8001baa <HAL_GPIO_WritePin>
			   	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2108      	movs	r1, #8
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <init_green_red+0xc8>)
 8000ee0:	f000 fe63 	bl	8001baa <HAL_GPIO_WritePin>
			   	current_mode = CUS_MODE;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <init_green_red+0xe4>)
 8000ee6:	2214      	movs	r2, #20
 8000ee8:	601a      	str	r2, [r3, #0]
			   	setmodecus(2);
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff ff40 	bl	8000d70 <setmodecus>
			   	duration = 0;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <init_green_red+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
		   }

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010800 	.word	0x40010800
 8000f00:	20000054 	.word	0x20000054
 8000f04:	200000bc 	.word	0x200000bc
 8000f08:	20000060 	.word	0x20000060
 8000f0c:	200000b0 	.word	0x200000b0
 8000f10:	20000068 	.word	0x20000068
 8000f14:	2000006c 	.word	0x2000006c
 8000f18:	20000080 	.word	0x20000080
 8000f1c:	200000d0 	.word	0x200000d0

08000f20 <init_amber_red>:
void init_amber_red(void){ // on vang
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	481a      	ldr	r0, [pc, #104]	; (8000f94 <init_amber_red+0x74>)
 8000f2a:	f000 fe3e 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2102      	movs	r1, #2
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <init_amber_red+0x74>)
 8000f34:	f000 fe39 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <init_amber_red+0x74>)
 8000f3e:	f000 fe34 	bl	8001baa <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000f42:	2201      	movs	r2, #1
 8000f44:	2120      	movs	r1, #32
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <init_amber_red+0x74>)
 8000f48:	f000 fe2f 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET); // Vàng tắt - Line 2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <init_amber_red+0x74>)
 8000f52:	f000 fe2a 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2108      	movs	r1, #8
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <init_amber_red+0x74>)
 8000f5c:	f000 fe25 	bl	8001baa <HAL_GPIO_WritePin>
	if(isTimerExpired(0)==1){
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 fa53 	bl	800140c <isTimerExpired>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d110      	bne.n	8000f8e <init_amber_red+0x6e>
		setTimer(0, green_on);
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <init_amber_red+0x78>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f9fa 	bl	800136c <setTimer>
		status = RED_GREEN;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <init_amber_red+0x7c>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
		setmode1(green_state,red_state);
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <init_amber_red+0x80>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <init_amber_red+0x84>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe7d 	bl	8000c88 <setmode1>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010800 	.word	0x40010800
 8000f98:	20000058 	.word	0x20000058
 8000f9c:	200000bc 	.word	0x200000bc
 8000fa0:	20000064 	.word	0x20000064
 8000fa4:	2000005c 	.word	0x2000005c

08000fa8 <init_red_green>:
void init_red_green(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000fac:	2201      	movs	r2, #1
 8000fae:	2101      	movs	r1, #1
 8000fb0:	481a      	ldr	r0, [pc, #104]	; (800101c <init_red_green+0x74>)
 8000fb2:	f000 fdfa 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2102      	movs	r1, #2
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <init_red_green+0x74>)
 8000fbc:	f000 fdf5 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);   // Xanh tắt - Line 1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <init_red_green+0x74>)
 8000fc6:	f000 fdf0 	bl	8001baa <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2120      	movs	r1, #32
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <init_red_green+0x74>)
 8000fd0:	f000 fdeb 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <init_red_green+0x74>)
 8000fda:	f000 fde6 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <init_red_green+0x74>)
 8000fe4:	f000 fde1 	bl	8001baa <HAL_GPIO_WritePin>

	if(isTimerExpired(0)==1){
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 fa0f 	bl	800140c <isTimerExpired>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d110      	bne.n	8001016 <init_red_green+0x6e>
		 	 	   // on do line 2
				setmode1(yellow_state,yellow_state);
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <init_red_green+0x78>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <init_red_green+0x78>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe42 	bl	8000c88 <setmode1>
		        setTimer(0, yellow_on);
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <init_red_green+0x7c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f9ae 	bl	800136c <setTimer>
		        status = RED_AMBER;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <init_red_green+0x80>)
 8001012:	2205      	movs	r2, #5
 8001014:	601a      	str	r2, [r3, #0]
	}
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010800 	.word	0x40010800
 8001020:	20000060 	.word	0x20000060
 8001024:	20000054 	.word	0x20000054
 8001028:	200000bc 	.word	0x200000bc

0800102c <init_red_amber>:
void init_red_amber(void){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8001030:	2201      	movs	r2, #1
 8001032:	2101      	movs	r1, #1
 8001034:	481a      	ldr	r0, [pc, #104]	; (80010a0 <init_red_amber+0x74>)
 8001036:	f000 fdb8 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET); // Vàng tắt - Line 1
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4818      	ldr	r0, [pc, #96]	; (80010a0 <init_red_amber+0x74>)
 8001040:	f000 fdb3 	bl	8001baa <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8001044:	2201      	movs	r2, #1
 8001046:	2104      	movs	r1, #4
 8001048:	4815      	ldr	r0, [pc, #84]	; (80010a0 <init_red_amber+0x74>)
 800104a:	f000 fdae 	bl	8001baa <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	4813      	ldr	r0, [pc, #76]	; (80010a0 <init_red_amber+0x74>)
 8001054:	f000 fda9 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8001058:	2201      	movs	r2, #1
 800105a:	2110      	movs	r1, #16
 800105c:	4810      	ldr	r0, [pc, #64]	; (80010a0 <init_red_amber+0x74>)
 800105e:	f000 fda4 	bl	8001baa <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2108      	movs	r1, #8
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <init_red_amber+0x74>)
 8001068:	f000 fd9f 	bl	8001baa <HAL_GPIO_WritePin>

	if(isTimerExpired(0)==1){
 800106c:	2000      	movs	r0, #0
 800106e:	f000 f9cd 	bl	800140c <isTimerExpired>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d110      	bne.n	800109a <init_red_amber+0x6e>
		 setTimer(0, green_on);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <init_red_amber+0x78>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f974 	bl	800136c <setTimer>
		 status = GREEN_RED;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <init_red_amber+0x7c>)
 8001086:	2202      	movs	r2, #2
 8001088:	601a      	str	r2, [r3, #0]
		 setmode1(red_state,green_state);
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <init_red_amber+0x80>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <init_red_amber+0x84>)
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fdf7 	bl	8000c88 <setmode1>
	}
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010800 	.word	0x40010800
 80010a4:	20000058 	.word	0x20000058
 80010a8:	200000bc 	.word	0x200000bc
 80010ac:	2000005c 	.word	0x2000005c
 80010b0:	20000064 	.word	0x20000064

080010b4 <model_2>:
void model_2(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if(buttonFlags[1]==1){
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <model_2+0x9c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d144      	bne.n	800114a <model_2+0x96>
			duration++;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <model_2+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a23      	ldr	r2, [pc, #140]	; (8001154 <model_2+0xa0>)
 80010c8:	6013      	str	r3, [r2, #0]
			if(duration!=0){
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <model_2+0xa0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d031      	beq.n	8001136 <model_2+0x82>
				switch(status){
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <model_2+0xa4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b0f      	cmp	r3, #15
 80010d8:	d013      	beq.n	8001102 <model_2+0x4e>
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	dc2c      	bgt.n	8001138 <model_2+0x84>
 80010de:	2b0d      	cmp	r3, #13
 80010e0:	d002      	beq.n	80010e8 <model_2+0x34>
 80010e2:	2b0e      	cmp	r3, #14
 80010e4:	d01a      	beq.n	800111c <model_2+0x68>
 80010e6:	e027      	b.n	8001138 <model_2+0x84>
						case MAN_RED:
							//decrease_time_mode1();
							red_on = duration*1000;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <model_2+0xa0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <model_2+0xa8>)
 80010f6:	6013      	str	r3, [r2, #0]
							red_state = duration;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <model_2+0xa0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a18      	ldr	r2, [pc, #96]	; (8001160 <model_2+0xac>)
 80010fe:	6013      	str	r3, [r2, #0]
							break;
 8001100:	e01a      	b.n	8001138 <model_2+0x84>
						case MAN_YELLOW:
							yellow_on = duration*1000;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <model_2+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <model_2+0xb0>)
 8001110:	6013      	str	r3, [r2, #0]
							yellow_state = duration;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <model_2+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <model_2+0xb4>)
 8001118:	6013      	str	r3, [r2, #0]
							break;
 800111a:	e00d      	b.n	8001138 <model_2+0x84>
						case MAN_GREEN:
							green_on = duration*1000;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <model_2+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <model_2+0xb8>)
 800112a:	6013      	str	r3, [r2, #0]
							green_state = duration;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <model_2+0xa0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <model_2+0xbc>)
 8001132:	6013      	str	r3, [r2, #0]
													break;
 8001134:	e000      	b.n	8001138 <model_2+0x84>
			}}
 8001136:	bf00      	nop
			clearbut();
 8001138:	f7ff f880 	bl	800023c <clearbut>
			if(duration>99){
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <model_2+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b63      	cmp	r3, #99	; 0x63
 8001142:	dd02      	ble.n	800114a <model_2+0x96>
				duration=1;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <model_2+0xa0>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
			}
		}
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000b0 	.word	0x200000b0
 8001154:	200000d0 	.word	0x200000d0
 8001158:	200000bc 	.word	0x200000bc
 800115c:	20000050 	.word	0x20000050
 8001160:	2000005c 	.word	0x2000005c
 8001164:	20000054 	.word	0x20000054
 8001168:	20000060 	.word	0x20000060
 800116c:	20000058 	.word	0x20000058
 8001170:	20000064 	.word	0x20000064

08001174 <init_man_red>:

void init_man_red(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

	if(isTimerExpired(1)==1){
 8001178:	2001      	movs	r0, #1
 800117a:	f000 f947 	bl	800140c <isTimerExpired>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d10d      	bne.n	80011a0 <init_man_red+0x2c>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 8001184:	2101      	movs	r1, #1
 8001186:	4825      	ldr	r0, [pc, #148]	; (800121c <init_man_red+0xa8>)
 8001188:	f000 fd27 	bl	8001bda <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 800118c:	2108      	movs	r1, #8
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <init_man_red+0xa8>)
 8001190:	f000 fd23 	bl	8001bda <HAL_GPIO_TogglePin>
		setTimer(1, update_time_red);
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <init_man_red+0xac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	2001      	movs	r0, #1
 800119c:	f000 f8e6 	bl	800136c <setTimer>
	}
	if(buttonFlags[0]==1){
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <init_man_red+0xb0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d123      	bne.n	80011f0 <init_man_red+0x7c>
		buttonFlags[0]= 0;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <init_man_red+0xb0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
		status = MAN_YELLOW;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <init_man_red+0xb4>)
 80011b0:	220f      	movs	r2, #15
 80011b2:	601a      	str	r2, [r3, #0]
		setTimer(0,time_stage_2);
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <init_man_red+0xb8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f8d6 	bl	800136c <setTimer>
		init_automatic();
 80011c0:	f7fe ffc4 	bl	800014c <init_automatic>
		setTimer(1, update_time_yellow);
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <init_man_red+0xbc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 f8ce 	bl	800136c <setTimer>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4811      	ldr	r0, [pc, #68]	; (800121c <init_man_red+0xa8>)
 80011d6:	f000 fce8 	bl	8001baa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <init_man_red+0xa8>)
 80011e0:	f000 fce3 	bl	8001baa <HAL_GPIO_WritePin>
			setmodecus(3);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff fdc3 	bl	8000d70 <setmodecus>
			duration = 0;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <init_man_red+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

	}
	if(isTimerExpired(0)==1){
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f90b 	bl	800140c <isTimerExpired>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10a      	bne.n	8001212 <init_man_red+0x9e>
		status = GREEN_RED;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <init_man_red+0xb4>)
 80011fe:	2202      	movs	r2, #2
 8001200:	601a      	str	r2, [r3, #0]
		setTimer(0, green_on);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <init_man_red+0xc4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	2000      	movs	r0, #0
 800120a:	f000 f8af 	bl	800136c <setTimer>
		init_automatic();
 800120e:	f7fe ff9d 	bl	800014c <init_automatic>
	}
	return_mode1();
 8001212:	f7ff fd09 	bl	8000c28 <return_mode1>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800
 8001220:	2000006c 	.word	0x2000006c
 8001224:	200000b0 	.word	0x200000b0
 8001228:	200000bc 	.word	0x200000bc
 800122c:	20000068 	.word	0x20000068
 8001230:	20000070 	.word	0x20000070
 8001234:	200000d0 	.word	0x200000d0
 8001238:	20000058 	.word	0x20000058

0800123c <init_man_yellow>:
void init_man_yellow(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

	if (isTimerExpired(1) == 1) {
 8001240:	2001      	movs	r0, #1
 8001242:	f000 f8e3 	bl	800140c <isTimerExpired>
 8001246:	4603      	mov	r3, r0
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10d      	bne.n	8001268 <init_man_yellow+0x2c>
	    HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 800124c:	2102      	movs	r1, #2
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <init_man_yellow+0x84>)
 8001250:	f000 fcc3 	bl	8001bda <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 8001254:	2110      	movs	r1, #16
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <init_man_yellow+0x84>)
 8001258:	f000 fcbf 	bl	8001bda <HAL_GPIO_TogglePin>
	    setTimer(1, update_time_yellow);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <init_man_yellow+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	2001      	movs	r0, #1
 8001264:	f000 f882 	bl	800136c <setTimer>
	}
	if(buttonFlags[0]==1){
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <init_man_yellow+0x8c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d123      	bne.n	80012b8 <init_man_yellow+0x7c>
			buttonFlags[0]= 0;
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <init_man_yellow+0x8c>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
			status = MAN_GREEN;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <init_man_yellow+0x90>)
 8001278:	220e      	movs	r2, #14
 800127a:	601a      	str	r2, [r3, #0]
			setTimer(0,time_stage_2);
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <init_man_yellow+0x94>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f872 	bl	800136c <setTimer>
			init_automatic();
 8001288:	f7fe ff60 	bl	800014c <init_automatic>
			setTimer(1, update_time_green);
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <init_man_yellow+0x98>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	2001      	movs	r0, #1
 8001294:	f000 f86a 	bl	800136c <setTimer>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2104      	movs	r1, #4
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <init_man_yellow+0x84>)
 800129e:	f000 fc84 	bl	8001baa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <init_man_yellow+0x84>)
 80012a8:	f000 fc7f 	bl	8001baa <HAL_GPIO_WritePin>
				setmodecus(4);
 80012ac:	2004      	movs	r0, #4
 80012ae:	f7ff fd5f 	bl	8000d70 <setmodecus>
				duration = 0;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <init_man_yellow+0x9c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

		}
	return_mode1();
 80012b8:	f7ff fcb6 	bl	8000c28 <return_mode1>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40010800 	.word	0x40010800
 80012c4:	20000070 	.word	0x20000070
 80012c8:	200000b0 	.word	0x200000b0
 80012cc:	200000bc 	.word	0x200000bc
 80012d0:	20000068 	.word	0x20000068
 80012d4:	20000074 	.word	0x20000074
 80012d8:	200000d0 	.word	0x200000d0

080012dc <init_man_green>:
void init_man_green(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	if (isTimerExpired(1) == 1) {
 80012e0:	2001      	movs	r0, #1
 80012e2:	f000 f893 	bl	800140c <isTimerExpired>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10d      	bne.n	8001308 <init_man_green+0x2c>
	    HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 80012ec:	2104      	movs	r1, #4
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <init_man_green+0x70>)
 80012f0:	f000 fc73 	bl	8001bda <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 80012f4:	2120      	movs	r1, #32
 80012f6:	4815      	ldr	r0, [pc, #84]	; (800134c <init_man_green+0x70>)
 80012f8:	f000 fc6f 	bl	8001bda <HAL_GPIO_TogglePin>
	    setTimer(1, update_time_green);
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <init_man_green+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	2001      	movs	r0, #1
 8001304:	f000 f832 	bl	800136c <setTimer>
	}
	if(buttonFlags[0]==1){
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <init_man_green+0x78>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d118      	bne.n	8001342 <init_man_green+0x66>
			buttonFlags[0]= 0;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <init_man_green+0x78>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
			status = GREEN_RED;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <init_man_green+0x7c>)
 8001318:	2202      	movs	r2, #2
 800131a:	601a      	str	r2, [r3, #0]
			setTimer(0,green_on);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <init_man_green+0x80>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f822 	bl	800136c <setTimer>
			init_automatic();
 8001328:	f7fe ff10 	bl	800014c <init_automatic>
			current_mode = MODE_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <init_man_green+0x84>)
 800132e:	2213      	movs	r2, #19
 8001330:	601a      	str	r2, [r3, #0]
			setmode1(red_state,green_state);
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <init_man_green+0x88>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <init_man_green+0x8c>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fca3 	bl	8000c88 <setmode1>
		}
	return_mode1();
 8001342:	f7ff fc71 	bl	8000c28 <return_mode1>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40010800 	.word	0x40010800
 8001350:	20000074 	.word	0x20000074
 8001354:	200000b0 	.word	0x200000b0
 8001358:	200000bc 	.word	0x200000bc
 800135c:	20000058 	.word	0x20000058
 8001360:	20000080 	.word	0x20000080
 8001364:	2000005c 	.word	0x2000005c
 8001368:	20000064 	.word	0x20000064

0800136c <setTimer>:
#define MAX_COUNTER 10

int timerCounter[MAX_COUNTER];
int timerFlag[MAX_COUNTER];

void setTimer(int index, int counter){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
    timerCounter[index] = counter / 10;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <setTimer+0x34>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	1092      	asrs	r2, r2, #2
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad2      	subs	r2, r2, r3
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <setTimer+0x38>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    timerFlag[index] = 0;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <setTimer+0x3c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2100      	movs	r1, #0
 8001392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	66666667 	.word	0x66666667
 80013a4:	20000144 	.word	0x20000144
 80013a8:	2000011c 	.word	0x2000011c

080013ac <timerRun>:

void timerRun(){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX_COUNTER; i++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e01c      	b.n	80013f2 <timerRun+0x46>
        if(timerCounter[i] > 0){
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <timerRun+0x58>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd08      	ble.n	80013d6 <timerRun+0x2a>
            timerCounter[i]--;
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <timerRun+0x58>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <timerRun+0x58>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        if(timerCounter[i] <= 0){
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <timerRun+0x58>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc04      	bgt.n	80013ec <timerRun+0x40>
            timerFlag[i] = 1;
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <timerRun+0x5c>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2101      	movs	r1, #1
 80013e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < MAX_COUNTER; i++){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	dddf      	ble.n	80013b8 <timerRun+0xc>
        }
    }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000144 	.word	0x20000144
 8001408:	2000011c 	.word	0x2000011c

0800140c <isTimerExpired>:

int isTimerExpired(int index){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    if(timerFlag[index] == 1){
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <isTimerExpired+0x30>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <isTimerExpired+0x22>
        timerFlag[index] = 0;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <isTimerExpired+0x30>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2100      	movs	r1, #0
 8001426:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <isTimerExpired+0x24>
    }
    return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000011c 	.word	0x2000011c

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_MspInit+0x5c>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_MspInit+0x5c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_MspInit+0x5c>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x5c>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_MspInit+0x5c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x5c>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_MspInit+0x60>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_MspInit+0x60>)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000

080014a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d113      	bne.n	80014de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	201c      	movs	r0, #28
 80014d4:	f000 f9a1 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d8:	201c      	movs	r0, #28
 80014da:	f000 f9ba 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f87f 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM2_IRQHandler+0x10>)
 8001542:	f000 ffdb 	bl	80024fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000d4 	.word	0x200000d4

08001550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800155c:	f7ff fff8 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001562:	490c      	ldr	r1, [pc, #48]	; (8001594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001564:	4a0c      	ldr	r2, [pc, #48]	; (8001598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001578:	4c09      	ldr	r4, [pc, #36]	; (80015a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f001 faf9 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158a:	f7fe ff09 	bl	80003a0 <main>
  bx lr
 800158e:	4770      	bx	lr
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001598:	08002c18 	.word	0x08002c18
  ldr r2, =_sbss
 800159c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015a0:	20000170 	.word	0x20000170

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f923 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff ff3c 	bl	8001440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f903 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000088 	.word	0x20000088
 800162c:	20000090 	.word	0x20000090
 8001630:	2000008c 	.word	0x2000008c

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000090 	.word	0x20000090
 8001654:	2000016c 	.word	0x2000016c

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	2000016c 	.word	0x2000016c

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e148      	b.n	8001b2e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8137 	bne.w	8001b28 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4aa3      	ldr	r2, [pc, #652]	; (8001b4c <HAL_GPIO_Init+0x2c4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4aa1      	ldr	r2, [pc, #644]	; (8001b4c <HAL_GPIO_Init+0x2c4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4aa1      	ldr	r2, [pc, #644]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a9f      	ldr	r2, [pc, #636]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a9f      	ldr	r2, [pc, #636]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a9d      	ldr	r2, [pc, #628]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a9d      	ldr	r2, [pc, #628]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a9b      	ldr	r2, [pc, #620]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a9b      	ldr	r2, [pc, #620]	; (8001b5c <HAL_GPIO_Init+0x2d4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a99      	ldr	r2, [pc, #612]	; (8001b5c <HAL_GPIO_Init+0x2d4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a82      	ldr	r2, [pc, #520]	; (8001b60 <HAL_GPIO_Init+0x2d8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8090 	beq.w	8001b28 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a55      	ldr	r2, [pc, #340]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_GPIO_Init+0x2dc>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a51      	ldr	r2, [pc, #324]	; (8001b68 <HAL_GPIO_Init+0x2e0>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x2e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1dc>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1d8>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1e2>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7a:	493b      	ldr	r1, [pc, #236]	; (8001b68 <HAL_GPIO_Init+0x2e0>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4933      	ldr	r1, [pc, #204]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4929      	ldr	r1, [pc, #164]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4923      	ldr	r1, [pc, #140]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	491f      	ldr	r1, [pc, #124]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4919      	ldr	r1, [pc, #100]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4915      	ldr	r1, [pc, #84]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f47f aeaf 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	372c      	adds	r7, #44	; 0x2c
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	10320000 	.word	0x10320000
 8001b50:	10310000 	.word	0x10310000
 8001b54:	10220000 	.word	0x10220000
 8001b58:	10210000 	.word	0x10210000
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	10110000 	.word	0x10110000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40010400 	.word	0x40010400

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bba:	787b      	ldrb	r3, [r7, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	041a      	lsls	r2, r3, #16
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e26c      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8087 	beq.w	8001d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c2c:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d00c      	beq.n	8001c52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c38:	4b8f      	ldr	r3, [pc, #572]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d112      	bne.n	8001c6a <HAL_RCC_OscConfig+0x5e>
 8001c44:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	d10b      	bne.n	8001c6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c52:	4b89      	ldr	r3, [pc, #548]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d06c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x12c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d168      	bne.n	8001d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e246      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c72:	d106      	bne.n	8001c82 <HAL_RCC_OscConfig+0x76>
 8001c74:	4b80      	ldr	r3, [pc, #512]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a7f      	ldr	r2, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e02e      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd4>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x98>
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7a      	ldr	r2, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b78      	ldr	r3, [pc, #480]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e01d      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xbc>
 8001cae:	4b72      	ldr	r3, [pc, #456]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a71      	ldr	r2, [pc, #452]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a6e      	ldr	r2, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0xd4>
 8001cc8:	4b6b      	ldr	r3, [pc, #428]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b68      	ldr	r3, [pc, #416]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a67      	ldr	r2, [pc, #412]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fcb6 	bl	8001658 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fcb2 	bl	8001658 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1fa      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xe4>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fca2 	bl	8001658 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc9e 	bl	8001658 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1e6      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x10c>
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d063      	beq.n	8001e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d46:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d11c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x18c>
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x176>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1ba      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4939      	ldr	r1, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	e03a      	b.n	8001e0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff fc57 	bl	8001658 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dae:	f7ff fc53 	bl	8001658 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e19b      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4927      	ldr	r1, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_RCC_OscConfig+0x270>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fc36 	bl	8001658 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fc32 	bl	8001658 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e17a      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d03a      	beq.n	8001e90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d019      	beq.n	8001e56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7ff fc16 	bl	8001658 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fc12 	bl	8001658 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e15a      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f000 fa9a 	bl	8002388 <RCC_Delay>
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fbfc 	bl	8001658 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e62:	e00f      	b.n	8001e84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fbf8 	bl	8001658 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d908      	bls.n	8001e84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e140      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	42420000 	.word	0x42420000
 8001e80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	4b9e      	ldr	r3, [pc, #632]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1e9      	bne.n	8001e64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80a6 	beq.w	8001fea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea2:	4b97      	ldr	r3, [pc, #604]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10d      	bne.n	8001eca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b94      	ldr	r3, [pc, #592]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a93      	ldr	r2, [pc, #588]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d118      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a8a      	ldr	r2, [pc, #552]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fbb9 	bl	8001658 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7ff fbb5 	bl	8001658 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0fd      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x312>
 8001f10:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	e02d      	b.n	8001f7a <HAL_RCC_OscConfig+0x36e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x334>
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f023 0301 	bic.w	r3, r3, #1
 8001f30:	6213      	str	r3, [r2, #32]
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0304 	bic.w	r3, r3, #4
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	e01c      	b.n	8001f7a <HAL_RCC_OscConfig+0x36e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d10c      	bne.n	8001f62 <HAL_RCC_OscConfig+0x356>
 8001f48:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a6c      	ldr	r2, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a69      	ldr	r2, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	e00b      	b.n	8001f7a <HAL_RCC_OscConfig+0x36e>
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b64      	ldr	r3, [pc, #400]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d015      	beq.n	8001fae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb69 	bl	8001658 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fb65 	bl	8001658 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0ab      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RCC_OscConfig+0x37e>
 8001fac:	e014      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7ff fb53 	bl	8001658 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff fb4f 	bl	8001658 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e095      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ee      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	4b48      	ldr	r3, [pc, #288]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a47      	ldr	r2, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8081 	beq.w	80020f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff4:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d061      	beq.n	80020c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d146      	bne.n	8002096 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x4fc>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fb23 	bl	8001658 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff fb1f 	bl	8001658 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e067      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d108      	bne.n	8002050 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203e:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	492d      	ldr	r1, [pc, #180]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a19      	ldr	r1, [r3, #32]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	430b      	orrs	r3, r1
 8002062:	4927      	ldr	r1, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x4fc>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff faf3 	bl	8001658 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff faef 	bl	8001658 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e037      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x46a>
 8002094:	e02f      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_RCC_OscConfig+0x4fc>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fadc 	bl	8001658 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff fad8 	bl	8001658 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e020      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x498>
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e013      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	42420060 	.word	0x42420060

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fa2c 	bl	8001658 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fa28 	bl	8001658 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f98a 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08002bec 	.word	0x08002bec
 80022d8:	20000088 	.word	0x20000088
 80022dc:	2000008c 	.word	0x2000008c

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x30>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x36>
 800230e:	e027      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	e027      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a17      	ldr	r2, [pc, #92]	; (800237c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	fb02 f203 	mul.w	r2, r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	08002bfc 	.word	0x08002bfc
 8002380:	08002c0c 	.word	0x08002c0c
 8002384:	003d0900 	.word	0x003d0900

08002388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCC_Delay+0x34>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <RCC_Delay+0x38>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023a4:	bf00      	nop
  }
  while (Delay --);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e5a      	subs	r2, r3, #1
 80023aa:	60fa      	str	r2, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f9      	bne.n	80023a4 <RCC_Delay+0x1c>
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000088 	.word	0x20000088
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff f85a 	bl	80014a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 fa56 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e035      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_TIM_Base_Start_IT+0x90>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x4e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <HAL_TIM_Base_Start_IT+0x94>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b06      	cmp	r3, #6
 80024c2:	d010      	beq.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40000400 	.word	0x40000400

080024fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d020      	beq.n	8002560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0202 	mvn.w	r2, #2
 8002530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f998 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f98b 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f99a 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0204 	mvn.w	r2, #4
 800257c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f972 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f965 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f974 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0208 	mvn.w	r2, #8
 80025c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f94c 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 80025e4:	e005      	b.n	80025f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f93f 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f94e 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d020      	beq.n	8002644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0210 	mvn.w	r2, #16
 8002614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2208      	movs	r2, #8
 800261a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f926 	bl	800287c <HAL_TIM_IC_CaptureCallback>
 8002630:	e005      	b.n	800263e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f919 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f928 	bl	800288e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0201 	mvn.w	r2, #1
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fd ffc6 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa6f 	bl	8002b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8f8 	bl	80028a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0220 	mvn.w	r2, #32
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa42 	bl	8002b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b4      	b.n	8002862 <HAL_TIM_ConfigClockSource+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	f000 8086 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x172>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa6>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xfa>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x13a>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f000 f96a 	bl	8002a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04f      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f000 f953 	bl	8002a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 f8ca 	bl	800297c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	; 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f921 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f8e8 	bl	80029d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	; 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f911 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002814:	e01c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f8aa 	bl	800297c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f901 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002834:	e00c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 f8f8 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002846:	e003      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e000      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800284e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	; (8002978 <TIM_Base_SetConfig+0xc4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <TIM_Base_SetConfig+0xc0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]
  }
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400

0800297c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0201 	bic.w	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 030a 	bic.w	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0210 	bic.w	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	621a      	str	r2, [r3, #32]
}
 8002a2c:	bf00      	nop
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f043 0307 	orr.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	021a      	lsls	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	609a      	str	r2, [r3, #8]
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e041      	b.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10c      	bne.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400

08002b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	2600      	movs	r6, #0
 8002b80:	4d0c      	ldr	r5, [pc, #48]	; (8002bb4 <__libc_init_array+0x38>)
 8002b82:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	f000 f822 	bl	8002bd4 <_init>
 8002b90:	2600      	movs	r6, #0
 8002b92:	4d0a      	ldr	r5, [pc, #40]	; (8002bbc <__libc_init_array+0x40>)
 8002b94:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x44>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08002c10 	.word	0x08002c10
 8002bb8:	08002c10 	.word	0x08002c10
 8002bbc:	08002c10 	.word	0x08002c10
 8002bc0:	08002c14 	.word	0x08002c14

08002bc4 <memset>:
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4402      	add	r2, r0
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d100      	bne.n	8002bce <memset+0xa>
 8002bcc:	4770      	bx	lr
 8002bce:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd2:	e7f9      	b.n	8002bc8 <memset+0x4>

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
