
lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002970  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa0  08002aa0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa0  08002aa0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000084  08002b2c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002b2c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000985d  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bae  00000000  00000000  0002990a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d3e  00000000  00000000  0002c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba4c  00000000  00000000  00043626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824c2  00000000  00000000  0004f072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000299c  00000000  00000000  000d1588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a64 	.word	0x08002a64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002a64 	.word	0x08002a64

0800014c <init_automatic>:
 *      Author: admim
 */

#include "automatic.h"

void init_automatic(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	 	 HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	480e      	ldr	r0, [pc, #56]	; (8000190 <init_automatic+0x44>)
 8000156:	f001 fc70 	bl	8001a3a <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	480c      	ldr	r0, [pc, #48]	; (8000190 <init_automatic+0x44>)
 8000160:	f001 fc6b 	bl	8001a3a <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000164:	2201      	movs	r2, #1
 8000166:	2104      	movs	r1, #4
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <init_automatic+0x44>)
 800016a:	f001 fc66 	bl	8001a3a <HAL_GPIO_WritePin>

	    // Cấu hình Line 2
	    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 800016e:	2201      	movs	r2, #1
 8000170:	2120      	movs	r1, #32
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <init_automatic+0x44>)
 8000174:	f001 fc61 	bl	8001a3a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000178:	2201      	movs	r2, #1
 800017a:	2110      	movs	r1, #16
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <init_automatic+0x44>)
 800017e:	f001 fc5c 	bl	8001a3a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2108      	movs	r1, #8
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <init_automatic+0x44>)
 8000188:	f001 fc57 	bl	8001a3a <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <automatic_run>:
void automatic_run(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	switch(status){
 8000198:	4b19      	ldr	r3, [pc, #100]	; (8000200 <automatic_run+0x6c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	3b01      	subs	r3, #1
 800019e:	2b04      	cmp	r3, #4
 80001a0:	d82b      	bhi.n	80001fa <automatic_run+0x66>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <automatic_run+0x14>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001bd 	.word	0x080001bd
 80001ac:	080001e3 	.word	0x080001e3
 80001b0:	080001e9 	.word	0x080001e9
 80001b4:	080001ef 	.word	0x080001ef
 80001b8:	080001f5 	.word	0x080001f5
	case INIT:
		init_automatic();
 80001bc:	f7ff ffc6 	bl	800014c <init_automatic>
		setTimer(0, green_on);
 80001c0:	4b10      	ldr	r3, [pc, #64]	; (8000204 <automatic_run+0x70>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4619      	mov	r1, r3
 80001c6:	2000      	movs	r0, #0
 80001c8:	f001 f818 	bl	80011fc <setTimer>
		status = GREEN_RED;
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <automatic_run+0x6c>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	601a      	str	r2, [r3, #0]
		current_mode =  MODE_1;
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <automatic_run+0x74>)
 80001d4:	2213      	movs	r2, #19
 80001d6:	601a      	str	r2, [r3, #0]
		setmode1(5,2);
 80001d8:	2102      	movs	r1, #2
 80001da:	2005      	movs	r0, #5
 80001dc:	f000 fd0c 	bl	8000bf8 <setmode1>
		break;
 80001e0:	e00c      	b.n	80001fc <automatic_run+0x68>
	case GREEN_RED:
		init_green_red();
 80001e2:	f000 fda9 	bl	8000d38 <init_green_red>
		break;
 80001e6:	e009      	b.n	80001fc <automatic_run+0x68>
	case AMBER_RED:
		init_amber_red();
 80001e8:	f000 fe16 	bl	8000e18 <init_amber_red>
		break;
 80001ec:	e006      	b.n	80001fc <automatic_run+0x68>
	case RED_GREEN:
		init_red_green();
 80001ee:	f000 fe4f 	bl	8000e90 <init_red_green>
		break;
 80001f2:	e003      	b.n	80001fc <automatic_run+0x68>
	case RED_AMBER:
		init_red_amber();
 80001f4:	f000 fe88 	bl	8000f08 <init_red_amber>
		break;
 80001f8:	e000      	b.n	80001fc <automatic_run+0x68>
	default:
		break;
 80001fa:	bf00      	nop
	}
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	200000ac 	.word	0x200000ac
 8000204:	20000054 	.word	0x20000054
 8000208:	20000070 	.word	0x20000070

0800020c <subKeyProcess>:

// Cấu hình chân GPIO tương ứng với từng nút
GPIO_TypeDef* buttonPorts[NUM_OF_BUTTONS] = {but1_GPIO_Port, GPIOC, GPIOC};
uint16_t buttonPins[NUM_OF_BUTTONS] = {but1_Pin, but2_Pin, but3_Pin};

void subKeyProcess(int index) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    // Đặt cờ cho nút tương ứng khi nút được nhấn
    buttonFlags[index] = 1; // Đánh dấu rằng nút đã được nhấn
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <subKeyProcess+0x1c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2101      	movs	r1, #1
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Xử lý khi nút được nhấn
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	200000a0 	.word	0x200000a0

0800022c <clearbut>:
void clearbut(){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
	buttonFlags[0] = 0;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <clearbut+0x20>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	buttonFlags[1] = 0;
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <clearbut+0x20>)
 8000238:	2200      	movs	r2, #0
 800023a:	605a      	str	r2, [r3, #4]
	buttonFlags[2] = 0;
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <clearbut+0x20>)
 800023e:	2200      	movs	r2, #0
 8000240:	609a      	str	r2, [r3, #8]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	200000a0 	.word	0x200000a0

08000250 <getKeyInput>:

void getKeyInput() {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e012      	b.n	8000282 <getKeyInput+0x32>
        // Cập nhật các thanh ghi trạng thái cho chống rung
        KeyReg0[i] = KeyReg1[i];
 800025c:	4a48      	ldr	r2, [pc, #288]	; (8000380 <getKeyInput+0x130>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4947      	ldr	r1, [pc, #284]	; (8000384 <getKeyInput+0x134>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        KeyReg1[i] = KeyReg2[i];}
 800026c:	4a46      	ldr	r2, [pc, #280]	; (8000388 <getKeyInput+0x138>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000274:	4942      	ldr	r1, [pc, #264]	; (8000380 <getKeyInput+0x130>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b02      	cmp	r3, #2
 8000286:	dde9      	ble.n	800025c <getKeyInput+0xc>

        KeyReg2[0] = HAL_GPIO_ReadPin(buttonPorts[0], buttonPins[0]);
 8000288:	4b40      	ldr	r3, [pc, #256]	; (800038c <getKeyInput+0x13c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a40      	ldr	r2, [pc, #256]	; (8000390 <getKeyInput+0x140>)
 800028e:	8812      	ldrh	r2, [r2, #0]
 8000290:	4611      	mov	r1, r2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fbba 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <getKeyInput+0x138>)
 800029e:	601a      	str	r2, [r3, #0]
        KeyReg2[1] = HAL_GPIO_ReadPin(buttonPorts[1], buttonPins[1]);
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <getKeyInput+0x13c>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a3a      	ldr	r2, [pc, #232]	; (8000390 <getKeyInput+0x140>)
 80002a6:	8852      	ldrh	r2, [r2, #2]
 80002a8:	4611      	mov	r1, r2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fbae 	bl	8001a0c <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b34      	ldr	r3, [pc, #208]	; (8000388 <getKeyInput+0x138>)
 80002b6:	605a      	str	r2, [r3, #4]
        KeyReg2[2] = HAL_GPIO_ReadPin(buttonPorts[2], buttonPins[2]);
 80002b8:	4b34      	ldr	r3, [pc, #208]	; (800038c <getKeyInput+0x13c>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a34      	ldr	r2, [pc, #208]	; (8000390 <getKeyInput+0x140>)
 80002be:	8892      	ldrh	r2, [r2, #4]
 80002c0:	4611      	mov	r1, r2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fba2 	bl	8001a0c <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <getKeyInput+0x138>)
 80002ce:	609a      	str	r2, [r3, #8]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 80002d0:	2300      	movs	r3, #0
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	e04b      	b.n	800036e <getKeyInput+0x11e>
        if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80002d6:	4a2b      	ldr	r2, [pc, #172]	; (8000384 <getKeyInput+0x134>)
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002de:	4928      	ldr	r1, [pc, #160]	; (8000380 <getKeyInput+0x130>)
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d13e      	bne.n	8000368 <getKeyInput+0x118>
 80002ea:	4a25      	ldr	r2, [pc, #148]	; (8000380 <getKeyInput+0x130>)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f2:	4925      	ldr	r1, [pc, #148]	; (8000388 <getKeyInput+0x138>)
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d134      	bne.n	8000368 <getKeyInput+0x118>
            if (KeyReg3[i] != KeyReg2[i]) {  // Phát hiện thay đổi trạng thái
 80002fe:	4a25      	ldr	r2, [pc, #148]	; (8000394 <getKeyInput+0x144>)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000306:	4920      	ldr	r1, [pc, #128]	; (8000388 <getKeyInput+0x138>)
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030e:	429a      	cmp	r2, r3
 8000310:	d016      	beq.n	8000340 <getKeyInput+0xf0>
                KeyReg3[i] = KeyReg2[i];
 8000312:	4a1d      	ldr	r2, [pc, #116]	; (8000388 <getKeyInput+0x138>)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031a:	491e      	ldr	r1, [pc, #120]	; (8000394 <getKeyInput+0x144>)
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg2[i] == PRESSED_STATE) {  // Nút được nhấn
 8000322:	4a19      	ldr	r2, [pc, #100]	; (8000388 <getKeyInput+0x138>)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d11c      	bne.n	8000368 <getKeyInput+0x118>
                    TimerForKeyPress[i] = 200;  // Reset timer cho nhấn đè
 800032e:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <getKeyInput+0x148>)
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	21c8      	movs	r1, #200	; 0xc8
 8000334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    subKeyProcess(i);  // Gọi hàm xử lý khi nhấn
 8000338:	6838      	ldr	r0, [r7, #0]
 800033a:	f7ff ff67 	bl	800020c <subKeyProcess>
 800033e:	e013      	b.n	8000368 <getKeyInput+0x118>
                }
            } else {  // Kiểm tra nhấn đè
            		TimerForKeyPress[i]--;
 8000340:	4a15      	ldr	r2, [pc, #84]	; (8000398 <getKeyInput+0x148>)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	1e5a      	subs	r2, r3, #1
 800034a:	4913      	ldr	r1, [pc, #76]	; (8000398 <getKeyInput+0x148>)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            		if(TimerForKeyPress[i]==0){
 8000352:	4a11      	ldr	r2, [pc, #68]	; (8000398 <getKeyInput+0x148>)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d104      	bne.n	8000368 <getKeyInput+0x118>
            			KeyReg3[i] = NORMAL_STATE;
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <getKeyInput+0x144>)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2101      	movs	r1, #1
 8000364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b02      	cmp	r3, #2
 8000372:	ddb0      	ble.n	80002d6 <getKeyInput+0x86>
            		}
            }
        	}
        }
    }
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000000c 	.word	0x2000000c
 8000384:	20000000 	.word	0x20000000
 8000388:	20000018 	.word	0x20000018
 800038c:	2000003c 	.word	0x2000003c
 8000390:	20000048 	.word	0x20000048
 8000394:	20000024 	.word	0x20000024
 8000398:	20000030 	.word	0x20000030

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f001 f84a 	bl	8001438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f820 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 f8a6 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003ac:	f000 f858 	bl	8000460 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <main+0x44>)
 80003b2:	f001 ff9f 	bl	80022f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <main+0x48>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
  setTimer(2, 250);
 80003bc:	21fa      	movs	r1, #250	; 0xfa
 80003be:	2002      	movs	r0, #2
 80003c0:	f000 ff1c 	bl	80011fc <setTimer>
  setTimer(4,1000);
 80003c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003c8:	2004      	movs	r0, #4
 80003ca:	f000 ff17 	bl	80011fc <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  automatic_run();
 80003ce:	f7ff fee1 	bl	8000194 <automatic_run>
	  run_manu();
 80003d2:	f000 f91f 	bl	8000614 <run_manu>
	  switch_mode();
 80003d6:	f000 f939 	bl	800064c <switch_mode>
	  scanled();
 80003da:	f000 fbc9 	bl	8000b70 <scanled>
	  automatic_run();
 80003de:	e7f6      	b.n	80003ce <main+0x32>
 80003e0:	200000c4 	.word	0x200000c4
 80003e4:	200000ac 	.word	0x200000ac

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b090      	sub	sp, #64	; 0x40
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fb2c 	bl	8002a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040a:	2302      	movs	r3, #2
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040e:	2301      	movs	r3, #1
 8000410:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000412:	2310      	movs	r3, #16
 8000414:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000416:	2300      	movs	r3, #0
 8000418:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fb3c 	bl	8001a9c <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800042a:	f000 f8ed 	bl	8000608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fda8 	bl	8001f9c <HAL_RCC_ClockConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000452:	f000 f8d9 	bl	8000608 <Error_Handler>
  }
}
 8000456:	bf00      	nop
 8000458:	3740      	adds	r7, #64	; 0x40
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0308 	add.w	r3, r7, #8
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	463b      	mov	r3, r7
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_TIM2_Init+0x94>)
 800047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <MX_TIM2_Init+0x94>)
 8000486:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800048a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <MX_TIM2_Init+0x94>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_TIM2_Init+0x94>)
 8000494:	2209      	movs	r2, #9
 8000496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <MX_TIM2_Init+0x94>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_TIM2_Init+0x94>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004a4:	4813      	ldr	r0, [pc, #76]	; (80004f4 <MX_TIM2_Init+0x94>)
 80004a6:	f001 fed5 	bl	8002254 <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004b0:	f000 f8aa 	bl	8000608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	4619      	mov	r1, r3
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <MX_TIM2_Init+0x94>)
 80004c2:	f002 f853 	bl	800256c <HAL_TIM_ConfigClockSource>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004cc:	f000 f89c 	bl	8000608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d8:	463b      	mov	r3, r7
 80004da:	4619      	mov	r1, r3
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_TIM2_Init+0x94>)
 80004de:	f002 fa2b 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004e8:	f000 f88e 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000c4 	.word	0x200000c4

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0310 	and.w	r3, r3, #16
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a2d      	ldr	r2, [pc, #180]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <MX_GPIO_Init+0xe8>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_GPIO_Init+0xe8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000554:	2200      	movs	r2, #0
 8000556:	f647 71bf 	movw	r1, #32703	; 0x7fbf
 800055a:	4822      	ldr	r0, [pc, #136]	; (80005e4 <MX_GPIO_Init+0xec>)
 800055c:	f001 fa6d 	bl	8001a3a <HAL_GPIO_WritePin>
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, En1_Pin|En2_Pin|En3_Pin|En4_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	210f      	movs	r1, #15
 8000564:	4820      	ldr	r0, [pc, #128]	; (80005e8 <MX_GPIO_Init+0xf0>)
 8000566:	f001 fa68 	bl	8001a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : but1_Pin but2_Pin */
  GPIO_InitStruct.Pin = but1_Pin|but2_Pin;
 800056a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800056e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000574:	2301      	movs	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	4619      	mov	r1, r3
 800057e:	481b      	ldr	r0, [pc, #108]	; (80005ec <MX_GPIO_Init+0xf4>)
 8000580:	f001 f8ca 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_1_Pin YELLOW_1_Pin GREEN_1_Pin RED_2_Pin
                           YELLOW_2_Pin GREEN_2_Pin LED_RED_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin D4_Pin
                           D5_Pin D6_Pin */
  GPIO_InitStruct.Pin = RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|RED_2_Pin
 8000584:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8000588:	613b      	str	r3, [r7, #16]
                          |YELLOW_2_Pin|GREEN_2_Pin|LED_RED_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin|D4_Pin
                          |D5_Pin|D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2302      	movs	r3, #2
 8000594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <MX_GPIO_Init+0xec>)
 800059e:	f001 f8bb 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : En1_Pin En2_Pin En3_Pin En4_Pin */
  GPIO_InitStruct.Pin = En1_Pin|En2_Pin|En3_Pin|En4_Pin;
 80005a2:	230f      	movs	r3, #15
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <MX_GPIO_Init+0xf0>)
 80005ba:	f001 f8ad 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : but3_Pin */
  GPIO_InitStruct.Pin = but3_Pin;
 80005be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(but3_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_GPIO_Init+0xf0>)
 80005d4:	f001 f8a0 	bl	8001718 <HAL_GPIO_Init>

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	40011000 	.word	0x40011000

080005f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	timerRun();
 80005f8:	f000 fe20 	bl	800123c <timerRun>
	getKeyInput();
 80005fc:	f7ff fe28 	bl	8000250 <getKeyInput>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <run_manu>:

void init_manu(){

}

void run_manu(){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	switch(status){
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <run_manu+0x34>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d009      	beq.n	8000634 <run_manu+0x20>
 8000620:	2b0f      	cmp	r3, #15
 8000622:	dc0d      	bgt.n	8000640 <run_manu+0x2c>
 8000624:	2b0d      	cmp	r3, #13
 8000626:	d002      	beq.n	800062e <run_manu+0x1a>
 8000628:	2b0e      	cmp	r3, #14
 800062a:	d006      	beq.n	800063a <run_manu+0x26>

			break;

	default:

		break;
 800062c:	e008      	b.n	8000640 <run_manu+0x2c>
		init_man_red();
 800062e:	f000 fcf5 	bl	800101c <init_man_red>
		break;
 8000632:	e006      	b.n	8000642 <run_manu+0x2e>
		init_man_yellow();
 8000634:	f000 fd56 	bl	80010e4 <init_man_yellow>
			break;
 8000638:	e003      	b.n	8000642 <run_manu+0x2e>
		init_man_green();
 800063a:	f000 fda3 	bl	8001184 <init_man_green>
			break;
 800063e:	e000      	b.n	8000642 <run_manu+0x2e>
		break;
 8000640:	bf00      	nop
	}
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000ac 	.word	0x200000ac

0800064c <switch_mode>:


void switch_mode(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	switch(current_mode){
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <switch_mode+0x34>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b13      	cmp	r3, #19
 8000656:	d00f      	beq.n	8000678 <switch_mode+0x2c>
 8000658:	2b14      	cmp	r3, #20
 800065a:	d000      	beq.n	800065e <switch_mode+0x12>
		model_2();
		setduration(duration);
				break;
		default:

				break;
 800065c:	e00d      	b.n	800067a <switch_mode+0x2e>
		setmodecus(mode);
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <switch_mode+0x38>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fb06 	bl	8000c74 <setmodecus>
		model_2();
 8000668:	f000 fc8a 	bl	8000f80 <model_2>
		setduration(duration);
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <switch_mode+0x3c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fb37 	bl	8000ce4 <setduration>
				break;
 8000676:	e000      	b.n	800067a <switch_mode+0x2e>
			break;
 8000678:	bf00      	nop
			}
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000070 	.word	0x20000070
 8000684:	2000006c 	.word	0x2000006c
 8000688:	200000c0 	.word	0x200000c0

0800068c <display7SEG>:
 *
 *  Created on: Oct 26, 2024
 *      Author: admim
 */
#include "normal_state.h"
void display7SEG(int counter) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b09      	cmp	r3, #9
 8000698:	f200 81c8 	bhi.w	8000a2c <display7SEG+0x3a0>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <display7SEG+0x18>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006cd 	.word	0x080006cd
 80006a8:	08000723 	.word	0x08000723
 80006ac:	08000779 	.word	0x08000779
 80006b0:	080007cf 	.word	0x080007cf
 80006b4:	08000825 	.word	0x08000825
 80006b8:	0800087b 	.word	0x0800087b
 80006bc:	080008d1 	.word	0x080008d1
 80006c0:	08000927 	.word	0x08000927
 80006c4:	0800097d 	.word	0x0800097d
 80006c8:	080009d3 	.word	0x080009d3
    switch (counter) {
        case 0:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d2:	48d5      	ldr	r0, [pc, #852]	; (8000a28 <display7SEG+0x39c>)
 80006d4:	f001 f9b1 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006de:	48d2      	ldr	r0, [pc, #840]	; (8000a28 <display7SEG+0x39c>)
 80006e0:	f001 f9ab 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ea:	48cf      	ldr	r0, [pc, #828]	; (8000a28 <display7SEG+0x39c>)
 80006ec:	f001 f9a5 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f6:	48cc      	ldr	r0, [pc, #816]	; (8000a28 <display7SEG+0x39c>)
 80006f8:	f001 f99f 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	48c9      	ldr	r0, [pc, #804]	; (8000a28 <display7SEG+0x39c>)
 8000704:	f001 f999 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	48c6      	ldr	r0, [pc, #792]	; (8000a28 <display7SEG+0x39c>)
 8000710:	f001 f993 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071a:	48c3      	ldr	r0, [pc, #780]	; (8000a28 <display7SEG+0x39c>)
 800071c:	f001 f98d 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000720:	e187      	b.n	8000a32 <display7SEG+0x3a6>

        case 1:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000728:	48bf      	ldr	r0, [pc, #764]	; (8000a28 <display7SEG+0x39c>)
 800072a:	f001 f986 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000734:	48bc      	ldr	r0, [pc, #752]	; (8000a28 <display7SEG+0x39c>)
 8000736:	f001 f980 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000740:	48b9      	ldr	r0, [pc, #740]	; (8000a28 <display7SEG+0x39c>)
 8000742:	f001 f97a 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074c:	48b6      	ldr	r0, [pc, #728]	; (8000a28 <display7SEG+0x39c>)
 800074e:	f001 f974 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	48b3      	ldr	r0, [pc, #716]	; (8000a28 <display7SEG+0x39c>)
 800075a:	f001 f96e 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	48b0      	ldr	r0, [pc, #704]	; (8000a28 <display7SEG+0x39c>)
 8000766:	f001 f968 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000770:	48ad      	ldr	r0, [pc, #692]	; (8000a28 <display7SEG+0x39c>)
 8000772:	f001 f962 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000776:	e15c      	b.n	8000a32 <display7SEG+0x3a6>

        case 2:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077e:	48aa      	ldr	r0, [pc, #680]	; (8000a28 <display7SEG+0x39c>)
 8000780:	f001 f95b 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078a:	48a7      	ldr	r0, [pc, #668]	; (8000a28 <display7SEG+0x39c>)
 800078c:	f001 f955 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000796:	48a4      	ldr	r0, [pc, #656]	; (8000a28 <display7SEG+0x39c>)
 8000798:	f001 f94f 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007a2:	48a1      	ldr	r0, [pc, #644]	; (8000a28 <display7SEG+0x39c>)
 80007a4:	f001 f949 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	489e      	ldr	r0, [pc, #632]	; (8000a28 <display7SEG+0x39c>)
 80007b0:	f001 f943 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	489b      	ldr	r0, [pc, #620]	; (8000a28 <display7SEG+0x39c>)
 80007bc:	f001 f93d 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c6:	4898      	ldr	r0, [pc, #608]	; (8000a28 <display7SEG+0x39c>)
 80007c8:	f001 f937 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 80007cc:	e131      	b.n	8000a32 <display7SEG+0x3a6>

        case 3:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	4894      	ldr	r0, [pc, #592]	; (8000a28 <display7SEG+0x39c>)
 80007d6:	f001 f930 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4891      	ldr	r0, [pc, #580]	; (8000a28 <display7SEG+0x39c>)
 80007e2:	f001 f92a 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	488e      	ldr	r0, [pc, #568]	; (8000a28 <display7SEG+0x39c>)
 80007ee:	f001 f924 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f8:	488b      	ldr	r0, [pc, #556]	; (8000a28 <display7SEG+0x39c>)
 80007fa:	f001 f91e 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000804:	4888      	ldr	r0, [pc, #544]	; (8000a28 <display7SEG+0x39c>)
 8000806:	f001 f918 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	4885      	ldr	r0, [pc, #532]	; (8000a28 <display7SEG+0x39c>)
 8000812:	f001 f912 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081c:	4882      	ldr	r0, [pc, #520]	; (8000a28 <display7SEG+0x39c>)
 800081e:	f001 f90c 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000822:	e106      	b.n	8000a32 <display7SEG+0x3a6>

        case 4:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	487f      	ldr	r0, [pc, #508]	; (8000a28 <display7SEG+0x39c>)
 800082c:	f001 f905 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	487c      	ldr	r0, [pc, #496]	; (8000a28 <display7SEG+0x39c>)
 8000838:	f001 f8ff 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	4879      	ldr	r0, [pc, #484]	; (8000a28 <display7SEG+0x39c>)
 8000844:	f001 f8f9 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084e:	4876      	ldr	r0, [pc, #472]	; (8000a28 <display7SEG+0x39c>)
 8000850:	f001 f8f3 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4873      	ldr	r0, [pc, #460]	; (8000a28 <display7SEG+0x39c>)
 800085c:	f001 f8ed 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4870      	ldr	r0, [pc, #448]	; (8000a28 <display7SEG+0x39c>)
 8000868:	f001 f8e7 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	486d      	ldr	r0, [pc, #436]	; (8000a28 <display7SEG+0x39c>)
 8000874:	f001 f8e1 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000878:	e0db      	b.n	8000a32 <display7SEG+0x3a6>

        case 5:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000880:	4869      	ldr	r0, [pc, #420]	; (8000a28 <display7SEG+0x39c>)
 8000882:	f001 f8da 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088c:	4866      	ldr	r0, [pc, #408]	; (8000a28 <display7SEG+0x39c>)
 800088e:	f001 f8d4 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	4863      	ldr	r0, [pc, #396]	; (8000a28 <display7SEG+0x39c>)
 800089a:	f001 f8ce 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	4860      	ldr	r0, [pc, #384]	; (8000a28 <display7SEG+0x39c>)
 80008a6:	f001 f8c8 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	485d      	ldr	r0, [pc, #372]	; (8000a28 <display7SEG+0x39c>)
 80008b2:	f001 f8c2 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	485a      	ldr	r0, [pc, #360]	; (8000a28 <display7SEG+0x39c>)
 80008be:	f001 f8bc 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c8:	4857      	ldr	r0, [pc, #348]	; (8000a28 <display7SEG+0x39c>)
 80008ca:	f001 f8b6 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 80008ce:	e0b0      	b.n	8000a32 <display7SEG+0x3a6>

        case 6:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4854      	ldr	r0, [pc, #336]	; (8000a28 <display7SEG+0x39c>)
 80008d8:	f001 f8af 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e2:	4851      	ldr	r0, [pc, #324]	; (8000a28 <display7SEG+0x39c>)
 80008e4:	f001 f8a9 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	484e      	ldr	r0, [pc, #312]	; (8000a28 <display7SEG+0x39c>)
 80008f0:	f001 f8a3 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <display7SEG+0x39c>)
 80008fc:	f001 f89d 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	4848      	ldr	r0, [pc, #288]	; (8000a28 <display7SEG+0x39c>)
 8000908:	f001 f897 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <display7SEG+0x39c>)
 8000914:	f001 f891 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091e:	4842      	ldr	r0, [pc, #264]	; (8000a28 <display7SEG+0x39c>)
 8000920:	f001 f88b 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000924:	e085      	b.n	8000a32 <display7SEG+0x3a6>

        case 7:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092c:	483e      	ldr	r0, [pc, #248]	; (8000a28 <display7SEG+0x39c>)
 800092e:	f001 f884 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	483b      	ldr	r0, [pc, #236]	; (8000a28 <display7SEG+0x39c>)
 800093a:	f001 f87e 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000944:	4838      	ldr	r0, [pc, #224]	; (8000a28 <display7SEG+0x39c>)
 8000946:	f001 f878 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000950:	4835      	ldr	r0, [pc, #212]	; (8000a28 <display7SEG+0x39c>)
 8000952:	f001 f872 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <display7SEG+0x39c>)
 800095e:	f001 f86c 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000968:	482f      	ldr	r0, [pc, #188]	; (8000a28 <display7SEG+0x39c>)
 800096a:	f001 f866 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	482c      	ldr	r0, [pc, #176]	; (8000a28 <display7SEG+0x39c>)
 8000976:	f001 f860 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 800097a:	e05a      	b.n	8000a32 <display7SEG+0x3a6>

        case 8:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000982:	4829      	ldr	r0, [pc, #164]	; (8000a28 <display7SEG+0x39c>)
 8000984:	f001 f859 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <display7SEG+0x39c>)
 8000990:	f001 f853 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	4823      	ldr	r0, [pc, #140]	; (8000a28 <display7SEG+0x39c>)
 800099c:	f001 f84d 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a6:	4820      	ldr	r0, [pc, #128]	; (8000a28 <display7SEG+0x39c>)
 80009a8:	f001 f847 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b2:	481d      	ldr	r0, [pc, #116]	; (8000a28 <display7SEG+0x39c>)
 80009b4:	f001 f841 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <display7SEG+0x39c>)
 80009c0:	f001 f83b 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <display7SEG+0x39c>)
 80009cc:	f001 f835 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 80009d0:	e02f      	b.n	8000a32 <display7SEG+0x3a6>

        case 9:
            HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	4813      	ldr	r0, [pc, #76]	; (8000a28 <display7SEG+0x39c>)
 80009da:	f001 f82e 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <display7SEG+0x39c>)
 80009e6:	f001 f828 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <display7SEG+0x39c>)
 80009f2:	f001 f822 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fc:	480a      	ldr	r0, [pc, #40]	; (8000a28 <display7SEG+0x39c>)
 80009fe:	f001 f81c 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <display7SEG+0x39c>)
 8000a0a:	f001 f816 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <display7SEG+0x39c>)
 8000a16:	f001 f810 	bl	8001a3a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4801      	ldr	r0, [pc, #4]	; (8000a28 <display7SEG+0x39c>)
 8000a22:	f001 f80a 	bl	8001a3a <HAL_GPIO_WritePin>
            break;
 8000a26:	e004      	b.n	8000a32 <display7SEG+0x3a6>
 8000a28:	40010800 	.word	0x40010800

        default:
            counter = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
            break;
 8000a30:	bf00      	nop
    }
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop

08000a3c <clearbuffer>:
void clearbuffer(){
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <clearbuffer+0x24>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
		led_buffer[1] = 0;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <clearbuffer+0x24>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
		led_buffer[2] = 0;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <clearbuffer+0x24>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
		led_buffer[3] = 0;
 8000a52:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <clearbuffer+0x24>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	200000b0 	.word	0x200000b0

08000a64 <update7SEG>:
void update7SEG(int index){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d873      	bhi.n	8000b5c <update7SEG+0xf8>
 8000a74:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <update7SEG+0x18>)
 8000a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7a:	bf00      	nop
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000ac1 	.word	0x08000ac1
 8000a84:	08000af5 	.word	0x08000af5
 8000a88:	08000b29 	.word	0x08000b29
	switch (index) {
			case 1:
//
				display7SEG(led_buffer[0]);
 8000a8c:	4b36      	ldr	r3, [pc, #216]	; (8000b68 <update7SEG+0x104>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdfb 	bl	800068c <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4834      	ldr	r0, [pc, #208]	; (8000b6c <update7SEG+0x108>)
 8000a9c:	f000 ffcd 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2102      	movs	r1, #2
 8000aa4:	4831      	ldr	r0, [pc, #196]	; (8000b6c <update7SEG+0x108>)
 8000aa6:	f000 ffc8 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2104      	movs	r1, #4
 8000aae:	482f      	ldr	r0, [pc, #188]	; (8000b6c <update7SEG+0x108>)
 8000ab0:	f000 ffc3 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	482c      	ldr	r0, [pc, #176]	; (8000b6c <update7SEG+0x108>)
 8000aba:	f000 ffbe 	bl	8001a3a <HAL_GPIO_WritePin>
//
				break;
 8000abe:	e04e      	b.n	8000b5e <update7SEG+0xfa>
			case 2:
//				if(isTimerExpired(0)==1){
				display7SEG(led_buffer[1]);
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <update7SEG+0x104>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fde1 	bl	800068c <display7SEG>
				HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4827      	ldr	r0, [pc, #156]	; (8000b6c <update7SEG+0x108>)
 8000ad0:	f000 ffb3 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <update7SEG+0x108>)
 8000ada:	f000 ffae 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	4822      	ldr	r0, [pc, #136]	; (8000b6c <update7SEG+0x108>)
 8000ae4:	f000 ffa9 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2108      	movs	r1, #8
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <update7SEG+0x108>)
 8000aee:	f000 ffa4 	bl	8001a3a <HAL_GPIO_WritePin>
//				}
				break;
 8000af2:	e034      	b.n	8000b5e <update7SEG+0xfa>
			case 3:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[2]);
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <update7SEG+0x104>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fdc7 	bl	800068c <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	481a      	ldr	r0, [pc, #104]	; (8000b6c <update7SEG+0x108>)
 8000b04:	f000 ff99 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <update7SEG+0x108>)
 8000b0e:	f000 ff94 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2104      	movs	r1, #4
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <update7SEG+0x108>)
 8000b18:	f000 ff8f 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <update7SEG+0x108>)
 8000b22:	f000 ff8a 	bl	8001a3a <HAL_GPIO_WritePin>
//	}
				break;
 8000b26:	e01a      	b.n	8000b5e <update7SEG+0xfa>
			case 4:
//				if(isTimerExpired(0)==1){
					display7SEG(led_buffer[3]);
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <update7SEG+0x104>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdad 	bl	800068c <display7SEG>
					HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <update7SEG+0x108>)
 8000b38:	f000 ff7f 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2102      	movs	r1, #2
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <update7SEG+0x108>)
 8000b42:	f000 ff7a 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <update7SEG+0x108>)
 8000b4c:	f000 ff75 	bl	8001a3a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(En4_GPIO_Port, En4_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <update7SEG+0x108>)
 8000b56:	f000 ff70 	bl	8001a3a <HAL_GPIO_WritePin>
//					}
			break;
 8000b5a:	e000      	b.n	8000b5e <update7SEG+0xfa>
			default:
				break;
 8000b5c:	bf00      	nop
		}

}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000b0 	.word	0x200000b0
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <scanled>:
int run = 1;
void scanled(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	if(isTimerExpired(2)==1){
 8000b74:	2002      	movs	r0, #2
 8000b76:	f000 fb91 	bl	800129c <isTimerExpired>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d116      	bne.n	8000bae <scanled+0x3e>
		update7SEG(run);
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <scanled+0x44>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff6d 	bl	8000a64 <update7SEG>
		run++;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <scanled+0x44>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <scanled+0x44>)
 8000b92:	6013      	str	r3, [r2, #0]
		setTimer(2, scan_led);
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <scanled+0x48>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f000 fb2e 	bl	80011fc <setTimer>
		if(run>4){
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <scanled+0x44>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	dd02      	ble.n	8000bae <scanled+0x3e>
			run = 0;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <scanled+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000074 	.word	0x20000074
 8000bb8:	20000068 	.word	0x20000068

08000bbc <return_mode1>:
void return_mode1(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	if(buttonFlags[2]==1){
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <return_mode1+0x30>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10e      	bne.n	8000be6 <return_mode1+0x2a>
		clearbut();
 8000bc8:	f7ff fb30 	bl	800022c <clearbut>
		setTimer(0, green_on);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <return_mode1+0x34>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 fb12 	bl	80011fc <setTimer>
		status = GREEN_RED;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <return_mode1+0x38>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
		setmode1(5,2);
 8000bde:	2102      	movs	r1, #2
 8000be0:	2005      	movs	r0, #5
 8000be2:	f000 f809 	bl	8000bf8 <setmode1>
	}
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a0 	.word	0x200000a0
 8000bf0:	20000054 	.word	0x20000054
 8000bf4:	200000ac 	.word	0x200000ac

08000bf8 <setmode1>:
void setmode1(int line1, int line2){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	clearbuffer();
 8000c02:	f7ff ff1b 	bl	8000a3c <clearbuffer>
	led_buffer[0] = line1/10;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <setmode1+0x74>)
 8000c0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0e:	1092      	asrs	r2, r2, #2
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <setmode1+0x78>)
 8000c16:	6013      	str	r3, [r2, #0]
	led_buffer[1] = line1%10;
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <setmode1+0x74>)
 8000c1c:	fb83 2301 	smull	r2, r3, r3, r1
 8000c20:	109a      	asrs	r2, r3, #2
 8000c22:	17cb      	asrs	r3, r1, #31
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	1aca      	subs	r2, r1, r3
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <setmode1+0x78>)
 8000c32:	605a      	str	r2, [r3, #4]

	led_buffer[2] = line2/10;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <setmode1+0x74>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	1092      	asrs	r2, r2, #2
 8000c3e:	17db      	asrs	r3, r3, #31
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <setmode1+0x78>)
 8000c44:	6093      	str	r3, [r2, #8]
	led_buffer[3] = line2%10;
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <setmode1+0x74>)
 8000c4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c4e:	109a      	asrs	r2, r3, #2
 8000c50:	17cb      	asrs	r3, r1, #31
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	1aca      	subs	r2, r1, r3
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <setmode1+0x78>)
 8000c60:	60da      	str	r2, [r3, #12]
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	66666667 	.word	0x66666667
 8000c70:	200000b0 	.word	0x200000b0

08000c74 <setmodecus>:
		led_buffer[3]--;
		setTimer(4, 1000);
	}
}

void setmodecus(int mode_cus){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	mode = mode_cus;
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <setmodecus+0x64>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
	led_buffer[0] = 0;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <setmodecus+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 0;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <setmodecus+0x68>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
	led_buffer[2] = 0;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <setmodecus+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <setmodecus+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
	led_buffer[0] = mode/10;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <setmodecus+0x64>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <setmodecus+0x6c>)
 8000ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca4:	1092      	asrs	r2, r2, #2
 8000ca6:	17db      	asrs	r3, r3, #31
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <setmodecus+0x68>)
 8000cac:	6013      	str	r3, [r2, #0]
	led_buffer[1] = mode%10;
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <setmodecus+0x64>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <setmodecus+0x6c>)
 8000cb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000cb8:	109a      	asrs	r2, r3, #2
 8000cba:	17cb      	asrs	r3, r1, #31
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	1aca      	subs	r2, r1, r3
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <setmodecus+0x68>)
 8000cca:	605a      	str	r2, [r3, #4]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000006c 	.word	0x2000006c
 8000cdc:	200000b0 	.word	0x200000b0
 8000ce0:	66666667 	.word	0x66666667

08000ce4 <setduration>:


void setduration(int duration){
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	led_buffer[2] = 0;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <setduration+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
	led_buffer[3] = 0;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <setduration+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
	led_buffer[2] = duration/10;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <setduration+0x50>)
 8000cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000d00:	1092      	asrs	r2, r2, #2
 8000d02:	17db      	asrs	r3, r3, #31
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <setduration+0x4c>)
 8000d08:	6093      	str	r3, [r2, #8]
	led_buffer[3] = duration%10;
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <setduration+0x50>)
 8000d0e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d12:	109a      	asrs	r2, r3, #2
 8000d14:	17cb      	asrs	r3, r1, #31
 8000d16:	1ad2      	subs	r2, r2, r3
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	1aca      	subs	r2, r1, r3
 8000d22:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <setduration+0x4c>)
 8000d24:	60da      	str	r2, [r3, #12]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	200000b0 	.word	0x200000b0
 8000d34:	66666667 	.word	0x66666667

08000d38 <init_green_red>:
void init_green_red(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2101      	movs	r1, #1
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <init_green_red+0xc0>)
 8000d42:	f000 fe7a 	bl	8001a3a <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000d46:	2201      	movs	r2, #1
 8000d48:	2102      	movs	r1, #2
 8000d4a:	482b      	ldr	r0, [pc, #172]	; (8000df8 <init_green_red+0xc0>)
 8000d4c:	f000 fe75 	bl	8001a3a <HAL_GPIO_WritePin>
		 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000d50:	2201      	movs	r2, #1
 8000d52:	2104      	movs	r1, #4
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <init_green_red+0xc0>)
 8000d56:	f000 fe70 	bl	8001a3a <HAL_GPIO_WritePin>
		    // Cấu hình Line 2
		    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET); // Xanh sáng - Line 2
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <init_green_red+0xc0>)
 8000d60:	f000 fe6b 	bl	8001a3a <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000d64:	2201      	movs	r2, #1
 8000d66:	2110      	movs	r1, #16
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <init_green_red+0xc0>)
 8000d6a:	f000 fe66 	bl	8001a3a <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	4821      	ldr	r0, [pc, #132]	; (8000df8 <init_green_red+0xc0>)
 8000d74:	f000 fe61 	bl	8001a3a <HAL_GPIO_WritePin>
		   if(isTimerExpired(0)==1){
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 fa8f 	bl	800129c <isTimerExpired>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d10c      	bne.n	8000d9e <init_green_red+0x66>
			   	setTimer(0, yellow_on);
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <init_green_red+0xc4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 fa36 	bl	80011fc <setTimer>
		        status = AMBER_RED;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <init_green_red+0xc8>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	601a      	str	r2, [r3, #0]
		        setmode1(3,3);
 8000d96:	2103      	movs	r1, #3
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f7ff ff2d 	bl	8000bf8 <setmode1>
			}
		   if(buttonFlags[0]==1){
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <init_green_red+0xcc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d125      	bne.n	8000df2 <init_green_red+0xba>
			   status = MAN_RED;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <init_green_red+0xc8>)
 8000da8:	220d      	movs	r2, #13
 8000daa:	601a      	str	r2, [r3, #0]
			   init_automatic();
 8000dac:	f7ff f9ce 	bl	800014c <init_automatic>
			   setTimer(0, time_stage_2);
 8000db0:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <init_green_red+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fa20 	bl	80011fc <setTimer>
			   setTimer(1, update_time_red);
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <init_green_red+0xd4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fa1a 	bl	80011fc <setTimer>
			   clearbut();
 8000dc8:	f7ff fa30 	bl	800022c <clearbut>
			   HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <init_green_red+0xc0>)
 8000dd2:	f000 fe32 	bl	8001a3a <HAL_GPIO_WritePin>
			   	HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <init_green_red+0xc0>)
 8000ddc:	f000 fe2d 	bl	8001a3a <HAL_GPIO_WritePin>
			   	current_mode = CUS_MODE;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <init_green_red+0xd8>)
 8000de2:	2214      	movs	r2, #20
 8000de4:	601a      	str	r2, [r3, #0]
			   	setmodecus(2);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff ff44 	bl	8000c74 <setmodecus>
			   	duration = 0;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <init_green_red+0xdc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
		   }

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	20000050 	.word	0x20000050
 8000e00:	200000ac 	.word	0x200000ac
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	20000058 	.word	0x20000058
 8000e0c:	2000005c 	.word	0x2000005c
 8000e10:	20000070 	.word	0x20000070
 8000e14:	200000c0 	.word	0x200000c0

08000e18 <init_amber_red>:
void init_amber_red(void){ // on vang
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, RESET);    // Đỏ sáng - Line 1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <init_amber_red+0x6c>)
 8000e22:	f000 fe0a 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000e26:	2201      	movs	r2, #1
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4816      	ldr	r0, [pc, #88]	; (8000e84 <init_amber_red+0x6c>)
 8000e2c:	f000 fe05 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000e30:	2201      	movs	r2, #1
 8000e32:	2104      	movs	r1, #4
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <init_amber_red+0x6c>)
 8000e36:	f000 fe00 	bl	8001a3a <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2120      	movs	r1, #32
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <init_amber_red+0x6c>)
 8000e40:	f000 fdfb 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET); // Vàng tắt - Line 2
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <init_amber_red+0x6c>)
 8000e4a:	f000 fdf6 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2108      	movs	r1, #8
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <init_amber_red+0x6c>)
 8000e54:	f000 fdf1 	bl	8001a3a <HAL_GPIO_WritePin>
	if(isTimerExpired(0)==1){
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 fa1f 	bl	800129c <isTimerExpired>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10c      	bne.n	8000e7e <init_amber_red+0x66>
		setTimer(0, green_on);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <init_amber_red+0x70>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f9c6 	bl	80011fc <setTimer>
		status = RED_GREEN;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <init_amber_red+0x74>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
		setmode1(2,5);
 8000e76:	2105      	movs	r1, #5
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f7ff febd 	bl	8000bf8 <setmode1>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40010800 	.word	0x40010800
 8000e88:	20000054 	.word	0x20000054
 8000e8c:	200000ac 	.word	0x200000ac

08000e90 <init_red_green>:
void init_red_green(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000e94:	2201      	movs	r2, #1
 8000e96:	2101      	movs	r1, #1
 8000e98:	4818      	ldr	r0, [pc, #96]	; (8000efc <init_red_green+0x6c>)
 8000e9a:	f000 fdce 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET); // Vàng tắt - Line 1
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4816      	ldr	r0, [pc, #88]	; (8000efc <init_red_green+0x6c>)
 8000ea4:	f000 fdc9 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);   // Xanh tắt - Line 1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <init_red_green+0x6c>)
 8000eae:	f000 fdc4 	bl	8001a3a <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <init_red_green+0x6c>)
 8000eb8:	f000 fdbf 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	480e      	ldr	r0, [pc, #56]	; (8000efc <init_red_green+0x6c>)
 8000ec2:	f000 fdba 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2108      	movs	r1, #8
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <init_red_green+0x6c>)
 8000ecc:	f000 fdb5 	bl	8001a3a <HAL_GPIO_WritePin>

	if(isTimerExpired(0)==1){
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f9e3 	bl	800129c <isTimerExpired>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10c      	bne.n	8000ef6 <init_red_green+0x66>
		 	 	   // on do line 2
				setmode1(3,3);
 8000edc:	2103      	movs	r1, #3
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f7ff fe8a 	bl	8000bf8 <setmode1>
		        setTimer(0, yellow_on);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <init_red_green+0x70>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f986 	bl	80011fc <setTimer>
		        status = RED_AMBER;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <init_red_green+0x74>)
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	601a      	str	r2, [r3, #0]
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010800 	.word	0x40010800
 8000f00:	20000050 	.word	0x20000050
 8000f04:	200000ac 	.word	0x200000ac

08000f08 <init_red_amber>:
void init_red_amber(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);    // Đỏ sáng - Line 1
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4818      	ldr	r0, [pc, #96]	; (8000f74 <init_red_amber+0x6c>)
 8000f12:	f000 fd92 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET); // Vàng tắt - Line 1
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4816      	ldr	r0, [pc, #88]	; (8000f74 <init_red_amber+0x6c>)
 8000f1c:	f000 fd8d 	bl	8001a3a <HAL_GPIO_WritePin>
			 	 HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);   // Xanh tắt - Line 1
 8000f20:	2201      	movs	r2, #1
 8000f22:	2104      	movs	r1, #4
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <init_red_amber+0x6c>)
 8000f26:	f000 fd88 	bl	8001a3a <HAL_GPIO_WritePin>

			    // Cấu hình Line 2
			    HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, SET); // Xanh sáng - Line 2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <init_red_amber+0x6c>)
 8000f30:	f000 fd83 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, SET); // Vàng tắt - Line 2
 8000f34:	2201      	movs	r2, #1
 8000f36:	2110      	movs	r1, #16
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <init_red_amber+0x6c>)
 8000f3a:	f000 fd7e 	bl	8001a3a <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(RED_2_GPIO_Port, RED_2_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2108      	movs	r1, #8
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <init_red_amber+0x6c>)
 8000f44:	f000 fd79 	bl	8001a3a <HAL_GPIO_WritePin>

	if(isTimerExpired(0)==1){
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 f9a7 	bl	800129c <isTimerExpired>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10c      	bne.n	8000f6e <init_red_amber+0x66>
		 setTimer(0, green_on);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <init_red_amber+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f94e 	bl	80011fc <setTimer>
		 status = GREEN_RED;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <init_red_amber+0x74>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	601a      	str	r2, [r3, #0]
		 setmode1(5,2);
 8000f66:	2102      	movs	r1, #2
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f7ff fe45 	bl	8000bf8 <setmode1>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800
 8000f78:	20000054 	.word	0x20000054
 8000f7c:	200000ac 	.word	0x200000ac

08000f80 <model_2>:
void model_2(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	if(buttonFlags[1]==1){
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <model_2+0x84>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d138      	bne.n	8000ffe <model_2+0x7e>
			duration++;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <model_2+0x88>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <model_2+0x88>)
 8000f94:	6013      	str	r3, [r2, #0]
			if(duration!=0){
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <model_2+0x88>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d025      	beq.n	8000fea <model_2+0x6a>
				switch(status){
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <model_2+0x8c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d00f      	beq.n	8000fc6 <model_2+0x46>
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	dc20      	bgt.n	8000fec <model_2+0x6c>
 8000faa:	2b0d      	cmp	r3, #13
 8000fac:	d002      	beq.n	8000fb4 <model_2+0x34>
 8000fae:	2b0e      	cmp	r3, #14
 8000fb0:	d012      	beq.n	8000fd8 <model_2+0x58>
 8000fb2:	e01b      	b.n	8000fec <model_2+0x6c>
						case MAN_RED:
							//decrease_time_mode1();
							update_time_red = duration*1000;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <model_2+0x88>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <model_2+0x90>)
 8000fc2:	6013      	str	r3, [r2, #0]
							break;
 8000fc4:	e012      	b.n	8000fec <model_2+0x6c>
						case MAN_YELLOW:
							update_time_yellow = duration*1000;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <model_2+0x88>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <model_2+0x94>)
 8000fd4:	6013      	str	r3, [r2, #0]
							break;
 8000fd6:	e009      	b.n	8000fec <model_2+0x6c>
						case MAN_GREEN:
							update_time_green = duration*1000;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <model_2+0x88>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <model_2+0x98>)
 8000fe6:	6013      	str	r3, [r2, #0]
													break;
 8000fe8:	e000      	b.n	8000fec <model_2+0x6c>
			}}
 8000fea:	bf00      	nop
			clearbut();
 8000fec:	f7ff f91e 	bl	800022c <clearbut>
			if(duration>99){
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <model_2+0x88>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b63      	cmp	r3, #99	; 0x63
 8000ff6:	dd02      	ble.n	8000ffe <model_2+0x7e>
				duration=1;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <model_2+0x88>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000a0 	.word	0x200000a0
 8001008:	200000c0 	.word	0x200000c0
 800100c:	200000ac 	.word	0x200000ac
 8001010:	2000005c 	.word	0x2000005c
 8001014:	20000060 	.word	0x20000060
 8001018:	20000064 	.word	0x20000064

0800101c <init_man_red>:

void init_man_red(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

	if(isTimerExpired(1)==1){
 8001020:	2001      	movs	r0, #1
 8001022:	f000 f93b 	bl	800129c <isTimerExpired>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10d      	bne.n	8001048 <init_man_red+0x2c>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 800102c:	2101      	movs	r1, #1
 800102e:	4825      	ldr	r0, [pc, #148]	; (80010c4 <init_man_red+0xa8>)
 8001030:	f000 fd1b 	bl	8001a6a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_2_GPIO_Port, RED_2_Pin);
 8001034:	2108      	movs	r1, #8
 8001036:	4823      	ldr	r0, [pc, #140]	; (80010c4 <init_man_red+0xa8>)
 8001038:	f000 fd17 	bl	8001a6a <HAL_GPIO_TogglePin>
		setTimer(1, update_time_red);
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <init_man_red+0xac>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	2001      	movs	r0, #1
 8001044:	f000 f8da 	bl	80011fc <setTimer>
	}
	if(buttonFlags[0]==1){
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <init_man_red+0xb0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d123      	bne.n	8001098 <init_man_red+0x7c>
		buttonFlags[0]= 0;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <init_man_red+0xb0>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
		status = MAN_YELLOW;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <init_man_red+0xb4>)
 8001058:	220f      	movs	r2, #15
 800105a:	601a      	str	r2, [r3, #0]
		setTimer(0,time_stage_2);
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <init_man_red+0xb8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f8ca 	bl	80011fc <setTimer>
		init_automatic();
 8001068:	f7ff f870 	bl	800014c <init_automatic>
		setTimer(1, update_time_yellow);
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <init_man_red+0xbc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	2001      	movs	r0, #1
 8001074:	f000 f8c2 	bl	80011fc <setTimer>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2102      	movs	r1, #2
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <init_man_red+0xa8>)
 800107e:	f000 fcdc 	bl	8001a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin, RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2110      	movs	r1, #16
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <init_man_red+0xa8>)
 8001088:	f000 fcd7 	bl	8001a3a <HAL_GPIO_WritePin>
			setmodecus(3);
 800108c:	2003      	movs	r0, #3
 800108e:	f7ff fdf1 	bl	8000c74 <setmodecus>
			duration = 0;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <init_man_red+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

	}
	if(isTimerExpired(0)==1){
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f8ff 	bl	800129c <isTimerExpired>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10a      	bne.n	80010ba <init_man_red+0x9e>
		status = GREEN_RED;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <init_man_red+0xb4>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
		setTimer(0, green_on);
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <init_man_red+0xc4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f8a3 	bl	80011fc <setTimer>
		init_automatic();
 80010b6:	f7ff f849 	bl	800014c <init_automatic>
	}
	return_mode1();
 80010ba:	f7ff fd7f 	bl	8000bbc <return_mode1>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010800 	.word	0x40010800
 80010c8:	2000005c 	.word	0x2000005c
 80010cc:	200000a0 	.word	0x200000a0
 80010d0:	200000ac 	.word	0x200000ac
 80010d4:	20000058 	.word	0x20000058
 80010d8:	20000060 	.word	0x20000060
 80010dc:	200000c0 	.word	0x200000c0
 80010e0:	20000054 	.word	0x20000054

080010e4 <init_man_yellow>:
void init_man_yellow(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0

	if (isTimerExpired(1) == 1) {
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f8d7 	bl	800129c <isTimerExpired>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10d      	bne.n	8001110 <init_man_yellow+0x2c>
	    HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 80010f4:	2102      	movs	r1, #2
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <init_man_yellow+0x84>)
 80010f8:	f000 fcb7 	bl	8001a6a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(YELLOW_2_GPIO_Port, YELLOW_2_Pin);
 80010fc:	2110      	movs	r1, #16
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <init_man_yellow+0x84>)
 8001100:	f000 fcb3 	bl	8001a6a <HAL_GPIO_TogglePin>
	    setTimer(1, update_time_yellow);
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <init_man_yellow+0x88>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f876 	bl	80011fc <setTimer>
	}
	if(buttonFlags[0]==1){
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <init_man_yellow+0x8c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d123      	bne.n	8001160 <init_man_yellow+0x7c>
			buttonFlags[0]= 0;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <init_man_yellow+0x8c>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
			status = MAN_GREEN;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <init_man_yellow+0x90>)
 8001120:	220e      	movs	r2, #14
 8001122:	601a      	str	r2, [r3, #0]
			setTimer(0,time_stage_2);
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <init_man_yellow+0x94>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f866 	bl	80011fc <setTimer>
			init_automatic();
 8001130:	f7ff f80c 	bl	800014c <init_automatic>
			setTimer(1, update_time_green);
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <init_man_yellow+0x98>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	2001      	movs	r0, #1
 800113c:	f000 f85e 	bl	80011fc <setTimer>
			HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2104      	movs	r1, #4
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <init_man_yellow+0x84>)
 8001146:	f000 fc78 	bl	8001a3a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_2_GPIO_Port, GREEN_2_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2120      	movs	r1, #32
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <init_man_yellow+0x84>)
 8001150:	f000 fc73 	bl	8001a3a <HAL_GPIO_WritePin>
				setmodecus(4);
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff fd8d 	bl	8000c74 <setmodecus>
				duration = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <init_man_yellow+0x9c>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

		}
	return_mode1();
 8001160:	f7ff fd2c 	bl	8000bbc <return_mode1>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010800 	.word	0x40010800
 800116c:	20000060 	.word	0x20000060
 8001170:	200000a0 	.word	0x200000a0
 8001174:	200000ac 	.word	0x200000ac
 8001178:	20000058 	.word	0x20000058
 800117c:	20000064 	.word	0x20000064
 8001180:	200000c0 	.word	0x200000c0

08001184 <init_man_green>:
void init_man_green(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if (isTimerExpired(1) == 1) {
 8001188:	2001      	movs	r0, #1
 800118a:	f000 f887 	bl	800129c <isTimerExpired>
 800118e:	4603      	mov	r3, r0
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10d      	bne.n	80011b0 <init_man_green+0x2c>
	    HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 8001194:	2104      	movs	r1, #4
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <init_man_green+0x60>)
 8001198:	f000 fc67 	bl	8001a6a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GREEN_2_GPIO_Port, GREEN_2_Pin);
 800119c:	2120      	movs	r1, #32
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <init_man_green+0x60>)
 80011a0:	f000 fc63 	bl	8001a6a <HAL_GPIO_TogglePin>
	    setTimer(1, update_time_green);
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <init_man_green+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 f826 	bl	80011fc <setTimer>
	}
	if(buttonFlags[0]==1){
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <init_man_green+0x68>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <init_man_green+0x56>
			buttonFlags[0]= 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <init_man_green+0x68>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
			status = GREEN_RED;
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <init_man_green+0x6c>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	601a      	str	r2, [r3, #0]
			setTimer(0,green_on);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <init_man_green+0x70>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f816 	bl	80011fc <setTimer>
			init_automatic();
 80011d0:	f7fe ffbc 	bl	800014c <init_automatic>
			current_mode = MODE_1;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <init_man_green+0x74>)
 80011d6:	2213      	movs	r2, #19
 80011d8:	601a      	str	r2, [r3, #0]
		}
	return_mode1();
 80011da:	f7ff fcef 	bl	8000bbc <return_mode1>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40010800 	.word	0x40010800
 80011e8:	20000064 	.word	0x20000064
 80011ec:	200000a0 	.word	0x200000a0
 80011f0:	200000ac 	.word	0x200000ac
 80011f4:	20000054 	.word	0x20000054
 80011f8:	20000070 	.word	0x20000070

080011fc <setTimer>:
#define MAX_COUNTER 10

int timerCounter[MAX_COUNTER];
int timerFlag[MAX_COUNTER];

void setTimer(int index, int counter){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    timerCounter[index] = counter / 10;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <setTimer+0x34>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1092      	asrs	r2, r2, #2
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <setTimer+0x38>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    timerFlag[index] = 0;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <setTimer+0x3c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2100      	movs	r1, #0
 8001222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	66666667 	.word	0x66666667
 8001234:	20000134 	.word	0x20000134
 8001238:	2000010c 	.word	0x2000010c

0800123c <timerRun>:

void timerRun(){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
    for(int i = 0; i < MAX_COUNTER; i++){
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	e01c      	b.n	8001282 <timerRun+0x46>
        if(timerCounter[i] > 0){
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <timerRun+0x58>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dd08      	ble.n	8001266 <timerRun+0x2a>
            timerCounter[i]--;
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <timerRun+0x58>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	490d      	ldr	r1, [pc, #52]	; (8001294 <timerRun+0x58>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        if(timerCounter[i] <= 0){
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <timerRun+0x58>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	2b00      	cmp	r3, #0
 8001270:	dc04      	bgt.n	800127c <timerRun+0x40>
            timerFlag[i] = 1;
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <timerRun+0x5c>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2101      	movs	r1, #1
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(int i = 0; i < MAX_COUNTER; i++){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b09      	cmp	r3, #9
 8001286:	dddf      	ble.n	8001248 <timerRun+0xc>
        }
    }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000134 	.word	0x20000134
 8001298:	2000010c 	.word	0x2000010c

0800129c <isTimerExpired>:

int isTimerExpired(int index){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    if(timerFlag[index] == 1){
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <isTimerExpired+0x30>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d106      	bne.n	80012be <isTimerExpired+0x22>
        timerFlag[index] = 0;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <isTimerExpired+0x30>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2100      	movs	r1, #0
 80012b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <isTimerExpired+0x24>
    }
    return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000010c 	.word	0x2000010c

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_MspInit+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x5c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x60>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_MspInit+0x60>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d113      	bne.n	800136e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	201c      	movs	r0, #28
 8001364:	f000 f9a1 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001368:	201c      	movs	r0, #28
 800136a:	f000 f9ba 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler+0x4>

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c2:	f000 f87f 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f000 ffdb 	bl	800238c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000c4 	.word	0x200000c4

080013e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ec:	f7ff fff8 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013f2:	490c      	ldr	r1, [pc, #48]	; (8001424 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001408:	4c09      	ldr	r4, [pc, #36]	; (8001430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f001 faf9 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141a:	f7fe ffbf 	bl	800039c <main>
  bx lr
 800141e:	4770      	bx	lr
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001428:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 800142c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001430:	20000160 	.word	0x20000160

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_Init+0x28>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_Init+0x28>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001448:	2003      	movs	r0, #3
 800144a:	f000 f923 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f808 	bl	8001464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff ff3c 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f93b 	bl	80016fe <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f903 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000078 	.word	0x20000078
 80014bc:	20000080 	.word	0x20000080
 80014c0:	2000007c 	.word	0x2000007c

080014c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_IncTick+0x1c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_IncTick+0x20>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_IncTick+0x20>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000080 	.word	0x20000080
 80014e4:	2000015c 	.word	0x2000015c

080014e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_GetTick+0x10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	2000015c 	.word	0x2000015c

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4906      	ldr	r1, [pc, #24]	; (8001594 <__NVIC_EnableIRQ+0x34>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff90 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff2d 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff42 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff90 	bl	80015ec <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5f 	bl	8001598 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff35 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b08b      	sub	sp, #44	; 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e148      	b.n	80019be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800172c:	2201      	movs	r2, #1
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8137 	bne.w	80019b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4aa3      	ldr	r2, [pc, #652]	; (80019dc <HAL_GPIO_Init+0x2c4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d05e      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001754:	4aa1      	ldr	r2, [pc, #644]	; (80019dc <HAL_GPIO_Init+0x2c4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d875      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800175a:	4aa1      	ldr	r2, [pc, #644]	; (80019e0 <HAL_GPIO_Init+0x2c8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d058      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001760:	4a9f      	ldr	r2, [pc, #636]	; (80019e0 <HAL_GPIO_Init+0x2c8>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d86f      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001766:	4a9f      	ldr	r2, [pc, #636]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d052      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 800176c:	4a9d      	ldr	r2, [pc, #628]	; (80019e4 <HAL_GPIO_Init+0x2cc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d869      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001772:	4a9d      	ldr	r2, [pc, #628]	; (80019e8 <HAL_GPIO_Init+0x2d0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04c      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001778:	4a9b      	ldr	r2, [pc, #620]	; (80019e8 <HAL_GPIO_Init+0x2d0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d863      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800177e:	4a9b      	ldr	r2, [pc, #620]	; (80019ec <HAL_GPIO_Init+0x2d4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d046      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
 8001784:	4a99      	ldr	r2, [pc, #612]	; (80019ec <HAL_GPIO_Init+0x2d4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d85d      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 800178a:	2b12      	cmp	r3, #18
 800178c:	d82a      	bhi.n	80017e4 <HAL_GPIO_Init+0xcc>
 800178e:	2b12      	cmp	r3, #18
 8001790:	d859      	bhi.n	8001846 <HAL_GPIO_Init+0x12e>
 8001792:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <HAL_GPIO_Init+0x80>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	08001813 	.word	0x08001813
 800179c:	080017ed 	.word	0x080017ed
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001841 	.word	0x08001841
 80017a8:	08001847 	.word	0x08001847
 80017ac:	08001847 	.word	0x08001847
 80017b0:	08001847 	.word	0x08001847
 80017b4:	08001847 	.word	0x08001847
 80017b8:	08001847 	.word	0x08001847
 80017bc:	08001847 	.word	0x08001847
 80017c0:	08001847 	.word	0x08001847
 80017c4:	08001847 	.word	0x08001847
 80017c8:	08001847 	.word	0x08001847
 80017cc:	08001847 	.word	0x08001847
 80017d0:	08001847 	.word	0x08001847
 80017d4:	08001847 	.word	0x08001847
 80017d8:	08001847 	.word	0x08001847
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	08001809 	.word	0x08001809
 80017e4:	4a82      	ldr	r2, [pc, #520]	; (80019f0 <HAL_GPIO_Init+0x2d8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ea:	e02c      	b.n	8001846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e029      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	623b      	str	r3, [r7, #32]
          break;
 80017fc:	e024      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	3308      	adds	r3, #8
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e01f      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	330c      	adds	r3, #12
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e01a      	b.n	8001848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181a:	2304      	movs	r3, #4
 800181c:	623b      	str	r3, [r7, #32]
          break;
 800181e:	e013      	b.n	8001848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	611a      	str	r2, [r3, #16]
          break;
 8001832:	e009      	b.n	8001848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	615a      	str	r2, [r3, #20]
          break;
 800183e:	e003      	b.n	8001848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
          break;
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x130>
          break;
 8001846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d801      	bhi.n	8001852 <HAL_GPIO_Init+0x13a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e001      	b.n	8001856 <HAL_GPIO_Init+0x13e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d802      	bhi.n	8001864 <HAL_GPIO_Init+0x14c>
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x152>
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	3b08      	subs	r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	210f      	movs	r1, #15
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8090 	beq.w	80019b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001898:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_GPIO_Init+0x2dc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a55      	ldr	r2, [pc, #340]	; (80019f4 <HAL_GPIO_Init+0x2dc>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_GPIO_Init+0x2dc>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b0:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x2e0>)
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a49      	ldr	r2, [pc, #292]	; (80019fc <HAL_GPIO_Init+0x2e4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00d      	beq.n	80018f8 <HAL_GPIO_Init+0x1e0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <HAL_GPIO_Init+0x2e8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d007      	beq.n	80018f4 <HAL_GPIO_Init+0x1dc>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a47      	ldr	r2, [pc, #284]	; (8001a04 <HAL_GPIO_Init+0x2ec>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d101      	bne.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e004      	b.n	80018fa <HAL_GPIO_Init+0x1e2>
 80018f0:	2303      	movs	r3, #3
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x1e2>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_GPIO_Init+0x1e2>
 80018f8:	2300      	movs	r3, #0
 80018fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fc:	f002 0203 	and.w	r2, r2, #3
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	4093      	lsls	r3, r2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800190a:	493b      	ldr	r1, [pc, #236]	; (80019f8 <HAL_GPIO_Init+0x2e0>)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	43db      	mvns	r3, r3
 800193a:	4933      	ldr	r1, [pc, #204]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800193c:	4013      	ands	r3, r2
 800193e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	492d      	ldr	r1, [pc, #180]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	43db      	mvns	r3, r3
 8001962:	4929      	ldr	r1, [pc, #164]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001964:	4013      	ands	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4923      	ldr	r1, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	491f      	ldr	r1, [pc, #124]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800198c:	4013      	ands	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4919      	ldr	r1, [pc, #100]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4915      	ldr	r1, [pc, #84]	; (8001a08 <HAL_GPIO_Init+0x2f0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f aeaf 	bne.w	800172c <HAL_GPIO_Init+0x14>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	372c      	adds	r7, #44	; 0x2c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	10320000 	.word	0x10320000
 80019e0:	10310000 	.word	0x10310000
 80019e4:	10220000 	.word	0x10220000
 80019e8:	10210000 	.word	0x10210000
 80019ec:	10120000 	.word	0x10120000
 80019f0:	10110000 	.word	0x10110000
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010000 	.word	0x40010000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	40011000 	.word	0x40011000
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4a:	787b      	ldrb	r3, [r7, #1]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	041a      	lsls	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	611a      	str	r2, [r3, #16]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4013      	ands	r3, r2
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e26c      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8087 	beq.w	8001bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001abc:	4b92      	ldr	r3, [pc, #584]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac8:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d112      	bne.n	8001afa <HAL_RCC_OscConfig+0x5e>
 8001ad4:	4b8c      	ldr	r3, [pc, #560]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae0:	d10b      	bne.n	8001afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d06c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x12c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d168      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e246      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x76>
 8001b04:	4b80      	ldr	r3, [pc, #512]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a7f      	ldr	r2, [pc, #508]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e02e      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x98>
 8001b1a:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a7a      	ldr	r2, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a77      	ldr	r2, [pc, #476]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0xbc>
 8001b3e:	4b72      	ldr	r3, [pc, #456]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a71      	ldr	r2, [pc, #452]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6e      	ldr	r2, [pc, #440]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xd4>
 8001b58:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a6a      	ldr	r2, [pc, #424]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a67      	ldr	r2, [pc, #412]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fcb6 	bl	80014e8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fcb2 	bl	80014e8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e1fa      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe4>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fca2 	bl	80014e8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fc9e 	bl	80014e8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1e6      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x10c>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x18c>
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x176>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1ba      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4939      	ldr	r1, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fc57 	bl	80014e8 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fc53 	bl	80014e8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e19b      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4927      	ldr	r1, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <HAL_RCC_OscConfig+0x270>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc36 	bl	80014e8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fc32 	bl	80014e8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e17a      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03a      	beq.n	8001d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d019      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc16 	bl	80014e8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc12 	bl	80014e8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e15a      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f000 fa9a 	bl	8002218 <RCC_Delay>
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fbfc 	bl	80014e8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf2:	e00f      	b.n	8001d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fbf8 	bl	80014e8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e140      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	42420000 	.word	0x42420000
 8001d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e9      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a6 	beq.w	8001e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b97      	ldr	r3, [pc, #604]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a93      	ldr	r2, [pc, #588]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b8e      	ldr	r3, [pc, #568]	; (8001f94 <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a8a      	ldr	r2, [pc, #552]	; (8001f94 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fbb9 	bl	80014e8 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff fbb5 	bl	80014e8 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	; 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0fd      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x312>
 8001da0:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e02d      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x334>
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	f023 0301 	bic.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	6213      	str	r3, [r2, #32]
 8001dce:	e01c      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0x356>
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a6c      	ldr	r2, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a69      	ldr	r2, [pc, #420]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e00b      	b.n	8001e0a <HAL_RCC_OscConfig+0x36e>
 8001df2:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a66      	ldr	r2, [pc, #408]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb69 	bl	80014e8 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fb65 	bl	80014e8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0ab      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ee      	beq.n	8001e1a <HAL_RCC_OscConfig+0x37e>
 8001e3c:	e014      	b.n	8001e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb53 	bl	80014e8 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7ff fb4f 	bl	80014e8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e095      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ee      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a47      	ldr	r2, [pc, #284]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8081 	beq.w	8001f86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e84:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d061      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d146      	bne.n	8001f26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e98:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0x4fc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb23 	bl	80014e8 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea6:	f7ff fb1f 	bl	80014e8 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e067      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d108      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ece:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	492d      	ldr	r1, [pc, #180]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a19      	ldr	r1, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	4927      	ldr	r1, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x4fc>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff faf3 	bl	80014e8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff faef 	bl	80014e8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e037      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46a>
 8001f24:	e02f      	b.n	8001f86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_RCC_OscConfig+0x4fc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fadc 	bl	80014e8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff fad8 	bl	80014e8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e020      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x498>
 8001f52:	e018      	b.n	8001f86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	42420060 	.word	0x42420060

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d0      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e073      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff fa2c 	bl	80014e8 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff fa28 	bl	80014e8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e053      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d210      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	490a      	ldr	r1, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f98a 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	08002a7c 	.word	0x08002a7c
 8002168:	20000078 	.word	0x20000078
 800216c:	2000007c 	.word	0x2000007c

08002170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x30>
 800219a:	2b08      	cmp	r3, #8
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x36>
 800219e:	e027      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	e027      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	fb02 f203 	mul.w	r2, r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e004      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	613b      	str	r3, [r7, #16]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	693b      	ldr	r3, [r7, #16]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	007a1200 	.word	0x007a1200
 800220c:	08002a8c 	.word	0x08002a8c
 8002210:	08002a9c 	.word	0x08002a9c
 8002214:	003d0900 	.word	0x003d0900

08002218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <RCC_Delay+0x34>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <RCC_Delay+0x38>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002234:	bf00      	nop
  }
  while (Delay --);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <RCC_Delay+0x1c>
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000078 	.word	0x20000078
 8002250:	10624dd3 	.word	0x10624dd3

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e041      	b.n	80022ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff f85a 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 fa56 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d001      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e035      	b.n	8002378 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_TIM_Base_Start_IT+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x4e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d004      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x4e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_TIM_Base_Start_IT+0x94>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d111      	bne.n	8002366 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d010      	beq.n	8002376 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002364:	e007      	b.n	8002376 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400

0800238c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0202 	mvn.w	r2, #2
 80023c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f998 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f98b 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f99a 	bl	800271e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0204 	mvn.w	r2, #4
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f972 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f965 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f974 	bl	800271e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0208 	mvn.w	r2, #8
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f94c 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f93f 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f94e 	bl	800271e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0210 	mvn.w	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2208      	movs	r2, #8
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f926 	bl	800270c <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f919 	bl	80026fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f928 	bl	800271e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0201 	mvn.w	r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f87c 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa6f 	bl	80029fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8f8 	bl	8002730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0220 	mvn.w	r2, #32
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa42 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x1c>
 8002584:	2302      	movs	r3, #2
 8002586:	e0b4      	b.n	80026f2 <HAL_TIM_ConfigClockSource+0x186>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c0:	d03e      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xd4>
 80025c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c6:	f200 8087 	bhi.w	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	f000 8086 	beq.w	80026de <HAL_TIM_ConfigClockSource+0x172>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	d87f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d01a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xa6>
 80025dc:	2b70      	cmp	r3, #112	; 0x70
 80025de:	d87b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b60      	cmp	r3, #96	; 0x60
 80025e2:	d050      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x11a>
 80025e4:	2b60      	cmp	r3, #96	; 0x60
 80025e6:	d877      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d03c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xfa>
 80025ec:	2b50      	cmp	r3, #80	; 0x50
 80025ee:	d873      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d058      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x13a>
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d86f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b30      	cmp	r3, #48	; 0x30
 80025fa:	d064      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 80025fc:	2b30      	cmp	r3, #48	; 0x30
 80025fe:	d86b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d060      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d867      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05c      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b10      	cmp	r3, #16
 800260e:	d05a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002610:	e062      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f000 f96a 	bl	80028fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	609a      	str	r2, [r3, #8]
      break;
 800263e:	e04f      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f000 f953 	bl	80028fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e03c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 f8ca 	bl	800280c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2150      	movs	r1, #80	; 0x50
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f921 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 8002684:	e02c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	461a      	mov	r2, r3
 8002694:	f000 f8e8 	bl	8002868 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2160      	movs	r1, #96	; 0x60
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f911 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e01c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 f8aa 	bl	800280c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f901 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026c4:	e00c      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 f8f8 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026d6:	e003      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      break;
 80026dc:	e000      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <TIM_Base_SetConfig+0xc0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <TIM_Base_SetConfig+0x28>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d003      	beq.n	800276c <TIM_Base_SetConfig+0x28>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a28      	ldr	r2, [pc, #160]	; (8002808 <TIM_Base_SetConfig+0xc4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d108      	bne.n	800277e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <TIM_Base_SetConfig+0xc0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0x52>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0x52>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <TIM_Base_SetConfig+0xc4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <TIM_Base_SetConfig+0xc0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]
  }
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00
 8002808:	40000400 	.word	0x40000400

0800280c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f023 030a 	bic.w	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0210 	bic.w	r2, r3, #16
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	031b      	lsls	r3, r3, #12
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	621a      	str	r2, [r3, #32]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f043 0307 	orr.w	r3, r3, #7
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	021a      	lsls	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e041      	b.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d009      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d004      	beq.n	80029a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10c      	bne.n	80029c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40000400 	.word	0x40000400

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	2600      	movs	r6, #0
 8002a10:	4d0c      	ldr	r5, [pc, #48]	; (8002a44 <__libc_init_array+0x38>)
 8002a12:	4c0d      	ldr	r4, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a14:	1b64      	subs	r4, r4, r5
 8002a16:	10a4      	asrs	r4, r4, #2
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	f000 f822 	bl	8002a64 <_init>
 8002a20:	2600      	movs	r6, #0
 8002a22:	4d0a      	ldr	r5, [pc, #40]	; (8002a4c <__libc_init_array+0x40>)
 8002a24:	4c0a      	ldr	r4, [pc, #40]	; (8002a50 <__libc_init_array+0x44>)
 8002a26:	1b64      	subs	r4, r4, r5
 8002a28:	10a4      	asrs	r4, r4, #2
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08002aa0 	.word	0x08002aa0
 8002a48:	08002aa0 	.word	0x08002aa0
 8002a4c:	08002aa0 	.word	0x08002aa0
 8002a50:	08002aa4 	.word	0x08002aa4

08002a54 <memset>:
 8002a54:	4603      	mov	r3, r0
 8002a56:	4402      	add	r2, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <memset+0xa>
 8002a5c:	4770      	bx	lr
 8002a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a62:	e7f9      	b.n	8002a58 <memset+0x4>

08002a64 <_init>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr

08002a70 <_fini>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	bf00      	nop
 8002a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a76:	bc08      	pop	{r3}
 8002a78:	469e      	mov	lr, r3
 8002a7a:	4770      	bx	lr
